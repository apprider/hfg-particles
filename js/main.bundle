import './polyfills/classlist';
import FullscreenButton from './btn-fullscreen';
import ImgSelect from './image-select';
import InactivityMonitor from './inactivity-monitor';
import ImgDimWarn from './img-dimension-warning';
import MainMenu from './menu';
import Renderer from './renderer';
import config from './config';

console.log(config);

// some constants
const imageLoadingClass = 'loading-image';
const canvas = document.getElementById('main-canvas');

// set up ui components
const menu = new MainMenu();
const fullscreen = new FullscreenButton();
const imgSelect = new ImgSelect();
const inactivityMonitor = new InactivityMonitor();
const imgDimWarn = new ImgDimWarn();
const renderer = new Renderer(canvas);

const adjustCanvasSize = () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
};
window.addEventListener('resize', adjustCanvasSize);
adjustCanvasSize();

const srcImage = document.createElement('img');
srcImage.src = 'tron.jpg';
srcImage.onload = () => {
  imgDimWarn.verify(srcImage)
  .then(() => {
    renderer.loadImage(srcImage);
  }, () => {
    /* User canceled loading image */
    // If we don't clear, changeListeners may not fire if same image is selected again
    imgSelect.clear();
  })
  .then(() => {
    // do this both on cancel and on accept (= .finally())
    document.documentElement.classList.remove(imageLoadingClass);
  });
};

imgSelect.addChangeListener((file) => {
  // Prevent messed-up app states caused by multiple parallel image loads
  if (!document.documentElement.classList.contains(imageLoadingClass)) {
    document.documentElement.classList.add(imageLoadingClass);
    const fr = new FileReader();
    fr.onload = () => {
      srcImage.src = fr.result;
    };
    // TODO Add onerror listeners
    fr.readAsDataURL(file);
  }
});

menu.addChangeListener((state) => {
  console.log(state);
  renderer.setState(state);
});
