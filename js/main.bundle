import "./polyfills/classlist";
import FullscreenButton from "./btn-fullscreen";
import ImgSelect from "./image-select";
import InactivityMonitor from './inactivity-monitor';
import "./menu";
import createRegl from 'regl';
import * as shaders from './shaders';
import config from './config';

console.log(config);

// set up ui components
const fullscreen = new FullscreenButton();
const imgSelect = new ImgSelect();
const inactivityMonitor = new InactivityMonitor();

const canvas = document.getElementById('main-canvas');
const adjustCanvasSize = () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}
window.addEventListener('resize', adjustCanvasSize);
adjustCanvasSize();

const regl = createRegl({canvas});

console.log("max texture size: " + regl.limits.maxTextureSize);
console.log("point size dims: " + regl.limits.pointSizeDims[0] + " " + regl.limits.pointSizeDims[1]);

const src_image = document.createElement("img");
src_image.src = "tron.jpg";

const dbgBlitTextureCommand = regl({
  vert: shaders.dbgBlit.vert,
  frag: shaders.dbgBlit.frag,
  uniforms: { texture: regl.prop('texture') },
  viewport: { x: regl.prop('x'), y: regl.prop('y'), width: regl.prop('width'), height: regl.prop('height') },
  attributes: { texcoord: [[0, 0], [1, 0], [0, 1], [1, 1]] },
  primitive: "triangle strip",
  count: 4
});
function dbgBlitTexture(x, y, texture) {
    dbgBlitTextureCommand({texture: texture, x: x, y: y, width: texture.width, height: texture.height});
}

function buildData() {
  //TODO: dont use OpenGL Texture to get image pixels...
  const texture = regl.texture({data: src_image, format: 'rgb', flipY: true});
  const w = texture.width, h = texture.height;

  const imagePixels = new Uint8Array(w * h * 4);
  dbgBlitTexture(0, 0, texture);
  regl._gl.readPixels(0, 0, w, h, regl._gl.RGBA, regl._gl.UNSIGNED_BYTE, imagePixels);

  texture.destroy();


  const pixelIndices = Array.from(Array(w * h).keys());

  const texcoords = pixelIndices.map(i => [ (i % w + .5) / w, (~~(i / w) + .5) / h ] );

  const rgb = pixelIndices.map(i => {
    var pixel = imagePixels.slice(i * 4, i * 4 + 4);
    return [pixel[0] / 255, pixel[1] / 255, pixel[2] / 255];
  });

  const hsv = pixelIndices.map(i => {
    var pixel = rgb[i];

    var c_max = Math.max(pixel[0], pixel[1], pixel[2]);
    var c_min = Math.min(pixel[0], pixel[1], pixel[2]);
    var d = c_max - c_min;

    if(d < 0.00001 || c_max < 0.00001) return [0, 0, c_max];

    var _h;
    if(c_max == pixel[0]) { _h = (pixel[1] - pixel[2]) / d; if(_h < 0) _h += 6; }
    else if(c_max == pixel[1]) _h = (pixel[2] - pixel[0]) / d + 2;
    else _h = (pixel[0] - pixel[1]) / d + 4;

    return [_h * 60, d / c_max, c_max];
  });

  return {
    width: w,
    height: h,
    texcoordsBuffer: regl.buffer(texcoords),
    rgbBuffer: regl.buffer(rgb),
    hsvBuffer: regl.buffer(hsv)
  };
}

let command = null;
src_image.onload = () => {
  const data = buildData();

  command = regl({
    vert: shaders.vert,
    frag: shaders.frag,
    uniforms: {
      time : function(ctx) { return ctx.time; }
    },
    depth: { enable: false },
    blend: {
      enable: true,
      func: { srcRGB: "one", srcAlpha: "one", dstRGB: "one", dstAlpha: "one" },
      equation: { rgb: "add", alpha: "add" }
    },
    attributes: {
      texcoord: data.texcoordsBuffer,
      rgb: data.rgbBuffer,
      hsv: data.hsvBuffer
    },
    primitive: "points",
    count: data.width * data.height
  });
};

regl.frame(() => {
  if (command === null)
    return;
  regl.clear({color: [0, 0, 0, 1]});
  command();
});

imgSelect.addChangeListener(file => {
  var fr = new FileReader();
  fr.onload = () => {
    src_image.src = fr.result;
  }
  fr.readAsDataURL(file);
});
