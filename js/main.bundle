import "./polyfills/classlist";
import FullscreenButton from "./btn-fullscreen";
import ImgSelect from "./image-select";
import "./menu";
import createRegl from 'regl';
import * as shaders from './shaders';

// set up ui components
const fullscreen = new FullscreenButton();
const imgSelect = new ImgSelect();

const canvas = document.getElementById('main-canvas');
const adjustCanvasSize = () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}
window.addEventListener('resize', adjustCanvasSize);
adjustCanvasSize();

const regl = createRegl({canvas});

console.log("max texture size: " + regl.limits.maxTextureSize);
console.log("point size dims: " + regl.limits.pointSizeDims[0] + " " + regl.limits.pointSizeDims[1]);

const src_image = document.createElement("img");
src_image.src = "tron.jpg";

let command = null;
src_image.onload = () => {
  const image = regl.texture({ data: src_image, mag: "linear", min: "linear" });

  console.log(image.width + " x " + image.height);

  command = regl({
    vert: shaders.vert,
    frag: shaders.frag,
    uniforms: { image: image, time : function(ctx) { return ctx.time; } },
    depth: { enable: false },
    blend: {
      enable: true,
      func: { srcRGB: "one", srcAlpha: "one", dstRGB: "one", dstAlpha: "one" },
      equation: { rgb: "add", alpha: "add" }
    },
    attributes: { texcoord: Array.from(Array(image.width * image.height).keys()).map(i => [ (i % image.width + .5) / image.width, (~~(i / image.width) + .5) / image.height ] ) },
    primitive: "points",
    count: image.width * image.height
  });
};

regl.frame(() => {
  if (command === null)
    return;
  regl.clear({color: [0, 0, 0, 1]});
  command();
});

imgSelect.addChangeListener(file => {
  var fr = new FileReader();
  fr.onload = () => {
    src_image.src = fr.result;
  }
  fr.readAsDataURL(file);
});
