import './polyfills/classlist';
import FullscreenButton from './ui/btn-fullscreen';
import ImgSelect from './ui/image-select';
import InactivityMonitor from './ui/inactivity-monitor';
import ImgDimWarn from './ui/img-dimension-warning';
import MainMenu from './ui/menu';
import Renderer from './renderer';
import Config from './config';

console.info(Config);

// some constants
const imageLoadingClass = 'loading-image';
const canvas = document.getElementById('main-canvas');

// set up ui components
const fullscreen = new FullscreenButton();
const imgSelect = new ImgSelect();
const inactivityMonitor = new InactivityMonitor();
const imgDimWarn = new ImgDimWarn();
const renderer = new Renderer(canvas);
const menu = new MainMenu(renderer.getClock());

const adjustCanvasSize = () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
};
window.addEventListener('resize', adjustCanvasSize);
adjustCanvasSize();

const srcImage = document.createElement('img');
srcImage.crossOrigin = 'Anonymous'; // http://stackoverflow.com/a/27840082/1468532
srcImage.src = 'tron.jpg';
srcImage.onload = () => {
  imgDimWarn.verify(srcImage)
  .then(({ xParticlesCount, yParticlesCount }) => {
    renderer.getState().setDefaultDomImage(srcImage);
    const config = Object.assign({}, menu.submittedConfig, { xParticlesCount, yParticlesCount });
    menu.applyConfig(config);
    menu.submit();
  }, () => {
    /* User canceled loading image */
    // If we don't clear, changeListeners may not fire if same image is selected again
    imgSelect.clear();
  })
  .then(() => {
    // do this both on cancel and on accept (= .finally())
    document.documentElement.classList.remove(imageLoadingClass);
  });
};
srcImage.onerror = () => {
  document.documentElement.classList.remove(imageLoadingClass);
};

imgSelect.addChangeListener((url) => {
  // Prevent messed-up app states caused by multiple parallel image loads
  if (!document.documentElement.classList.contains(imageLoadingClass)) {
    srcImage.src = url;
    document.documentElement.classList.add(imageLoadingClass);
  }
});

menu.addChangeListener((config) => {
  renderer.setConfig(config);
});
