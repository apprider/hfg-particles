import './polyfills/classlist';
import FullscreenButton from './btn-fullscreen';
import ImgSelect from './image-select';
import InactivityMonitor from './inactivity-monitor';
import ImgDimWarn from './img-dimension-warning';
import MainMenu from './menu';
import Renderer from './renderer';
import config from './config';

import * as effects from './effects/index';

console.log(config);

// some constants
const imageLoadingClass = 'loading-image';
const canvas = document.getElementById('main-canvas');

const effectList = Object.values(effects);
for (let i = 0; i < effectList.length; i++) {
  console.log(`Registered effect: ${effectList[i].getId()}`);
}

// set up ui components
const menu = new MainMenu();
const fullscreen = new FullscreenButton();
const imgSelect = new ImgSelect();
const inactivityMonitor = new InactivityMonitor();
const imgDimWarn = new ImgDimWarn();
const renderer = new Renderer(canvas);

const adjustCanvasSize = () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
};
window.addEventListener('resize', adjustCanvasSize);
adjustCanvasSize();

const srcImage = document.createElement('img');
srcImage.crossOrigin = 'Anonymous'; // http://stackoverflow.com/a/27840082/1468532
srcImage.src = 'tron.jpg';
srcImage.onload = () => {
  imgDimWarn.verify(srcImage)
  .then(({xParticlesCount, yParticlesCount}) => {
    renderer.loadImageData(srcImage);
    const state = Object.assign({}, menu.submittedState, {xParticlesCount, yParticlesCount});
    menu.applyState(state);
    menu.submit();
  }, () => {
    /* User canceled loading image */
    // If we don't clear, changeListeners may not fire if same image is selected again
    imgSelect.clear();
  })
  .then(() => {
    // do this both on cancel and on accept (= .finally())
    document.documentElement.classList.remove(imageLoadingClass);
  });
};
srcImage.onerror = () => {
  document.documentElement.classList.remove(imageLoadingClass);
};

imgSelect.addChangeListener((url) => {
  // Prevent messed-up app states caused by multiple parallel image loads
  if (!document.documentElement.classList.contains(imageLoadingClass)) {
    srcImage.src = url;
    document.documentElement.classList.add(imageLoadingClass);
  }
});

menu.addChangeListener((state) => {
  renderer.setState(state);
});
