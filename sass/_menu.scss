@import 'mixins/hide';

$menu-background-color: rgba(255, 255, 255, 0.9);
$menu-apply-btn-height: 10%;

.menu-container {
  display: inline-block;
  overflow-y: hidden;
  padding: 0;
  margin: 0;
  input[type=checkbox].toggle-menu-visible {
    @include visuallyhidden;
    & + label {
      @include icon-button($fa-var-bars);
      position: absolute;
    }
    &:checked + label {
      z-index: 10;
      color: #333;
      @include icon($fa-var-caret-square-o-left);
    }
    /**
     * Menu hide/show toggle implementation
     */
    & ~ .menu-content,
    & ~ .menu-timeline-container {
      display: none;
      z-index: 1;
    }
    &:checked {
      & ~ .menu-content,
      & ~ .menu-timeline-container {
        display: block;
      }
    }
  }

  .menu-content {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    .menu-content-inner {
      background-color: $menu-background-color;
      overflow-y: scroll;
      /* This asserts that menu items won't be
       * hidden by apply button if a scroll bar
       * becomes visible */
      &:after {
        content: "";
        display: block;
        height: 10%;
        min-height: 20px;
      }
      /**
       * Load/Store/Reset Buttons
       */
      @mixin load-store-btn {
        background-color: #eee;
        border-color: #555;
        border-style: solid;
        border-width: 1px;
        border-radius: 5px;
        padding: 5px;
        font-size: 1em;
        margin: 5px;
        &:focus,
        &:hover {
          background-color: #fff;
        }
      }
      .menu-btn-importstate {
        @include load-store-btn
        & > input[type="file"] {
          @include visuallyhidden;
        }
      }
      .menu-btn-exportstate {
        @include load-store-btn
      }
      .menu-btn-resetstate {
        @include load-store-btn
      }
    }
  }

  .menu-timeline-container {
    position: absolute;
    overflow-y: scroll;
    background-color: $menu-background-color;
  }

  .menu-btn-apply {
    display: block;
    position: absolute;
    height: $menu-apply-btn-height;
    min-height: 20px;
    width: 100%;
    bottom: 0;
    border: none;
    background-color: #5CB85C;
    color: #eee;
    cursor: pointer;
    &[disabled] {
      cursor: not-allowed;
    }
    font-size: 110%;
    &:hover,
    &:focus {
      background-color: #449D44;
    }
    &[disabled] {
      &:hover,
      &:focus {
        background-color: #5CB85C;
      }
    }
  }
}

@mixin menu-responsiveness(
  $icon-btn-font-size,
  $button-edge-dist,
  $menu-width,
  $menu-height,
  $timeline-height
) {
  .menu-container {
    input[type=checkbox].toggle-menu-visible {
      & + label {
        font-size: $icon-btn-font-size;;
        top: $button-edge-dist;
        left: $button-edge-dist;
      }
      &:checked + label {
        left: $menu-width;
        transform: translateX(-100%);
        margin-left: -$button-edge-dist;
      }
    }
    .menu-content {
      width: $menu-width;
      .menu-content-inner {
        @if $menu-width == 100% {
          height: $menu-height - $menu-apply-btn-height;
        } @else {
          height: $menu-height;
        }
        /* Vertical padding is not allowed
         * because we only have the space
         * between top and apply button */
        padding: 0 $button-edge-dist;
        /* but we can fake with :before and :after */
        &:before {
          content: "";
          display: block;
          margin-bottom: $button-edge-dist;
        }
        &:after {
          content: "";
          display: block;
          margin-top: $button-edge-dist;
        }
      }
    }
    .menu-timeline-container {
      @if $menu-width == 100% {
        left: 0;
        width: $menu-width;
        height: 100% - $menu-height;
        bottom: $menu-apply-btn-height;
        border-top: solid 1px #333;
      } @else {
        left: $menu-width;
        width: 100% - $menu-width;
        height: $timeline-height;
        bottom: 0;
        border-top: none;
      }
    }
  }
}
