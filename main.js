(function () {
'use strict';

// Source: https://gist.github.com/k-gun/c2ea7c49edf7b757fe9561ba37cb19ca
(function setupClasslistPolyfill() {
  // helpers
  var regExp = function (name) { return new RegExp(("(^| )" + name + "( |$)")); };
  var forEach = function (list, fn, scope) {
    for (var i = 0; i < list.length; i++) {
      fn.call(scope, list[i]);
    }
  };

  // class list object with basic methods
  function ClassList(element) {
    this.element = element;
  }

  ClassList.prototype = {
    add: function add() {
      var this$1 = this;
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      forEach(args, function (name) {
        if (!this$1.contains(name)) {
          this$1.element.className += this$1.element.className.length > 0 ? (" " + name) : name;
        }
      }, this);
    },
    remove: function remove() {
      var this$1 = this;
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      forEach(args, function (name) {
        this$1.element.className =
          this$1.element.className.replace(regExp(name), '');
      }, this);
    },
    toggle: function toggle(name) {
      return this.contains(name)
        ? (this.remove(name), false) : (this.add(name), true);
    },
    contains: function contains(name) {
      return regExp(name).test(this.element.className);
    },
    // bonus..
    replace: function replace(oldName, newName) {
      this.remove(oldName);
      this.add(newName);
    }
  };

  // IE8/9, Safari
  if (!('classList' in Element.prototype)) {
    Object.defineProperty(Element.prototype, 'classList', {
      get: function get() {
        return new ClassList(this);
      }
    });
  }

  // replace() support for others
  if (window.DOMTokenList && DOMTokenList.prototype.replace == null) {
    DOMTokenList.prototype.replace = ClassList.prototype.replace;
  }
}());

function isFullscreen() {
  return document.fullscreen || document.mozFullScreen ||
    document.webkitIsFullScreen || document.msFullscreenElement;
}

function updateFullscreenClass() {
  var fullscreenClass = 'fullscreen';
  if (isFullscreen()) {
    document.documentElement.classList.add(fullscreenClass);
  } else {
    document.documentElement.classList.remove(fullscreenClass);
  }
}

function toggleFullScreen() {
  if ((document.fullScreenElement && document.fullScreenElement !== null) ||
   (!document.mozFullScreen && !document.webkitIsFullScreen)) {
    if (document.documentElement.requestFullScreen) {
      document.documentElement.requestFullScreen();
    } else if (document.documentElement.mozRequestFullScreen) {
      document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullScreen) {
      document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  } else if (document.cancelFullScreen) {
    document.cancelFullScreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitCancelFullScreen) {
    document.webkitCancelFullScreen();
  }
}

var FullscreenButton = function FullscreenButton() {
  [].forEach.call(document.getElementsByClassName('btn-fullscreen'), function (elm) {
    elm.addEventListener('click', toggleFullScreen);
  });

  document.addEventListener('fullscreenchange', updateFullscreenClass, false);
  document.addEventListener('mozfullscreenchange', updateFullscreenClass, false);
  document.addEventListener('webkitfullscreenchange', updateFullscreenClass, false);
  document.addEventListener('msfullscreenchange', updateFullscreenClass, false);
  updateFullscreenClass();
};

var DoubleClickFullscreen = function DoubleClickFullscreen() {
  var this$1 = this;

  this.element = document.querySelector('.img-paste-box');
  this.clicks = 0;
  this.resetTimeout = false;
  this.element.addEventListener('click', function () {
    this$1.clicks = this$1.clicks + 1;
    if (this$1.clicks > 1) {
      this$1.reset();
      toggleFullScreen();
    } else {
      this$1.startResetTimeout();
    }
  });
};
DoubleClickFullscreen.prototype.startResetTimeout = function startResetTimeout () {
    var this$1 = this;

  var DBL_CLICK_TIME = 400;
  if (this.resetTimeout) {
    window.clearTimeout(this.resetTimeout);
  }
  this.resetTimeout = window.setTimeout(function () { return this$1.reset(); }, DBL_CLICK_TIME);
};
DoubleClickFullscreen.prototype.reset = function reset () {
  this.clicks = 0;
  if (this.resetTimeout) {
    window.clearTimeout(this.resetTimeout);
    this.resetTimeout = false;
  }
};

if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
  throw new Error('The File APIs are not fully supported in this browser.');
}

var ImgSelect = function ImgSelect() {
  var this$1 = this;

  // properties:
  this.changeListeners = [];
  this.input = document.getElementById('btn-file-select');
  this.FR = new FileReader();

  // drag-n-drop support
  var html = document.documentElement;
  var input = this.input;
  var dragClass = 'dragging-file';
  html.addEventListener('dragenter', function (e) {
    html.classList.add(dragClass);
    e.stopPropagation();
    e.preventDefault();
  });
  html.addEventListener('dragleave', function (e) {
    if (e.clientX === 0 && e.clientY === 0) {
      html.classList.remove(dragClass);
    }
    e.stopPropagation();
    e.preventDefault();
  });
  // needed to prevent browser redirect to dropped file:
  // http://stackoverflow.com/a/6756680/1468532
  html.addEventListener('dragover', function (e) {
    e.preventDefault();
  });
  html.addEventListener('drop', function (e) {
    html.classList.remove(dragClass);
    var fileItem = [].find.call(e.dataTransfer.items, function (item) { return item.kind === 'file'; });
    if (fileItem) {
      this$1.fileToUrl(fileItem.getAsFile())
      .then(function (url) {
        this$1.changeListeners.forEach(function (listener) { return listener(url); });
      }, function (msg) {
        // TODO
        console.error(msg);
      });
      e.preventDefault();

      return;
    }
    var urlItem = [].find.call(e.dataTransfer.items, function (item) { return (item.kind === 'string' && item.type === 'text/uri-list'); });
    if (urlItem) {
      urlItem.getAsString(function (url) {
        this$1.changeListeners.forEach(function (listener) { return listener(url); });
      });
      e.preventDefault();
    }
  });

  // Try to catch clipboard pastes
  [].forEach.call(document.body.querySelectorAll('.img-paste-box'), function (box) {
    box.addEventListener('paste', function (e) {
      var fileItem = [].find.call(e.clipboardData.items, function (item) { return item.kind === 'file'; });
      if (fileItem) {
        this$1.fileToUrl(fileItem.getAsFile())
        .then(function (url) {
          this$1.changeListeners.forEach(function (listener) { return listener(url); });
        }, function (msg) {
          // TODO
          console.error(msg);
        });
      }
      e.preventDefault();
    });
    // Also undo effects of contenteditable="true" - we really only
    // want it for "paste" option in context menu
    box.addEventListener('keydown', function (e) {
      if (e.key.length > 1) { // no text input
        return;
      }
      e.preventDefault();
    });
    // Touch devices might fire up a virtual keyboard, which is confusing
    // so in this case, we need to completely disable this feature :(
    box.addEventListener('touchend', function (e) {
      box.readonly = true; // Force keyboard to hide on input field.
      box.disabled = true; // Force keyboard to hide on textarea field.
      setTimeout(function () {
        box.blur();//actually close the keyboard
        // Remove readonly attribute after keyboard is hidden.
        box.readonly = false;
        box.disabled = false;
      }, 100);
    });
  });

  // catch the change event
  input.addEventListener('change', function (evt) {
    var file = evt.target.files[0];
    if (file) {
      this$1.fileToUrl(file)
      .then(function (url) {
        this$1.changeListeners.forEach(function (listener) { return listener(url); });
      }, function (msg) {
        // TODO
        console.error(msg);
      });
    }
  });
};

ImgSelect.prototype.fileToUrl = function fileToUrl (file) {
    var this$1 = this;

  return new Promise(function (res, rej) {
    // TODO why would this be null?
    if (file === null) {
      rej('File was null');
    }
    if (this$1.FR.readyState === 1) {
      this$1.FR.abort();
    }
    this$1.FR.onload = function () {
      res(this$1.FR.result);
    };
    this$1.FR.onerror = rej;
    this$1.FR.readAsDataURL(file);
  });
};

ImgSelect.prototype.addChangeListener = function addChangeListener (listener) {
  this.changeListeners.push(listener);
};
ImgSelect.prototype.clear = function clear () {
  this.input.value = null;
};

var InactivityMonitor = function InactivityMonitor() {
  var this$1 = this;

  this.timeout = undefined;

  var inactivityTimeout = 3000;
  var inactivityClass = 'user-inactive';

  var onInactivity = function () {
    document.documentElement.classList.add(inactivityClass);
  };
  var onActivity = function () {
    if (this$1.timeout !== undefined) {
      window.clearTimeout(this$1.timeout);
    }
    this$1.timeout = window.setTimeout(onInactivity, inactivityTimeout);
    document.documentElement.classList.remove(inactivityClass);
  };
  window.onload = onActivity;
  // DOM Events
  document.addEventListener('mousemove', onActivity);
  document.addEventListener('keypress', onActivity);
  // Touch devices don't have (or at least make us of) mouses or keys
  document.addEventListener('click', onActivity);
};

function parseHtml(html) {
  // eslint-disable-next-line no-param-reassign
  html = html.trim();
  /* code adapted from jQuery */
  var wrapper = function (depth, open, close) { return ({ depth: depth, open: open, close: close }); };
  var wrapMap = {
    option: wrapper(1, "<select multiple='multiple'>", '</select>'),
    legend: wrapper(1, '<fieldset>', '</fieldset>'),
    area:   wrapper(1, '<map>', '</map>'),
    param:  wrapper(1, '<object>', '</object>'),
    thead:  wrapper(1, '<table>', '</table>'),
    tr:     wrapper(2, '<table><tbody>', '</tbody></table>'),
    col:    wrapper(2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'),
    td:     wrapper(3, '<table><tbody><tr>', '</tr></tbody></table>'),

    // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
    // unless wrapped in a div with non-breaking characters in front of it.
    _default: wrapper(1, '<div>', '</div>')
  };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.thead;
  wrapMap.tfoot = wrapMap.thead;
  wrapMap.colgroup = wrapMap.thead;
  wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  var element = document.createElement('div');
  var match = /<\s*(\w+).*?>/g.exec(html);
  if (match != null) {
    var tag = match[1];
    var wrap = wrapMap[tag] || wrapMap._default;
    // eslint-disable-next-line no-param-reassign
    html = "" + (wrap.open) + html + (wrap.close);
    element.innerHTML = html;
    // Descend through wrappers to the right content
    var depth = wrap.depth + 1;
    for (var d = 0; d < depth; d++) {
      if (element.firstChild !== element.lastChild) {
        throw new Error(
          'util.parseHtml requires one single top level element.' +
          'NOTE: This error might also occur if your tag structure ' +
          'is nested illegaly.'
        );
      }
      element = element.lastChild;
    }
  } else {
    // if only text is passed
    element.innerHTML = html;
    element = element.lastChild;
  }

  return element;
}

function clearChildNodes(node) {
  while (node.firstChild) {
    node.removeChild(node.firstChild);
  }
}

function imageScalingMarkup(classPrefix) {
  return ("\n    <fieldset>\n      <legend>Image scaling</legend>\n      <label>\n        Image scaling:\n        <select class=\"" + classPrefix + "-scaling-select\">\n          <option value=\"crop-to-viewport\" title=\"Image might be cropped to fit the viewport\" selected>crop to fit viewport</option>\n          <option value=\"fit-image\" title=\"Black borders might be visible\">fit image</option>\n          <option value=\"fit-width\" title=\"Black borders might be visible at the top and bottom\">fit width</option>\n          <option value=\"fit-height\" title=\"Black borders might be visible at the left or right edges\">fit height</option>\n          <option value=\"scale-to-viewport\" title=\"The image's aspect ratio might be skewed\">scale to fit viewport</option>\n        </select>\n      </label><br/>\n      <label>\n        Horizontal image cropping:\n        <select class=\"" + classPrefix + "-crop-x-select\">\n          <option value=\"crop-both\" title=\"Drop exceeding pixels on either side\" selected>both sides</option>\n          <option value=\"crop-left\" title=\"Drop exceeding pixels on the leftern side\">leftern side</option>\n          <option value=\"crop-right\" title=\"Drop exceeding pixels on the rightern side\">rightern side</option>\n        </select>\n      </label><br/>\n      <label>\n        Vertical image cropping:\n        <select class=\"" + classPrefix + "-crop-y-select\">\n          <option value=\"crop-both\" title=\"Drop exceeding pixels on either edge\" selected>both edges</option>\n          <option value=\"crop-top\" title=\"Drop exceeding pixels at the top\">top edge</option>\n          <option value=\"crop-bottom\" title=\"Drop exceeding pixels at the bottom\">bottom edge</option>\n        </select>\n      </label>\n    </fieldset>\n  ")
}

var LoadImgDialog = function LoadImgDialog() {
  var this$1 = this;

  var classPrefix = 'load-default-img';
  var loadBtnClass = "btn-" + classPrefix + "-load";
  var cancelLoadBtnClass = "btn-" + classPrefix + "-cancel";

  // Object properties
  this.parentNode = document.getElementById('modal-container');
  this.resolve = null;
  this.reject = null;
  this.elm = parseHtml(("\n      <div class=\"" + classPrefix + "-backdrop\">\n        <div class=\"" + classPrefix + "-popup\">\n          " + (imageScalingMarkup(classPrefix)) + "\n          <button type=\"button\" class=\"" + loadBtnClass + "\">Load</button>\n          <button type=\"button\" class=\"" + cancelLoadBtnClass + "\">Cancel</button>\n        </div>\n      </div>\n    "));

  this.scalingSelect = this.elm.querySelector(("select." + classPrefix + "-scaling-select"));
  this.cropXSelect = this.elm.querySelector(("select." + classPrefix + "-crop-x-select"));
  this.cropYSelect = this.elm.querySelector(("select." + classPrefix + "-crop-y-select"));

  var loadBtn = this.elm.querySelector(("." + loadBtnClass));
  loadBtn.addEventListener('click', function () {
    this$1.hide();
    this$1.resolve({
      imageScaling: this$1.scalingSelect.value,
      imageCropping: {
        x: this$1.cropXSelect.value,
        y: this$1.cropYSelect.value
      }
    });
  });
  var cancelBtn = this.elm.querySelector(("." + cancelLoadBtnClass));
  cancelBtn.addEventListener('click', function () {
    this$1.hide();
    this$1.reject();
  });
};
LoadImgDialog.prototype.load = function load (img) {
    var this$1 = this;

  return new Promise(function (res, rej) {
    this$1.resolve = res;
    this$1.reject = rej;

    this$1.parentNode.appendChild(this$1.elm);
  });
};
LoadImgDialog.prototype.hide = function hide () {
  this.parentNode.removeChild(this.elm);
};

/* MIT license */

var conversions = {
  rgb2hsl: rgb2hsl,
  rgb2hsv: rgb2hsv,
  rgb2hwb: rgb2hwb,
  rgb2cmyk: rgb2cmyk,
  rgb2keyword: rgb2keyword,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  rgb2lch: rgb2lch,

  hsl2rgb: hsl2rgb,
  hsl2hsv: hsl2hsv,
  hsl2hwb: hsl2hwb,
  hsl2cmyk: hsl2cmyk,
  hsl2keyword: hsl2keyword,

  hsv2rgb: hsv2rgb,
  hsv2hsl: hsv2hsl,
  hsv2hwb: hsv2hwb,
  hsv2cmyk: hsv2cmyk,
  hsv2keyword: hsv2keyword,

  hwb2rgb: hwb2rgb,
  hwb2hsl: hwb2hsl,
  hwb2hsv: hwb2hsv,
  hwb2cmyk: hwb2cmyk,
  hwb2keyword: hwb2keyword,

  cmyk2rgb: cmyk2rgb,
  cmyk2hsl: cmyk2hsl,
  cmyk2hsv: cmyk2hsv,
  cmyk2hwb: cmyk2hwb,
  cmyk2keyword: cmyk2keyword,

  keyword2rgb: keyword2rgb,
  keyword2hsl: keyword2hsl,
  keyword2hsv: keyword2hsv,
  keyword2hwb: keyword2hwb,
  keyword2cmyk: keyword2cmyk,
  keyword2lab: keyword2lab,
  keyword2xyz: keyword2xyz,

  xyz2rgb: xyz2rgb,
  xyz2lab: xyz2lab,
  xyz2lch: xyz2lch,

  lab2xyz: lab2xyz,
  lab2rgb: lab2rgb,
  lab2lch: lab2lch,

  lch2lab: lch2lab,
  lch2xyz: lch2xyz,
  lch2rgb: lch2rgb
};


function rgb2hsl(rgb) {
  var r = rgb[0]/255,
      g = rgb[1]/255,
      b = rgb[2]/255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, l;

  if (max == min)
    { h = 0; }
  else if (r == max)
    { h = (g - b) / delta; }
  else if (g == max)
    { h = 2 + (b - r) / delta; }
  else if (b == max)
    { h = 4 + (r - g)/ delta; }

  h = Math.min(h * 60, 360);

  if (h < 0)
    { h += 360; }

  l = (min + max) / 2;

  if (max == min)
    { s = 0; }
  else if (l <= 0.5)
    { s = delta / (max + min); }
  else
    { s = delta / (2 - max - min); }

  return [h, s * 100, l * 100];
}

function rgb2hsv(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, v;

  if (max == 0)
    { s = 0; }
  else
    { s = (delta/max * 1000)/10; }

  if (max == min)
    { h = 0; }
  else if (r == max)
    { h = (g - b) / delta; }
  else if (g == max)
    { h = 2 + (b - r) / delta; }
  else if (b == max)
    { h = 4 + (r - g) / delta; }

  h = Math.min(h * 60, 360);

  if (h < 0)
    { h += 360; }

  v = ((max / 255) * 1000) / 10;

  return [h, s, v];
}

function rgb2hwb(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      h = rgb2hsl(rgb)[0],
      w = 1/255 * Math.min(r, Math.min(g, b)),
      b = 1 - 1/255 * Math.max(r, Math.max(g, b));

  return [h, w * 100, b * 100];
}

function rgb2cmyk(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255,
      c, m, y, k;

  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
}

function rgb2keyword(rgb) {
  return reverseKeywords[JSON.stringify(rgb)];
}

function rgb2xyz(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  return [x * 100, y *100, z * 100];
}

function rgb2lab(rgb) {
  var xyz = rgb2xyz(rgb),
        x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function rgb2lch(args) {
  return lab2lch(rgb2lab(args));
}

function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    { t2 = l * (1 + s); }
  else
    { t2 = l + s - l * s; }
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      { val = t1 + (t2 - t1) * 6 * t3; }
    else if (2 * t3 < 1)
      { val = t2; }
    else if (3 * t3 < 2)
      { val = t1 + (t2 - t1) * (2 / 3 - t3) * 6; }
    else
      { val = t1; }

    rgb[i] = val * 255;
  }

  return rgb;
}

function hsl2hsv(hsl) {
  var h = hsl[0],
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      sv, v;

  if(l === 0) {
      // no need to do calc on black
      // also avoids divide by 0 error
      return [0, 0, 0];
  }

  l *= 2;
  s *= (l <= 1) ? l : 2 - l;
  v = (l + s) / 2;
  sv = (2 * s) / (l + s);
  return [h, sv * 100, v * 100];
}

function hsl2hwb(args) {
  return rgb2hwb(hsl2rgb(args));
}

function hsl2cmyk(args) {
  return rgb2cmyk(hsl2rgb(args));
}

function hsl2keyword(args) {
  return rgb2keyword(hsl2rgb(args));
}


function hsv2rgb(hsv) {
  var h = hsv[0] / 60,
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      hi = Math.floor(h) % 6;

  var f = h - Math.floor(h),
      p = 255 * v * (1 - s),
      q = 255 * v * (1 - (s * f)),
      t = 255 * v * (1 - (s * (1 - f))),
      v = 255 * v;

  switch(hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
}

function hsv2hsl(hsv) {
  var h = hsv[0],
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      sl, l;

  l = (2 - s) * v;
  sl = s * v;
  sl /= (l <= 1) ? l : 2 - l;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}

function hsv2hwb(args) {
  return rgb2hwb(hsv2rgb(args))
}

function hsv2cmyk(args) {
  return rgb2cmyk(hsv2rgb(args));
}

function hsv2keyword(args) {
  return rgb2keyword(hsv2rgb(args));
}

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
function hwb2rgb(hwb) {
  var h = hwb[0] / 360,
      wh = hwb[1] / 100,
      bl = hwb[2] / 100,
      ratio = wh + bl,
      i, v, f, n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 0x01) != 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh);  // linear interpolation

  switch (i) {
    default:
    case 6:
    case 0: r = v; g = n; b = wh; break;
    case 1: r = n; g = v; b = wh; break;
    case 2: r = wh; g = v; b = n; break;
    case 3: r = wh; g = n; b = v; break;
    case 4: r = n; g = wh; b = v; break;
    case 5: r = v; g = wh; b = n; break;
  }

  return [r * 255, g * 255, b * 255];
}

function hwb2hsl(args) {
  return rgb2hsl(hwb2rgb(args));
}

function hwb2hsv(args) {
  return rgb2hsv(hwb2rgb(args));
}

function hwb2cmyk(args) {
  return rgb2cmyk(hwb2rgb(args));
}

function hwb2keyword(args) {
  return rgb2keyword(hwb2rgb(args));
}

function cmyk2rgb(cmyk) {
  var c = cmyk[0] / 100,
      m = cmyk[1] / 100,
      y = cmyk[2] / 100,
      k = cmyk[3] / 100,
      r, g, b;

  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
}

function cmyk2hsl(args) {
  return rgb2hsl(cmyk2rgb(args));
}

function cmyk2hsv(args) {
  return rgb2hsv(cmyk2rgb(args));
}

function cmyk2hwb(args) {
  return rgb2hwb(cmyk2rgb(args));
}

function cmyk2keyword(args) {
  return rgb2keyword(cmyk2rgb(args));
}


function xyz2rgb(xyz) {
  var x = xyz[0] / 100,
      y = xyz[1] / 100,
      z = xyz[2] / 100,
      r, g, b;

  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  // assume sRGB
  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    : r = (r * 12.92);

  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    : g = (g * 12.92);

  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    : b = (b * 12.92);

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
}

function xyz2lab(xyz) {
  var x = xyz[0],
      y = xyz[1],
      z = xyz[2],
      l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function xyz2lch(args) {
  return lab2lch(xyz2lab(args));
}

function lab2xyz(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      x, y, z, y2;

  if (l <= 8) {
    y = (l * 100) / 903.3;
    y2 = (7.787 * (y / 100)) + (16 / 116);
  } else {
    y = 100 * Math.pow((l + 16) / 116, 3);
    y2 = Math.pow(y / 100, 1/3);
  }

  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

  return [x, y, z];
}

function lab2lch(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      hr, h, c;

  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
}

function lab2rgb(args) {
  return xyz2rgb(lab2xyz(args));
}

function lch2lab(lch) {
  var l = lch[0],
      c = lch[1],
      h = lch[2],
      a, b, hr;

  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
}

function lch2xyz(args) {
  return lab2xyz(lch2lab(args));
}

function lch2rgb(args) {
  return lab2rgb(lch2lab(args));
}

function keyword2rgb(keyword) {
  return cssKeywords[keyword];
}

function keyword2hsl(args) {
  return rgb2hsl(keyword2rgb(args));
}

function keyword2hsv(args) {
  return rgb2hsv(keyword2rgb(args));
}

function keyword2hwb(args) {
  return rgb2hwb(keyword2rgb(args));
}

function keyword2cmyk(args) {
  return rgb2cmyk(keyword2rgb(args));
}

function keyword2lab(args) {
  return rgb2lab(keyword2rgb(args));
}

function keyword2xyz(args) {
  return rgb2xyz(keyword2rgb(args));
}

var cssKeywords = {
  aliceblue:  [240,248,255],
  antiquewhite: [250,235,215],
  aqua: [0,255,255],
  aquamarine: [127,255,212],
  azure:  [240,255,255],
  beige:  [245,245,220],
  bisque: [255,228,196],
  black:  [0,0,0],
  blanchedalmond: [255,235,205],
  blue: [0,0,255],
  blueviolet: [138,43,226],
  brown:  [165,42,42],
  burlywood:  [222,184,135],
  cadetblue:  [95,158,160],
  chartreuse: [127,255,0],
  chocolate:  [210,105,30],
  coral:  [255,127,80],
  cornflowerblue: [100,149,237],
  cornsilk: [255,248,220],
  crimson:  [220,20,60],
  cyan: [0,255,255],
  darkblue: [0,0,139],
  darkcyan: [0,139,139],
  darkgoldenrod:  [184,134,11],
  darkgray: [169,169,169],
  darkgreen:  [0,100,0],
  darkgrey: [169,169,169],
  darkkhaki:  [189,183,107],
  darkmagenta:  [139,0,139],
  darkolivegreen: [85,107,47],
  darkorange: [255,140,0],
  darkorchid: [153,50,204],
  darkred:  [139,0,0],
  darksalmon: [233,150,122],
  darkseagreen: [143,188,143],
  darkslateblue:  [72,61,139],
  darkslategray:  [47,79,79],
  darkslategrey:  [47,79,79],
  darkturquoise:  [0,206,209],
  darkviolet: [148,0,211],
  deeppink: [255,20,147],
  deepskyblue:  [0,191,255],
  dimgray:  [105,105,105],
  dimgrey:  [105,105,105],
  dodgerblue: [30,144,255],
  firebrick:  [178,34,34],
  floralwhite:  [255,250,240],
  forestgreen:  [34,139,34],
  fuchsia:  [255,0,255],
  gainsboro:  [220,220,220],
  ghostwhite: [248,248,255],
  gold: [255,215,0],
  goldenrod:  [218,165,32],
  gray: [128,128,128],
  green:  [0,128,0],
  greenyellow:  [173,255,47],
  grey: [128,128,128],
  honeydew: [240,255,240],
  hotpink:  [255,105,180],
  indianred:  [205,92,92],
  indigo: [75,0,130],
  ivory:  [255,255,240],
  khaki:  [240,230,140],
  lavender: [230,230,250],
  lavenderblush:  [255,240,245],
  lawngreen:  [124,252,0],
  lemonchiffon: [255,250,205],
  lightblue:  [173,216,230],
  lightcoral: [240,128,128],
  lightcyan:  [224,255,255],
  lightgoldenrodyellow: [250,250,210],
  lightgray:  [211,211,211],
  lightgreen: [144,238,144],
  lightgrey:  [211,211,211],
  lightpink:  [255,182,193],
  lightsalmon:  [255,160,122],
  lightseagreen:  [32,178,170],
  lightskyblue: [135,206,250],
  lightslategray: [119,136,153],
  lightslategrey: [119,136,153],
  lightsteelblue: [176,196,222],
  lightyellow:  [255,255,224],
  lime: [0,255,0],
  limegreen:  [50,205,50],
  linen:  [250,240,230],
  magenta:  [255,0,255],
  maroon: [128,0,0],
  mediumaquamarine: [102,205,170],
  mediumblue: [0,0,205],
  mediumorchid: [186,85,211],
  mediumpurple: [147,112,219],
  mediumseagreen: [60,179,113],
  mediumslateblue:  [123,104,238],
  mediumspringgreen:  [0,250,154],
  mediumturquoise:  [72,209,204],
  mediumvioletred:  [199,21,133],
  midnightblue: [25,25,112],
  mintcream:  [245,255,250],
  mistyrose:  [255,228,225],
  moccasin: [255,228,181],
  navajowhite:  [255,222,173],
  navy: [0,0,128],
  oldlace:  [253,245,230],
  olive:  [128,128,0],
  olivedrab:  [107,142,35],
  orange: [255,165,0],
  orangered:  [255,69,0],
  orchid: [218,112,214],
  palegoldenrod:  [238,232,170],
  palegreen:  [152,251,152],
  paleturquoise:  [175,238,238],
  palevioletred:  [219,112,147],
  papayawhip: [255,239,213],
  peachpuff:  [255,218,185],
  peru: [205,133,63],
  pink: [255,192,203],
  plum: [221,160,221],
  powderblue: [176,224,230],
  purple: [128,0,128],
  rebeccapurple: [102, 51, 153],
  red:  [255,0,0],
  rosybrown:  [188,143,143],
  royalblue:  [65,105,225],
  saddlebrown:  [139,69,19],
  salmon: [250,128,114],
  sandybrown: [244,164,96],
  seagreen: [46,139,87],
  seashell: [255,245,238],
  sienna: [160,82,45],
  silver: [192,192,192],
  skyblue:  [135,206,235],
  slateblue:  [106,90,205],
  slategray:  [112,128,144],
  slategrey:  [112,128,144],
  snow: [255,250,250],
  springgreen:  [0,255,127],
  steelblue:  [70,130,180],
  tan:  [210,180,140],
  teal: [0,128,128],
  thistle:  [216,191,216],
  tomato: [255,99,71],
  turquoise:  [64,224,208],
  violet: [238,130,238],
  wheat:  [245,222,179],
  white:  [255,255,255],
  whitesmoke: [245,245,245],
  yellow: [255,255,0],
  yellowgreen:  [154,205,50]
};

var reverseKeywords = {};
for (var key in cssKeywords) {
  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
}

var convert = function() {
   return new Converter();
};

for (var func in conversions) {
  // export Raw versions
  convert[func + "Raw"] =  (function(func) {
    // accept array or plain args
    return function(arg) {
      if (typeof arg == "number")
        { arg = Array.prototype.slice.call(arguments); }
      return conversions[func](arg);
    }
  })(func);

  var pair = /(\w+)2(\w+)/.exec(func),
      from = pair[1],
      to = pair[2];

  // export rgb2hsl and ["rgb"]["hsl"]
  convert[from] = convert[from] || {};

  convert[from][to] = convert[func] = (function(func) { 
    return function(arg) {
      if (typeof arg == "number")
        { arg = Array.prototype.slice.call(arguments); }
      
      var val = conversions[func](arg);
      if (typeof val == "string" || val === undefined)
        { return val; } // keyword

      for (var i = 0; i < val.length; i++)
        { val[i] = Math.round(val[i]); }
      return val;
    }
  })(func);
}


/* Converter does lazy conversion and caching */
var Converter = function() {
   this.convs = {};
};

/* Either get the values for a space or
  set the values for a space, depending on args */
Converter.prototype.routeSpace = function(space, args) {
   var values = args[0];
   if (values === undefined) {
      // color.rgb()
      return this.getValues(space);
   }
   // color.rgb(10, 10, 10)
   if (typeof values == "number") {
      values = Array.prototype.slice.call(args);        
   }

   return this.setValues(space, values);
};
  
/* Set the values for a space, invalidating cache */
Converter.prototype.setValues = function(space, values) {
   this.space = space;
   this.convs = {};
   this.convs[space] = values;
   return this;
};

/* Get the values for a space. If there's already
  a conversion for the space, fetch it, otherwise
  compute it */
Converter.prototype.getValues = function(space) {
   var vals = this.convs[space];
   if (!vals) {
      var fspace = this.space,
          from = this.convs[fspace];
      vals = convert[fspace][space](from);

      this.convs[space] = vals;
   }
  return vals;
};

["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
   Converter.prototype[space] = function(vals) {
      return this.routeSpace(space, arguments);
   };
});

var colorConvert = convert;

var parseColor = function (cstr) {
    var m, conv, parts, alpha;
    if (m = /^((?:rgb|hs[lv]|cmyk|xyz|lab)a?)\s*\(([^\)]*)\)/.exec(cstr)) {
        var name = m[1];
        var base = name.replace(/a$/, '');
        var size = base === 'cmyk' ? 4 : 3;
        conv = colorConvert[base];
        
        parts = m[2].replace(/^\s+|\s+$/g, '')
            .split(/\s*,\s*/)
            .map(function (x, i) {
                if (/%$/.test(x) && i === size) {
                    return parseFloat(x) / 100;
                }
                else if (/%$/.test(x)) {
                    return parseFloat(x);
                }
                return parseFloat(x);
            })
        ;
        if (name === base) { parts.push(1); }
        alpha = parts[size] === undefined ? 1 : parts[size];
        parts = parts.slice(0, size);
        
        conv[base] = function () { return parts };
    }
    else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {
        var base = cstr.replace(/^#/,'');
        var size = base.length;
        conv = colorConvert.rgb;
        parts = base.split(size === 3 ? /(.)/ : /(..)/);
        parts = parts.filter(Boolean)
            .map(function (x) {
                if (size === 3) {
                    return parseInt(x + x, 16);
                }
                else {
                    return parseInt(x, 16)
                }
            })
        ;
        alpha = 1;
        conv.rgb = function () { return parts };
        if (!parts[0]) { parts[0] = 0; }
        if (!parts[1]) { parts[1] = 0; }
        if (!parts[2]) { parts[2] = 0; }
    }
    else {
        conv = colorConvert.keyword;
        conv.keyword = function () { return cstr };
        parts = cstr;
        alpha = 1;
    }
    
    var res = {
        rgb: undefined,
        hsl: undefined,
        hsv: undefined,
        cmyk: undefined,
        keyword: undefined,
        hex: undefined
    };
    try { res.rgb = conv.rgb(parts); } catch (e) {}
    try { res.hsl = conv.hsl(parts); } catch (e) {}
    try { res.hsv = conv.hsv(parts); } catch (e) {}
    try { res.cmyk = conv.cmyk(parts); } catch (e) {}
    try { res.keyword = conv.keyword(parts); } catch (e) {}
    
    if (res.rgb) { res.hex = '#' + res.rgb.map(function (x) {
        var s = x.toString(16);
        if (s.length === 1) { return '0' + s; }
        return s;
    }).join(''); }
    
    if (res.rgb) { res.rgba = res.rgb.concat(alpha); }
    if (res.hsl) { res.hsla = res.hsl.concat(alpha); }
    if (res.hsv) { res.hsva = res.hsv.concat(alpha); }
    if (res.cmyk) { res.cmyka = res.cmyk.concat(alpha); }
    
    return res;
};

var Config = {
  timestamp:             '2018-12-10T20:31:29.912Z',
  git_rev:               '7a2613e',
  export_schema_version: 0
};

var EffectConfigDialog = function EffectConfigDialog() {
  var this$1 = this;

  var okBtnClass = 'effect-config-dialog-ok';
  var cancelBtnClass = 'effect-config-dialog-cancel';
  var deleteBtnClass = 'effect-config-dialog-delete';
  var startTimeInputClass = 'effect-config-dialog-starttime';
  var endTimeInputClass = 'effect-config-dialog-endtime';
  var repetitionsInputClass = 'effect-config-dialog-repetitions';
  this.parentNode = document.getElementById('modal-container');
  this.element = parseHtml(("\n      <div class=\"effect-config-dialog-backdrop\">\n        <div class=\"effect-config-dialog\">\n          <label>\n            Begin: <input type=\"number\" min=\"0\" step=\"1\" class=\"" + startTimeInputClass + "\"/>ms\n          </label><br/>\n          <label>\n            End: <input type=\"number\" min=\"0\" step=\"1\" class=\"" + endTimeInputClass + "\"/>ms\n          </label><br/>\n          <label>\n            Repetitions: <input type=\"number\" class=\"" + repetitionsInputClass + "\"/>\n          </label><br/>\n          <button type=\"button\" class=\"" + okBtnClass + "\">Ok</button>\n          <button type=\"button\" class=\"" + cancelBtnClass + "\">Cancel</button>\n          <button type=\"button\" class=\"" + deleteBtnClass + "\">Delete effect</button>\n        </div>\n      </div>\n    "));
  this.okBtn = this.element.querySelector(("." + okBtnClass));
  this.cancelBtn = this.element.querySelector(("." + cancelBtnClass));
  this.deleteBtn = this.element.querySelector(("." + deleteBtnClass));
  this.dialog = this.element.querySelector('.effect-config-dialog');

  this.startTimeInput = this.element.querySelector(("." + startTimeInputClass));
  this.endTimeInput = this.element.querySelector(("." + endTimeInputClass));
  this.repetitionsInput = this.element.querySelector(("." + repetitionsInputClass));

  this.okBtn.addEventListener('click', function (evt) {
    evt.stopPropagation();
    this$1.hide();
    this$1.ui.getConfigAsync()
    .then(function (config) {
      this$1.resolve({
        config:    config,
        timeBegin: parseInt(this$1.startTimeInput.value, 10),
        timeEnd:   parseInt(this$1.endTimeInput.value, 10),
        repetitions: parseInt(this$1.repetitionsInput.value, 10),
      });
    });
  });
  this.cancelBtn.addEventListener('click', function (evt) {
    evt.stopPropagation();
    this$1.hide();
    this$1.reject(false);
  });
  this.deleteBtn.addEventListener('click', function (evt) {
    evt.stopPropagation();
    this$1.hide();
    this$1.reject(true);
  });
};

EffectConfigDialog.prototype.show = function show () {
  this.parentNode.appendChild(this.element);
};
EffectConfigDialog.prototype.hide = function hide () {
  this.dialog.removeChild(this.ui.getElement());
  this.parentNode.removeChild(this.element);
};
EffectConfigDialog.prototype.promptUser = function promptUser (entry) {
    var this$1 = this;

  return new Promise(function (res, rej) {
    this$1.resolve = res;
    this$1.reject = rej;
    var ui = entry.effect.getConfigUI();
    ui.applyConfig(entry.config);
    this$1.startTimeInput.value = entry.timeBegin;
    this$1.endTimeInput.value = entry.timeEnd;
    this$1.repetitionsInput.value = entry.repetitions;
    if (entry.effect.isEventOnly()) {
      this$1.endTimeInput.parentNode.style.display = 'none';
      this$1.repetitionsInput.parentNode.style.display = 'none';
    } else {
      this$1.endTimeInput.parentNode.style.display = 'inline';
      this$1.repetitionsInput.parentNode.style.display =entry.effect.supportsRepetition() ? 'inline' : 'none';
    }
    this$1.ui = ui;
    this$1.dialog.prepend(ui.getElement());
    this$1.show();
  });
};

/**
 * Interface for effects
 */
var Effect = function Effect () {};

Effect.register = function register (/* instance, props, uniforms, vertexShader, fragmentShader, attributes */) {
  throw new Error('Method not implemented');
};

Effect.registerAsync = function registerAsync (instance, props, uniforms, vertexShader, fragmentShader, attributes) {
  this.register(instance, props, uniforms, vertexShader, fragmentShader, attributes);
  return Promise.resolve();
};

Effect.getId = function getId () {
  // Static + this = JS <3
  return this.name;
};

Effect.getDisplayName = function getDisplayName () {
  throw new Error('Method not implemented');
};

Effect.getConfigUI = function getConfigUI () {
  throw new Error('Method not implemented');
};

Effect.getDefaultConfig = function getDefaultConfig () {
  throw new Error('Method not implemented');
};

Effect.getRandomConfig = function getRandomConfig () {
  throw new Error('Method not implemented');
};

Effect.getDescription = function getDescription () {
  throw new Error('Method not implemented');
};

Effect.supportsRepetition = function supportsRepetition () {
  return true;
};

Effect.isEventOnly = function isEventOnly () {
  return false;
};

/**
 * Interface for config UIs
 */
var ConfigUI = function ConfigUI () {};

ConfigUI.prototype.getElement = function getElement () {
  throw new Error('Method not implemented');
};
// eslint-disable-next-line class-methods-use-this
ConfigUI.prototype.getConfig = function getConfig () {
  throw new Error('Method not implemented');
};

ConfigUI.prototype.getConfigAsync = function getConfigAsync () {
    var this$1 = this;

  return new Promise(function (resolve) {
    resolve(this$1.getConfig());
  });
};

// eslint-disable-next-line class-methods-use-this
ConfigUI.prototype.applyConfig = function applyConfig (/* config */) {
  throw new Error('Method not implemented');
};

// eslint-disable-next-line class-methods-use-this
ConfigUI.prototype.notifyChange = function notifyChange () {
  // TODO
};

function fract(x) {
  return x - Math.floor(x);
}

var EffectName = 'Displace by hue';
var EffectDescription = 'Particles move into different directions depending on their hue';

var HueDisplaceConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function HueDisplaceConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName + "</legend>\n        <label>\n          Distance:\n          <input type=\"number\" class=\"effect-hue-displace-distance\" value=\"10\" />\n        </label><br/>\n        <label>\n          Scale by brightness:\n          <input type=\"number\" class=\"effect-hue-displace-scale-by-value\" value=\"0\" />%\n        </label><br/>\n        <label>\n          Random direction offset:\n          <input type=\"checkbox\" class=\"effect-hue-displace-random-direction-offset\"/>\n        </label><br/>\n        <label>\n          Rotate:\n          <input type=\"number\" class=\"effect-hue-displace-rotate\" value=\"0\" />%\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.distanceInput = ui.querySelector('input.effect-hue-displace-distance');
    this.scaleByValInput = ui.querySelector('input.effect-hue-displace-scale-by-value');
    this.randomOffsetInput = ui.querySelector('input.effect-hue-displace-random-direction-offset');
    this.rotateInput = ui.querySelector('input.effect-hue-displace-rotate');

    this.distanceInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.scaleByValInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.randomOffsetInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.rotateInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) HueDisplaceConfigUI.__proto__ = ConfigUI$$1;
  HueDisplaceConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  HueDisplaceConfigUI.prototype.constructor = HueDisplaceConfigUI;

  HueDisplaceConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  HueDisplaceConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.distance = parseInt(this.distanceInput.value, 10) / 100;
    config.scaleByValue = parseInt(this.scaleByValInput.value, 10) / 100;
    config.randomDirectionOffset = this.randomOffsetInput.checked;
    config.rotate = parseInt(this.rotateInput.value, 10) / 100;

    return config;
  };

  HueDisplaceConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.distanceInput.value = config.distance * 100;
    this.scaleByValInput.value = config.scaleByValue * 100;
    this.randomOffsetInput.checked = config.randomDirectionOffset;
    this.rotateInput.value = config.rotate * 100;
  };

  return HueDisplaceConfigUI;
}(ConfigUI));

var HueDisplaceEffect = /*@__PURE__*/(function (Effect$$1) {
  function HueDisplaceEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) HueDisplaceEffect.__proto__ = Effect$$1;
  HueDisplaceEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  HueDisplaceEffect.prototype.constructor = HueDisplaceEffect;

  HueDisplaceEffect.register = function register (instance, props, uniforms, vertexShader) {
    if (instance.config.distance !== 0) {
      var distance = uniforms.addUniform('hueDisplaceDistance', 'float', instance.config.distance);
      var time = uniforms.addUniform('hueDisplaceTime', 'float', function (ctx, props) { return ((props.clock.getTime() - instance.timeBegin) / instance.getPeriod()) * 2 * Math.PI; });
      var directionOffset = uniforms.addUniform('hueDisplaceDirectionOffset', 'float', function (ctx, props) {
        var result = instance.config.rotate *
          ((props.clock.getTime() - instance.timeBegin) / instance.getPeriod()) * 2 * Math.PI;
        if (instance.config.randomDirectionOffset) {
          if (instance.config.randomDirectionOffsetValue === undefined) {
            // eslint-disable-next-line no-param-reassign
            instance.config.randomDirectionOffsetValue = Math.random() * 2 * Math.PI;
          }
          result += instance.config.randomDirectionOffsetValue;
        }

        return result;
      });
      var scaleByVal = uniforms.addUniform('hueDisplaceScaleByValue', 'float', instance.config.scaleByValue);
      // eslint-disable-next-line no-param-reassign
      vertexShader.mainBody += "\n        float angle = hsv[0] + " + directionOffset + ";\n        float offset = (-cos(" + time + ") + 1.) / 2.;\n        position.xy += offset * getDirectionVector(angle) * " + distance + " * (1. - " + scaleByVal + " * (1. - hsv[2]));\n      ";
    }
  };

  HueDisplaceEffect.getDisplayName = function getDisplayName () {
    return EffectName;
  };

  HueDisplaceEffect.getDescription = function getDescription () {
    return EffectDescription;
  };

  HueDisplaceEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new HueDisplaceConfigUI();
    }

    return this._configUI;
  };

  HueDisplaceEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      distance:              0.1,
      scaleByValue:          0,
      randomDirectionOffset: false,
      rotate:                0
    };
  };

  HueDisplaceEffect.getRandomConfig = function getRandomConfig () {
    return {
      distance:              Math.random(),
      scaleByValue:          Math.random(),
      randomDirectionOffset: Math.random() > .5 ? true : false,
      rotate:                Math.random()
    };
  };

  return HueDisplaceEffect;
}(Effect));

var EffectName$1 = 'Converge to point';
var EffectDescription$1 = 'Particles are attracted towards the center of the screen';

var ConvergePointConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ConvergePointConfigUI() {
    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$1 + "</legend>\n      </fieldset>\n    "));
    var ui = this.element;

  }

  if ( ConfigUI$$1 ) ConvergePointConfigUI.__proto__ = ConfigUI$$1;
  ConvergePointConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ConvergePointConfigUI.prototype.constructor = ConvergePointConfigUI;

  ConvergePointConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ConvergePointConfigUI.prototype.getConfig = function getConfig () {
    var config = {};

    return config;
  };

  ConvergePointConfigUI.prototype.applyConfig = function applyConfig (config) {
  };

  return ConvergePointConfigUI;
}(ConfigUI));

var ConvergePointEffect = /*@__PURE__*/(function (Effect$$1) {
  function ConvergePointEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ConvergePointEffect.__proto__ = Effect$$1;
  ConvergePointEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ConvergePointEffect.prototype.constructor = ConvergePointEffect;

  ConvergePointEffect.register = function register (instance, props, uniforms, vertexShader) {
    var time = uniforms.addUniform('convergeTime', 'float', function (ctx, props) { return (props.clock.getTime() - instance.timeBegin) % instance.getPeriod(); });
    var speed = uniforms.addUniform('convergeSpeed', 'float', 2 * 2 / (instance.getPeriod() / 2 * instance.getPeriod() / 2));
    var maxTravelTime = uniforms.addUniform('convergeMaxTravelTime', 'float', instance.getPeriod() / 2);

    // eslint-disable-next-line no-param-reassign
    vertexShader.mainBody += "\n      {\n        vec2 screenTarget = vec2(0., 0.);\n        vec2 target = (screenTarget + vec2(1.)) / vec2(2.);\n\n        vec2 d = target - initialPosition.xy;\n        float d_len = length(d);\n\n        float stop_t = sqrt(2. * d_len / " + speed + ");\n\n        vec2 result;\n\n        if(" + time + " < stop_t) {\n          float t = min(" + time + ", stop_t);\n          result = .5 * d / d_len * " + speed + " * t * t;\n        } else if(" + time + " < " + maxTravelTime + ") {\n          result = d;\n        } else {\n          float t = " + time + " - " + maxTravelTime + ";\n          result = mix(d, vec2(0.), -cos(t / " + maxTravelTime + " * PI) * .5 + .5);\n        }\n\n        position.xy += result;\n      }\n    ";
  };

  ConvergePointEffect.getDisplayName = function getDisplayName () {
    return EffectName$1;
  };

  ConvergePointEffect.getDescription = function getDescription () {
    return EffectDescription$1;
  };

  ConvergePointEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ConvergePointConfigUI();
    }

    return this._configUI;
  };

  ConvergePointEffect.getDefaultConfig = function getDefaultConfig () {
    return {
    };
  };

  ConvergePointEffect.getRandomConfig = function getRandomConfig () {
    return {
    };
  };

  return ConvergePointEffect;
}(Effect));

var EffectName$2 = 'Converge to circle';
var EffectDescription$2 = 'Particles are attracted towards their position on an HSV color wheel centered around the center of the screen';

var ConvergeCircleConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ConvergeCircleConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$2 + "</legend>\n        <label>\n          Rotation speed:\n          <input type=\"number\" class=\"effect-converge-rotation-speed\" value=\"0\" />\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;

    this.rotationSpeedInput = ui.querySelector('input.effect-converge-rotation-speed');
    this.rotationSpeedInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) ConvergeCircleConfigUI.__proto__ = ConfigUI$$1;
  ConvergeCircleConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ConvergeCircleConfigUI.prototype.constructor = ConvergeCircleConfigUI;

  ConvergeCircleConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ConvergeCircleConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.rotationSpeed = parseInt(this.rotationSpeedInput.value, 10) / 100;

    return config;
  };

  ConvergeCircleConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.rotationSpeedInput.checked = config.rotationSpeed * 100;
  };

  return ConvergeCircleConfigUI;
}(ConfigUI));

var ConvergeCircleEffect = /*@__PURE__*/(function (Effect$$1) {
  function ConvergeCircleEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ConvergeCircleEffect.__proto__ = Effect$$1;
  ConvergeCircleEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ConvergeCircleEffect.prototype.constructor = ConvergeCircleEffect;

  ConvergeCircleEffect.register = function register (instance, props, uniforms, vertexShader) {
    var time = uniforms.addUniform('convergeTime', 'float', function (ctx, props) { return (props.clock.getTime() - instance.timeBegin) % instance.getPeriod(); });
    var speed = uniforms.addUniform('convergeSpeed', 'float', 2 * 2 / (instance.getPeriod() / 2 * instance.getPeriod() / 2));
    var rotationSpeed = uniforms.addUniform('convergeRotationSpeed', 'float', instance.config.rotationSpeed / 1000);
    var maxTravelTime = uniforms.addUniform('convergeMaxTravelTime', 'float', instance.getPeriod() / 2);

    // eslint-disable-next-line no-param-reassign
    vertexShader.mainBody += "\n      {\n        vec2 screenTarget = getDirectionVector(hsv[0] + " + time + " * " + rotationSpeed + ") * vec2(.8) * vec2(invScreenAspectRatio, 1.);\n        vec2 target = (screenTarget.xy + vec2(1.)) / vec2(2.);\n\n        vec2 d = target - initialPosition.xy;\n        float d_len = length(d);\n        \n        float stop_t = sqrt(2. * d_len / " + speed + ");\n\n        vec2 result;\n\n        if(" + time + " < stop_t) {\n          float t = min(" + time + ", stop_t);\n          result = .5 * d / d_len * " + speed + " * t * t;\n        } else if(" + time + " < " + maxTravelTime + ") {\n          result = d;\n        } else {\n          float t = " + time + " - " + maxTravelTime + ";\n          //result = mix(d, vec2(0.), 1. - (1.-t) * (1.-t));\n          //result = mix(d, vec2(0.), t * t);\n          result = mix(d, vec2(0.), -cos(t / " + maxTravelTime + " * PI) * .5 + .5);\n        }\n\n        position.xy += result;\n      }\n    ";
  };

  ConvergeCircleEffect.getDisplayName = function getDisplayName () {
    return EffectName$2;
  };

  ConvergeCircleEffect.getDescription = function getDescription () {
    return EffectDescription$2;
  };

  ConvergeCircleEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ConvergeCircleConfigUI();
    }

    return this._configUI;
  };

  ConvergeCircleEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      rotationSpeed: 0
    };
  };

  ConvergeCircleEffect.getRandomConfig = function getRandomConfig () {
    return {
      rotationSpeed: Math.random()
    }
  };

  return ConvergeCircleEffect;
}(Effect));

var EffectName$3 = 'Wave';
var EffectDescription$3 = 'A wave passes through the particles from left to right over the screen';

var WaveConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function WaveConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$3 + "</legend>\n        <label>\n          Number of waves:\n          <input type=\"number\" min=\"1\" step=\"1\" value=\"1\" class=\"effect-wave-count\" />\n        </label><br/>\n        <label>\n          Amplitude:\n          <input type=\"number\" value=\"0.05\" class=\"effect-wave-amplitude\" />\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;

    this.waveCountInput = ui.querySelector('input.effect-wave-count');
    this.waveCountInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.amplitudeInput = ui.querySelector('input.effect-wave-amplitude');
    this.amplitudeInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) WaveConfigUI.__proto__ = ConfigUI$$1;
  WaveConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  WaveConfigUI.prototype.constructor = WaveConfigUI;

  WaveConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  WaveConfigUI.prototype.getConfig = function getConfig () {
    var config = {};

    config.multiplier = parseInt(this.waveCountInput.value, 10);
    config.amplitude = parseFloat(this.amplitudeInput.value, 10);
    
    return config;
  };

  WaveConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.waveCountInput.value = config.multiplier;
    this.amplitudeInput.value = config.amplitude;
  };

  return WaveConfigUI;
}(ConfigUI));

var WaveEffect = /*@__PURE__*/(function (Effect$$1) {
  function WaveEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) WaveEffect.__proto__ = Effect$$1;
  WaveEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  WaveEffect.prototype.constructor = WaveEffect;

  WaveEffect.register = function register (instance, props, uniforms, vertexShader) {
    var time = uniforms.addUniform('time', 'float', function (ctx, props) { return fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod()); });
    var rep = uniforms.addUniform('repetition', 'int', function (ctx, props) { return Math.floor((props.clock.getTime() - instance.timeBegin) / instance.getPeriod()); });
    var multiplier = instance.config.multiplier;
    var amplitude = instance.config.amplitude;

    // goes from 0 (leftmost, begin) to 2 (leftmost, end)
    // but `reached` + `notOver` clamp it to 0 to 1
    var x = "(2. * " + time + " - initialPosition.x)";
    // Closed formula (with ease): (cos(​(x*​2-​1)*​π)+​1)/​2 * ​sin(​x*​3*​π-​0.5*​π)/​0.8
    var curve = function (x) { return ("(sin(" + x + " * float(" + multiplier + ") * 3. * PI - 0.5 * PI))"); };
    // The ease function is a cos spanning two negative peaks with a positive peak
    // in between. This is is then translated (+1, /2) to go from 0 to 1
    // Finally, because this will lower the actual peak height of `curve`
    // a compensation factor of 1.25 is applied
    var ease = "((cos((" + x + " * 2. - 1.) * PI) + 1.) * 0.5 * 1.25)";

    // eslint-disable-next-line no-param-reassign
    vertexShader.mainBody += "\n      {\n        float ease = 1.;\n        if (" + rep + " == 0 && " + x + " <= 0.5) {\n          ease = " + ease + ";\n        } else if (" + rep + " == " + (instance.repetitions) + " - 1 && " + x + " >= 0.5) {\n          ease = " + ease + ";\n        }\n        float curve = " + (curve(x)) + ";\n        float phase = ease * curve;\n        float reached = (" + x + " >= 0.) ? 1. : 0.;\n        if (" + rep + " != 0) {\n          reached = 1.;\n        }\n        float notOver = (" + x + " <= 1.) ? 1. : 0.;\n        if (" + rep + " != " + (instance.repetitions) + " - 1) {\n          notOver = 1.;\n        }\n\n        position.y += phase * reached * notOver * float(" + amplitude + ");\n      }\n    ";
  };

  WaveEffect.getDisplayName = function getDisplayName () {
    return EffectName$3;
  };

  WaveEffect.getDescription = function getDescription () {
    return EffectDescription$3;
  };

  WaveEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new WaveConfigUI();
    }

    return this._configUI;
  };

  WaveEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      multiplier: 1,
      amplitude: 0.05
    };
  };

  WaveEffect.getRandomConfig = function getRandomConfig () {
    return {
      multiplier: Math.random(),
      amplitude: Math.random()
    };
  };

  return WaveEffect;
}(Effect));

var NonFatalError = /*@__PURE__*/(function (Error) {
  function NonFatalError(msg, data) {
    Error.call(this);
    this.msg = msg;
    this.data = data;
  }

  if ( Error ) NonFatalError.__proto__ = Error;
  NonFatalError.prototype = Object.create( Error && Error.prototype );
  NonFatalError.prototype.constructor = NonFatalError;

  return NonFatalError;
}(Error));

var ErrorManager = function ErrorManager(onload) {
  var this$1 = this;

  try {
    window.onerror = function (event, script, line, col, err) {
      this$1.handleError(event, script, line, col, err);
    };
    onload();
  } catch (err) {
    this.handleError(err.message, 'main.bundle', -1, -1, err);
  }
};
ErrorManager.prototype.handleError = function handleError (msg, script, line, col, err) {
  console.log(err);
};



function reportError(error) {
  // assert that this doesn't get lost inside some promise
  window.setTimeout(function() { throw error; }, 0);
}

var EffectName$4 = 'Change Image';
var EffectDescription$4 = 'Changes the particle data to a configurable image (file or url)';

var States = {
  INVALID: 0,
  VALID: 1,
  LOADING: 2
};

var ChangeImageConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ChangeImageConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-change-image';
    this.element = parseHtml(("\n      <fieldset class=\"effect-change-image-config\">\n        <legend>" + EffectName$4 + "</legend>\n        <input type=\"radio\" name=\"effect-change-image-source-type\" value=\"file\" checked>\n          Upload own image\n        </input>\n        <input type=\"radio\" name=\"effect-change-image-source-type\" value=\"url\">\n          Load image from URL\n        </input>\n        <br/>\n        <label class=\"effect-change-image-file-tab\">\n          <input type=\"file\" accept=\"image/*\"/>\n        </label>\n        <label class=\"effect-change-image-url-tab\">\n          Enter image url\n          <input type=\"url\"/>\n        </label>\n        <br/>\n        " + (imageScalingMarkup(classPrefix)) + "\n        <img class=\"effect-change-image-preview\">\n      </fieldset>\n    "));
    var ui = this.element;
    this.scalingSelect = ui.querySelector(("select." + classPrefix + "-scaling-select"));
    this.scalingSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropXSelect = ui.querySelector(("select." + classPrefix + "-crop-x-select"));
    this.cropXSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropYSelect = ui.querySelector(("select." + classPrefix + "-crop-y-select"));
    this.cropYSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.radioButtons = ui.querySelectorAll('input[type="radio"][name="effect-change-image-source-type"]');
    this.fileInput = ui.querySelector('.effect-change-image-file-tab input[type="file"]');
    this.urlInput = ui.querySelector('.effect-change-image-url-tab input[type="url"]');
    this.previewImg = ui.querySelector('img.effect-change-image-preview');
    this.FR = new FileReader();
    this.state = States.INVALID;
    this.onload = null;

    this.fileInput.addEventListener('change', function (evt) {
      this$1.state = States.LOADING;
      var file = this$1.fileInput.files[0];
      if (file) {
        this$1.FR.onload = function () {
          this$1.previewImg.src = this$1.FR.result;
        };
        this$1.FR.onerror = function () {};
        this$1.FR.readAsDataURL(file);
      }
    });
    this.urlInput.addEventListener('input', function (evt) {
      this$1.state = States.LOADING;
      this$1.previewImg.src = this$1.urlInput.value;
    });
    this.previewImg.addEventListener('load', function () {
      this$1.state = States.VALID;
      if (this$1.onload !== null) {
        this$1.onload();
        this$1.onload = null;
      }
    });
    this.previewImg.addEventListener('error', function () {
      this$1.state = States.INVALID;
      if (this$1.onload !== null) {
        this$1.onload();
        this$1.onload = null;
      }
    });
  }

  if ( ConfigUI$$1 ) ChangeImageConfigUI.__proto__ = ConfigUI$$1;
  ChangeImageConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ChangeImageConfigUI.prototype.constructor = ChangeImageConfigUI;

  ChangeImageConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ChangeImageConfigUI.prototype.getConfigAsync = function getConfigAsync () {
    var this$1 = this;

    var sourceTy = [].find.call(this.radioButtons, function (btn) { return btn.checked; }).value;
    var imageScaling = this.scalingSelect.value;
    var imageCropping = {
      x: this.cropXSelect.value,
      y: this.cropYSelect.value
    };
    if (this.state === States.VALID) {
      return Promise.resolve({
        sourceTy: sourceTy,
        imageScaling: imageScaling,
        imageCropping: imageCropping,
        url: this.previewImg.src
      });
    } else if (this.state === States.INVALID) {
      return Promise.resolve({
        sourceTy: sourceTy,
        imageScaling: imageScaling,
        imageCropping: imageCropping,
        url: null
      });
    }
    return new Promise(function (res) {
      this$1.onload = function () { return this$1.getConfigAsync().then(res); };
    });
  };

  ChangeImageConfigUI.prototype.applyConfig = function applyConfig (config) {
    if (config.url === null || config.url === '#') {
      this.previewImg.src = '#'; // https://stackoverflow.com/a/13726621/1468532
      this.state = States.INVALID;
    } else {
      this.previewImg.src = config.url;
      this.state = States.VALID;
    }
    [].forEach.call(this.radioButtons, function (btn) {
      btn.checked = (btn.value === config.sourceTy);
    });
    this.scalingSelect.value = config.imageScaling || 'crop-to-viewport';
    var imageCropping = config.imageCropping || {x: 'crop-both', y: 'crop-both'};
    this.cropXSelect.value = imageCropping.x;
    this.cropYSelect.value = imageCropping.y;
  };

  return ChangeImageConfigUI;
}(ConfigUI));

var ChangeImageEffect = /*@__PURE__*/(function (Effect$$1) {
  function ChangeImageEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ChangeImageEffect.__proto__ = Effect$$1;
  ChangeImageEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ChangeImageEffect.prototype.constructor = ChangeImageEffect;

  ChangeImageEffect.registerAsync = function registerAsync (instance, props, uniforms, vertexShader) {
    return new Promise(function (res, rej) {
      var srcImage = document.createElement('img');
      srcImage.crossOrigin = 'Anonymous'; // http://stackoverflow.com/a/27840082/1468532
      srcImage.src = instance.config.url;
      srcImage.onload = function () {
        var particleData = props.state.createParticleDataFromDomImg(
          srcImage, instance.config.imageScaling, instance.config.imageCropping
        );
        var alive = true;
        var checkTime = function () {
          if (!alive) {
            return;
          }
          var tDist = props.clock.getTime() - instance.timeBegin;
          if (0 <= tDist && tDist <= props.clock.getDelta()) {
            props.state.setParticleData(particleData);
          }
          window.requestAnimationFrame(checkTime);
        };
        checkTime();
        props.state.addHook(function () {
          alive = false;
        });
        res();
      };
      srcImage.onerror = function (err) {
        rej(new NonFatalError(("Could not load image for " + EffectName$4), err));
      };
    });
  };

  ChangeImageEffect.getDisplayName = function getDisplayName () {
    return EffectName$4;
  };

  ChangeImageEffect.getDescription = function getDescription () {
    return EffectDescription$4;
  };

  ChangeImageEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ChangeImageConfigUI();
    }

    return this._configUI;
  };

  ChangeImageEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      sourceTy: 'file',
      url: '#',
      imageScaling: 'crop-to-viewport',
      imageCropping: {
        x: 'crop-both',
        y: 'crop-both'
      }
    };
  };

  ChangeImageEffect.getRandomConfig = function getRandomConfig () {
    return this.getDefaultConfig();
  };

  ChangeImageEffect.isEventOnly = function isEventOnly () {
    return true;
  };

  return ChangeImageEffect;
}(Effect));

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var flickrSdk = createCommonjsModule(function (module, exports) {
(function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a){ return a(o,!0); }if(i){ return i(o,!0); }var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND", f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++){ s(r[o]); }return s})({1:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

exports = module.exports = require('./services/rest');

// Services
exports.OAuth = require('./services/oauth');
exports.Feeds = require('./services/feeds');
exports.Upload = require('./services/upload');
exports.Replace = require('./services/replace');

},{"./services/feeds":75,"./services/oauth":76,"./services/replace":77,"./services/rest":78,"./services/upload":79}],2:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var request = require('superagent');
var parse = require('querystring').parse;

/**
 * Subclass superagent's Request class so that we can add
 * our own functionality to it.
 * @param {String} method
 * @param {String} url
 * @constructor
 */

function Request(method, url) {
	request.Request.call(this, method, url);

	// keep track of all request params for oauth signing
	this.params = {};
}

Request.prototype = Object.create(request.Request.prototype);

/**
 * Override .query() to also add query string params to our params hash.
 * @param {String|Object} val
 * @returns {this}
 */

Request.prototype.query = function (val) {
	if (typeof val === 'string') {
		Object.assign(this.params, parse(val));
	} else {
		Object.assign(this.params, val);
	}

	// super
	return request.Request.prototype.query.call(this, val);
};

/**
 * Override .field() to also add fields to our params hash.
 * @param {String|Object} key
 * @param {String} val
 * @returns {this}
 */

Request.prototype.field = function (key, val) {
	if (typeof key === 'string') {
		this.params[key] = val;
	} else {
		Object.assign(this.params, key);
	}

	// super
	return request.Request.prototype.field.call(this, key, val);
};

/**
 * Convenience method to either call .query() or .field()
 * based on this request's method.
 * @param {Object} obj
 * @returns {this}
 */

Request.prototype.param = function (obj) {
	switch (this.method) {
	case 'POST':
		return this.field.call(this, obj);
	default:
		return this.query.call(this, obj);
	}
};

/**
 * Mimic the request factory method that superagent exports.
 * @param {String} method
 * @param {String} url
 * @returns {Request}
 */

exports = module.exports = function (method, url) {
	// callback
	if ('function' === typeof url) {
		return new exports.Request('GET', method).end(url);
	}

	// url first
	if (1 === arguments.length) {
		return new exports.Request('GET', method);
	}

	return new exports.Request(method, url);
};

/**
 * Re-export all of the things superagent exports.
 */

Object.assign(exports, request);

/**
 * @module Request
 */

exports.Request = Request;

},{"querystring":14,"superagent":38}],3:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

/**
 * Asserts that any of the N keys passed in
 * are found in the obj
 * @param {Object} obj
 * @param {(String|String[])} keys
 * @throws {Error}
 */

module.exports = function (obj, keys) {
	var matches;

	if (!keys) {
		// you shouldn't be calling this function if you're
		// not providing keys, but we won't die if you do
		return;
	}

	obj = obj || {};

	if (typeof keys === 'string') {

		if (!obj.hasOwnProperty(keys)) {
			throw new Error('Missing required argument "' + keys + '"');
		}
	} else {

		matches = keys.filter(function (key) {
			return obj.hasOwnProperty(key);
		});

		if (matches.length === 0) {
			throw new Error('Missing required argument, you must provide one of the following: "' + keys.join('", "') + '"');
		}
	}

};

},{}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var base64 = require('base64-js');
var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  );
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length);
  buf.__proto__ = Buffer.prototype;
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}

Buffer.poolSize = 8192; // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
};

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
};

function allocUnsafe (size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
};

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);

  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype;
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len);
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
};

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) { return 0 }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) { return -1 }
  if (y < x) { return 1 }
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) { return 0 }

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) { return utf8ToBytes(string).length } // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) { encoding = 'utf8'; }

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length;
  if (length === 0) { return '' }
  if (arguments.length === 0) { return utf8Slice(this, 0, length) }
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) { throw new TypeError('Argument must be a Buffer') }
  if (this === b) { return true }
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) { str += ' ... '; }
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) { return 0 }

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) { return -1 }
  if (y < x) { return 1 }
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) { return -1 }

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) { byteOffset = buffer.length + byteOffset; }
  if (byteOffset >= buffer.length) {
    if (dir) { return -1 }
    else { byteOffset = buffer.length - 1; }
  } else if (byteOffset < 0) {
    if (dir) { byteOffset = 0; }
    else { return -1 }
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) { foundIndex = i; }
        if (i - foundIndex + 1 === valLength) { return foundIndex * indexSize }
      } else {
        if (foundIndex !== -1) { i -= i - foundIndex; }
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) { byteOffset = arrLength - valLength; }
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) { return i }
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) { throw new TypeError('Invalid hex string') }

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) { return i }
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) { encoding = 'utf8'; }
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) { length = remaining; }

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) { encoding = 'utf8'; }

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) { throw new TypeError('Unknown encoding: ' + encoding) }
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) { start = 0; }
  if (!end || end < 0 || end > len) { end = len; }

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) { start = 0; }
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) { end = 0; }
  } else if (end > len) {
    end = len;
  }

  if (end < start) { end = start; }

  var newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype;
  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) { throw new RangeError('offset is not uint') }
  if (offset + ext > length) { throw new RangeError('Trying to access beyond buffer length') }
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 1, this.length); }
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 2, this.length); }
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 2, this.length); }
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) { checkOffset(offset, byteLength, this.length); }

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) { val -= Math.pow(2, 8 * byteLength); }

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 1, this.length); }
  if (!(this[offset] & 0x80)) { return (this[offset]) }
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 2, this.length); }
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 2, this.length); }
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }
  return ieee754.read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 4, this.length); }
  return ieee754.read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 8, this.length); }
  return ieee754.read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) { checkOffset(offset, 8, this.length); }
  return ieee754.read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) { throw new TypeError('"buffer" argument must be a Buffer instance') }
  if (value > max || value < min) { throw new RangeError('"value" argument is out of bounds') }
  if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 1, 0xff, 0); }
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 2, 0xffff, 0); }
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
  this[offset + 3] = (value >>> 24);
  this[offset + 2] = (value >>> 16);
  this[offset + 1] = (value >>> 8);
  this[offset] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 4, 0xffffffff, 0); }
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 1, 0x7f, -0x80); }
  if (value < 0) { value = 0xff + value + 1; }
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 2, 0x7fff, -0x8000); }
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  this[offset + 2] = (value >>> 16);
  this[offset + 3] = (value >>> 24);
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) { checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000); }
  if (value < 0) { value = 0xffffffff + value + 1; }
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) { throw new RangeError('Index out of range') }
  if (offset < 0) { throw new RangeError('Index out of range') }
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) { start = 0; }
  if (!end && end !== 0) { end = this.length; }
  if (targetStart >= target.length) { targetStart = target.length; }
  if (!targetStart) { targetStart = 0; }
  if (end > 0 && end < start) { end = start; }

  // Copy 0 bytes; we're done
  if (end === start) { return 0 }
  if (target.length === 0 || this.length === 0) { return 0 }

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) { throw new RangeError('sourceStart out of bounds') }
  if (end < 0) { throw new RangeError('sourceEnd out of bounds') }

  // Are we oob?
  if (end > this.length) { end = this.length; }
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) { val = 0; }

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding);
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) { return '' }
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function toHex (n) {
  if (n < 16) { return '0' + n.toString(16) }
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) { bytes.push(0xEF, 0xBF, 0xBD); }
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) { break }
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) { break }
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) { break }
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) { break }
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) { break }

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) { break }
    dst[i + offset] = src[i];
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":6,"ieee754":7}],6:[function(require,module,exports){
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount (b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr((len * 3 / 4) - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup[tmp >> 10];
    output += lookup[(tmp >> 4) & 0x3F];
    output += lookup[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

},{}],7:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    { throw TypeError('n must be a positive number'); }
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    { this._events = {}; }

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    { return false; }

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      { listeners[i].apply(this, args); }
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    { throw TypeError('listener must be a function'); }

  if (!this._events)
    { this._events = {}; }

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    { this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener); }

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    { this._events[type] = listener; }
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    { this._events[type].push(listener); }
  else
    // Adding the second element, need to change to array.
    { this._events[type] = [this._events[type], listener]; }

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    { throw TypeError('listener must be a function'); }

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    { throw TypeError('listener must be a function'); }

  if (!this._events || !this._events[type])
    { return this; }

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      { this.emit('removeListener', type, listener); }

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      { return this; }

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      { this.emit('removeListener', type, listener); }
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    { return this; }

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      { this._events = {}; }
    else if (this._events[type])
      { delete this._events[type]; }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') { continue; }
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      { this.removeListener(type, listeners[listeners.length - 1]); }
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    { ret = []; }
  else if (isFunction(this._events[type]))
    { ret = [this._events[type]]; }
  else
    { ret = this._events[type].slice(); }
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      { return 1; }
    else if (evlistener)
      { return evlistener.length; }
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],9:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

},{}],10:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
};

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],11:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ());
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var arguments$1 = arguments;

    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments$1[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] };

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],12:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],13:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) { return ''; }
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) { return xs.map(f); }
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) { res.push(key); }
  }
  return res;
};

},{}],14:[function(require,module,exports){
exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":12,"./encode":13}],15:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":16}],16:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) { Duplex.prototype[method] = Writable.prototype[method]; }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) { return new Duplex(options); }

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) { this.readable = false; }

  if (options && options.writable === false) { this.writable = false; }

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) { this.allowHalfOpen = false; }

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) { return; }

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};


},{"./_stream_readable":18,"./_stream_writable":20,"core-util-is":24,"inherits":9,"process-nextick-args":26}],17:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) { return new PassThrough(options); }

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":19,"core-util-is":24,"inherits":9}],18:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) { emitter.on(event, fn); }else if (isArray(emitter._events[event])) { emitter._events[event].unshift(fn); }else { emitter._events[event] = [fn, emitter._events[event]]; }
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) { this.objectMode = this.objectMode || !!options.readableObjectMode; }

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) { StringDecoder = require('string_decoder/').StringDecoder; }
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) { return new Readable(options); }

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') { this._read = options.read; }

    if (typeof options.destroy === 'function') { this._destroy = options.destroy; }
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) { er = chunkInvalid(state, chunk); }
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) { stream.emit('error', new Error('stream.unshift() after end event')); }else { addChunk(stream, state, chunk, true); }
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) { addChunk(stream, state, chunk, false); }else { maybeReadMore(stream, state); }
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) { state.buffer.unshift(chunk); }else { state.buffer.push(chunk); }

    if (state.needReadable) { emitReadable(stream); }
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) { StringDecoder = require('string_decoder/').StringDecoder; }
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) { return 0; }
  if (state.objectMode) { return 1; }
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) { return state.buffer.head.data.length; }else { return state.length; }
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) { state.highWaterMark = computeNewHighWaterMark(n); }
  if (n <= state.length) { return n; }
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) { state.emittedReadable = false; }

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) { endReadable(this); }else { emitReadable(this); }
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) { endReadable(this); }
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) { state.needReadable = true; }
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) { n = howMuchToRead(nOrig, state); }
  }

  var ret;
  if (n > 0) { ret = fromList(n, state); }else { ret = null; }

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) { state.needReadable = true; }

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) { endReadable(this); }
  }

  if (ret !== null) { this.emit('data', ret); }

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) { return; }
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) { processNextTick(emitReadable_, stream); }else { emitReadable_(stream); }
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      { break; }else { len = state.length; }
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) { processNextTick(endFn); }else { src.once('end', endFn); }

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) { ondrain(); }
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) { dest.emit('error', er); }
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) { state.awaitDrain--; }
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) { return this; }

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) { return this; }

    if (!dest) { dest = state.pipes; }

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) { dest.emit('unpipe', this, unpipeInfo); }
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) { return this; }

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) { state.pipes = state.pipes[0]; }

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) { this.resume(); }
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) { stream.read(0); }
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) { self.push(chunk); }
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) { chunk = state.decoder.write(chunk); }

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) { return; }else if (!state.objectMode && (!chunk || !chunk.length)) { return; }

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) { return null; }

  var ret;
  if (state.objectMode) { ret = state.buffer.shift(); }else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) { ret = state.buffer.join(''); }else if (state.buffer.length === 1) { ret = state.buffer.head.data; }else { ret = state.buffer.concat(state.length); }
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) { ret += str; }else { ret += str.slice(0, n); }
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) { list.head = p.next; }else { list.head = list.tail = null; }
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) { throw new Error('"endReadable()" called on non-empty stream'); }

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) { return i; }
  }
  return -1;
}
}).call(this,require('_process'),typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./_stream_duplex":16,"./internal/streams/BufferList":21,"./internal/streams/destroy":22,"./internal/streams/stream":23,"_process":11,"core-util-is":24,"events":8,"inherits":9,"isarray":25,"process-nextick-args":26,"safe-buffer":27,"string_decoder/":34,"util":4}],19:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) { stream.push(data); }

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) { return new Transform(options); }

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') { this._transform = options.transform; }

    if (typeof options.flush === 'function') { this._flush = options.flush; }
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') { this._flush(function (er, data) {
      done(stream, er, data);
    }); }else { done(stream); }
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) { this._read(rs.highWaterMark); }
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) { return stream.emit('error', er); }

  if (data !== null && data !== undefined) { stream.push(data); }

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) { throw new Error('Calling transform done when ws.length != 0'); }

  if (ts.transforming) { throw new Error('Calling transform done when still transforming'); }

  return stream.push(null);
}
},{"./_stream_duplex":16,"core-util-is":24,"inherits":9}],20:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) { this.objectMode = this.objectMode || !!options.writableObjectMode; }

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) { return true; }

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') { this._write = options.write; }

    if (typeof options.writev === 'function') { this._writev = options.writev; }

    if (typeof options.destroy === 'function') { this._destroy = options.destroy; }

    if (typeof options.final === 'function') { this._final = options.final; }
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) { encoding = 'buffer'; }else if (!encoding) { encoding = state.defaultEncoding; }

  if (typeof cb !== 'function') { cb = nop; }

  if (state.ended) { writeAfterEnd(this, cb); }else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) { clearBuffer(this, state); }
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') { encoding = encoding.toLowerCase(); }
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) { throw new TypeError('Unknown encoding: ' + encoding); }
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) { state.needDrain = true; }

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) { stream._writev(chunk, state.onwrite); }else { stream._write(chunk, encoding, state.onwrite); }
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) { onwriteError(stream, state, sync, er, cb); }else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) { onwriteDrain(stream, state); }
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) { allBuffers = false; }
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) { state.lastBufferedRequest = null; }
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) { this.write(chunk, encoding); }

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) { endWritable(this, state, cb); }
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) { processNextTick(cb); }else { stream.once('finish', cb); }
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{"./_stream_duplex":16,"./internal/streams/destroy":22,"./internal/streams/stream":23,"_process":11,"core-util-is":24,"inherits":9,"process-nextick-args":26,"safe-buffer":27,"util-deprecate":28}],21:[function(require,module,exports){
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) { this.tail.next = entry; }else { this.head = entry; }
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) { this.tail = entry; }
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) { return; }
    var ret = this.head.data;
    if (this.length === 1) { this.head = this.tail = null; }else { this.head = this.head.next; }
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) { return ''; }
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) { return Buffer.alloc(0); }
    if (this.length === 1) { return this.head.data; }
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":27}],22:[function(require,module,exports){
var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":26}],23:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":8}],24:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../insert-module-globals/node_modules/is-buffer/index.js")});
},{"../../../../insert-module-globals/node_modules/is-buffer/index.js":10}],25:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],26:[function(require,module,exports){
(function (process){
if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  var arguments$1 = arguments;

  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments$1[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'));
},{"_process":11}],27:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer');
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
};

},{"buffer":5}],28:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) { return false; }
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) { return false; }
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
},{}],29:[function(require,module,exports){
module.exports = require('./readable').PassThrough;

},{"./readable":30}],30:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":16,"./lib/_stream_passthrough.js":17,"./lib/_stream_readable.js":18,"./lib/_stream_transform.js":19,"./lib/_stream_writable.js":20}],31:[function(require,module,exports){
module.exports = require('./readable').Transform;

},{"./readable":30}],32:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":20}],33:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) { return; }
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) { return; }
    didOnEnd = true;

    if (typeof dest.destroy === 'function') { dest.destroy(); }
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":8,"inherits":9,"readable-stream/duplex.js":15,"readable-stream/passthrough.js":29,"readable-stream/readable.js":30,"readable-stream/transform.js":31,"readable-stream/writable.js":32}],34:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) { return 'utf8'; }
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) { return; } // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) { throw new Error('Unknown encoding: ' + enc); }
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) { return ''; }
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) { return ''; }
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) { return r ? r + this.text(buf, i) : this.text(buf, i); }
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) { return 0; }else if (byte >> 5 === 0x06) { return 2; }else if (byte >> 4 === 0x0E) { return 3; }else if (byte >> 3 === 0x1E) { return 4; }
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) { return 0; }
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) { self.lastNeed = nb - 1; }
    return nb;
  }
  if (--j < i) { return 0; }
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) { self.lastNeed = nb - 2; }
    return nb;
  }
  if (--j < i) { return 0; }
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) { nb = 0; }else { self.lastNeed = nb - 3; }
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) { return r; }
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) { return buf.toString('utf8', i); }
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) { return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed); }
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) { return buf.toString('base64', i); }
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) { return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed); }
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":35}],35:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments);
},{"buffer":5,"dup":27}],36:[function(require,module,exports){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        { item._onTimeout(); }
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
},{"process/browser.js":11}],37:[function(require,module,exports){
function Agent() {
  this._defaults = [];
}

["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects",
 "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function(fn) {
  /** Default setting for all requests from this agent */
  Agent.prototype[fn] = function(/*varargs*/) {
    this._defaults.push({fn:fn, arguments:arguments});
    return this;
  };
});

Agent.prototype._setDefaults = function(req) {
    this._defaults.forEach(function(def) {
      req[def.fn].apply(req, def.arguments);
    });
};

module.exports = Agent;

},{}],38:[function(require,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = require('component-emitter');
var RequestBase = require('./request-base');
var isObject = require('./is-object');
var ResponseBase = require('./response-base');
var Agent = require('./agent-base');

/**
 * Noop.
 */

function noop(){}

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
};

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) { return obj; }
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

request.serializeObject = serialize;

/**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

request.serialize = {
  'application/x-www-form-urlencoded': serialize,
  'application/json': JSON.stringify,
};

/**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse,
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    if (index === -1) { // could be empty line, just skip it
      continue;
    }
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str) {
  var parse = request.parse[this.type];
  if (this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch(custom_err) {
      new_err = custom_err; // ok() callback can throw
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (1 === arguments.length) { pass = ''; }
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options
    options = pass;
    pass = '';
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    };
  }

  var encoder = function(string) {
    if ('function' === typeof btoa) {
      return btoa(string);
    }
    throw new Error('Cannot use basic auth, btoa is not a function');
  };

  return this._auth(user, pass, options, encoder);
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) { val = serialize(val); }
  if (val) { this._query.push(val); }
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  if (this._shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) { err.retries = this._retries - 1; }
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = (this.xhr = request.getXHR());
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status; } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) { return; }
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) { xhr.withCredentials = true; }

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) { data = serialize(data); }
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) { continue; }

    if (this.header.hasOwnProperty(field))
      { xhr.setRequestHeader(field, this.header[field]); }
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

request.agent = function() {
  return new Agent();
};

["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(method) {
  Agent.prototype[method.toLowerCase()] = function(url, fn) {
    var req = new request.Request(method, url);
    this._setDefaults(req);
    if (fn) {
      req.end(fn);
    }
    return req;
  };
});

Agent.prototype.del = Agent.prototype['delete'];

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn) {
  var req = request('GET', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.query(data); }
  if (fn) { req.end(fn); }
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn) {
  var req = request('HEAD', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.query(data); }
  if (fn) { req.end(fn); }
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn) {
  var req = request('OPTIONS', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.send(data); }
  if (fn) { req.end(fn); }
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn) {
  var req = request('DELETE', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.send(data); }
  if (fn) { req.end(fn); }
  return req;
}

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn) {
  var req = request('PATCH', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.send(data); }
  if (fn) { req.end(fn); }
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn) {
  var req = request('POST', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.send(data); }
  if (fn) { req.end(fn); }
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn) {
  var req = request('PUT', url);
  if ('function' == typeof data) { fn = data, data = null; }
  if (data) { req.send(data); }
  if (fn) { req.end(fn); }
  return req;
};

},{"./agent-base":37,"./is-object":39,"./request-base":40,"./response-base":41,"component-emitter":43}],39:[function(require,module,exports){
function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],40:[function(require,module,exports){
var isObject = require('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) { return mixin(obj); }
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count, fn){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) { count = 1; }
  if (count <= 0) { count = 0; }
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
RequestBase.prototype._shouldRetry = function(err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }
  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);
      if (override === true) { return true; }
      if (override === false) { return false; }
      // undefined falls back to defaults
    } catch(e) {
      console.error(e);
    }
  }
  if (res && res.status && res.status >= 500 && res.status != 501) { return true; }
  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) { return true; }
    // Superagent timeout
    if (err.timeout && err.code == 'ECONNABORTED') { return true; }
    if (err.crossDomain) { return true; }
  }
  return false;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {

  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
      self.end(function(err, res) {
        if (err) { innerReject(err); }
        else { innerResolve(res); }
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) { throw Error("Callback required"); }
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};

/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {
  // name should be either a string or an object.
  if (null === name || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
      break;
  }
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) { on = true; }
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */
RequestBase.prototype.maxResponseSize = function(n){
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }
  this._maxResponseSize = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function() {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header,
  };
};

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) { this.type('form'); }
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) { this.type('json'); }
  return this;
};

/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};

},{"./is-object":39}],41:[function(require,module,exports){
var utils = require('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) { return mixin(obj); }
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field) {
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) { this[key] = params[key]; }

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};

},{"./utils":42}],42:[function(require,module,exports){
exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) { obj[key] = val; }
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};

},{}],43:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) { return mixin(obj); }
}

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) { return this; }

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],44:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  exports.stripBOM = function(str) {
    if (str[0] === '\uFEFF') {
      return str.substring(1);
    } else {
      return str;
    }
  };

}).call(this);

},{}],45:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,
    hasProp = {}.hasOwnProperty;

  builder = require('xmlbuilder');

  defaults = require('./defaults').defaults;

  requiresCDATA = function(entry) {
    return typeof entry === "string" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);
  };

  wrapCDATA = function(entry) {
    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
  };

  escapeCDATA = function(entry) {
    return entry.replace(']]>', ']]]]><![CDATA[>');
  };

  exports.Builder = (function() {
    function Builder(opts) {
      var key, ref, value;
      this.options = {};
      ref = defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) { continue; }
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) { continue; }
        value = opts[key];
        this.options[key] = value;
      }
    }

    Builder.prototype.buildObject = function(rootObj) {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {
        rootName = Object.keys(rootObj)[0];
        rootObj = rootObj[rootName];
      } else {
        rootName = this.options.rootName;
      }
      render = (function(_this) {
        return function(element, obj) {
          var attr, child, entry, index, key, value;
          if (typeof obj !== 'object') {
            if (_this.options.cdata && requiresCDATA(obj)) {
              element.raw(wrapCDATA(obj));
            } else {
              element.txt(obj);
            }
          } else if (Array.isArray(obj)) {
            for (index in obj) {
              if (!hasProp.call(obj, index)) { continue; }
              child = obj[index];
              for (key in child) {
                entry = child[key];
                element = render(element.ele(key), entry).up();
              }
            }
          } else {
            for (key in obj) {
              if (!hasProp.call(obj, key)) { continue; }
              child = obj[key];
              if (key === attrkey) {
                if (typeof child === "object") {
                  for (attr in child) {
                    value = child[attr];
                    element = element.att(attr, value);
                  }
                }
              } else if (key === charkey) {
                if (_this.options.cdata && requiresCDATA(child)) {
                  element = element.raw(wrapCDATA(child));
                } else {
                  element = element.txt(child);
                }
              } else if (Array.isArray(child)) {
                for (index in child) {
                  if (!hasProp.call(child, index)) { continue; }
                  entry = child[index];
                  if (typeof entry === 'string') {
                    if (_this.options.cdata && requiresCDATA(entry)) {
                      element = element.ele(key).raw(wrapCDATA(entry)).up();
                    } else {
                      element = element.ele(key, entry).up();
                    }
                  } else {
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else if (typeof child === "object") {
                element = render(element.ele(key), child).up();
              } else {
                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                  element = element.ele(key).raw(wrapCDATA(child)).up();
                } else {
                  if (child == null) {
                    child = '';
                  }
                  element = element.ele(key, child.toString()).up();
                }
              }
            }
          }
          return element;
        };
      })(this);
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
        headless: this.options.headless,
        allowSurrogateChars: this.options.allowSurrogateChars
      });
      return render(rootElement, rootObj).end(this.options.renderOpts);
    };

    return Builder;

  })();

}).call(this);

},{"./defaults":46,"xmlbuilder":72}],46:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      includeWhiteChars: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      emptyTag: ''
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      preserveChildrenOrder: false,
      childkey: '$$',
      charsAsChildren: false,
      includeWhiteChars: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
      },
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      },
      headless: false,
      chunkSize: 10000,
      emptyTag: '',
      cdata: false
    }
  };

}).call(this);

},{}],47:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  sax = require('sax');

  events = require('events');

  bom = require('./bom');

  processors = require('./processors');

  setImmediate = require('timers').setImmediate;

  defaults = require('./defaults').defaults;

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  processItem = function(processors, item, key) {
    var i, len, process;
    for (i = 0, len = processors.length; i < len; i++) {
      process = processors[i];
      item = process(item, key);
    }
    return item;
  };

  exports.Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(opts) {
      this.parseString = bind(this.parseString, this);
      this.reset = bind(this.reset, this);
      this.assignOrPush = bind(this.assignOrPush, this);
      this.processAsync = bind(this.processAsync, this);
      var key, ref, value;
      if (!(this instanceof exports.Parser)) {
        return new exports.Parser(opts);
      }
      this.options = {};
      ref = defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) { continue; }
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) { continue; }
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      if (this.options.normalizeTags) {
        if (!this.options.tagNameProcessors) {
          this.options.tagNameProcessors = [];
        }
        this.options.tagNameProcessors.unshift(processors.normalize);
      }
      this.reset();
    }

    Parser.prototype.processAsync = function() {
      var chunk, err;
      try {
        if (this.remaining.length <= this.options.chunkSize) {
          chunk = this.remaining;
          this.remaining = '';
          this.saxParser = this.saxParser.write(chunk);
          return this.saxParser.close();
        } else {
          chunk = this.remaining.substr(0, this.options.chunkSize);
          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
          this.saxParser = this.saxParser.write(chunk);
          return setImmediate(this.processAsync);
        }
      } catch (error1) {
        err = error1;
        if (!this.saxParser.errThrown) {
          this.saxParser.errThrown = true;
          return this.emit(err);
        }
      }
    };

    Parser.prototype.assignOrPush = function(obj, key, newValue) {
      if (!(key in obj)) {
        if (!this.options.explicitArray) {
          return obj[key] = newValue;
        } else {
          return obj[key] = [newValue];
        }
      } else {
        if (!(obj[key] instanceof Array)) {
          obj[key] = [obj[key]];
        }
        return obj[key].push(newValue);
      }
    };

    Parser.prototype.reset = function() {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners();
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this) {
        return function(error) {
          _this.saxParser.resume();
          if (!_this.saxParser.errThrown) {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error);
          }
        };
      })(this);
      this.saxParser.onend = (function(_this) {
        return function() {
          if (!_this.saxParser.ended) {
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      this.saxParser.ended = false;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this) {
        return function(node) {
          var key, newValue, obj, processedKey, ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs) {
            ref = node.attributes;
            for (key in ref) {
              if (!hasProp.call(ref, key)) { continue; }
              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                obj[attrkey] = {};
              }
              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
              if (_this.options.mergeAttrs) {
                _this.assignOrPush(obj, processedKey, newValue);
              } else {
                obj[attrkey][processedKey] = newValue;
              }
            }
          }
          obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
          if (_this.options.xmlns) {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
            };
          }
          return stack.push(obj);
        };
      })(this);
      this.saxParser.onclosetag = (function(_this) {
        return function() {
          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
          obj = stack.pop();
          nodeName = obj["#name"];
          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
            delete obj["#name"];
          }
          if (obj.cdata === true) {
            cdata = obj.cdata;
            delete obj.cdata;
          }
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/) && !cdata) {
            emptyStr = obj[charkey];
            delete obj[charkey];
          } else {
            if (_this.options.trim) {
              obj[charkey] = obj[charkey].trim();
            }
            if (_this.options.normalize) {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
            }
            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
              obj = obj[charkey];
            }
          }
          if (isEmpty(obj)) {
            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
          }
          if (_this.options.validator != null) {
            xpath = "/" + ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = stack.length; i < len; i++) {
                node = stack[i];
                results.push(node["#name"]);
              }
              return results;
            })()).concat(nodeName).join("/");
            (function() {
              var err;
              try {
                return obj = _this.options.validator(xpath, s && s[nodeName], obj);
              } catch (error1) {
                err = error1;
                return _this.emit("error", err);
              }
            })();
          }
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
            if (!_this.options.preserveChildrenOrder) {
              node = {};
              if (_this.options.attrkey in obj) {
                node[_this.options.attrkey] = obj[_this.options.attrkey];
                delete obj[_this.options.attrkey];
              }
              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                node[_this.options.charkey] = obj[_this.options.charkey];
                delete obj[_this.options.charkey];
              }
              if (Object.getOwnPropertyNames(obj).length > 0) {
                node[_this.options.childkey] = obj;
              }
              obj = node;
            } else if (s) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              objClone = {};
              for (key in obj) {
                if (!hasProp.call(obj, key)) { continue; }
                objClone[key] = obj[key];
              }
              s[_this.options.childkey].push(objClone);
              delete obj["#name"];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
          }
          if (stack.length > 0) {
            return _this.assignOrPush(s, nodeName, obj);
          } else {
            if (_this.options.explicitRoot) {
              old = obj;
              obj = {};
              obj[nodeName] = old;
            }
            _this.resultObject = obj;
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      ontext = (function(_this) {
        return function(text) {
          var charChild, s;
          s = stack[stack.length - 1];
          if (s) {
            s[charkey] += text;
            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              charChild = {
                '#name': '__text__'
              };
              charChild[charkey] = text;
              if (_this.options.normalize) {
                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
              }
              s[_this.options.childkey].push(charChild);
            }
            return s;
          }
        };
      })(this);
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this) {
        return function(text) {
          var s;
          s = ontext(text);
          if (s) {
            return s.cdata = true;
          }
        };
      })(this);
    };

    Parser.prototype.parseString = function(str, cb) {
      var err;
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      try {
        str = str.toString();
        if (str.trim() === '') {
          this.emit("end", null);
          return true;
        }
        str = bom.stripBOM(str);
        if (this.options.async) {
          this.remaining = str;
          setImmediate(this.processAsync);
          return this.saxParser;
        }
        return this.saxParser.write(str).close();
      } catch (error1) {
        err = error1;
        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
          this.emit('error', err);
          return this.saxParser.errThrown = true;
        } else if (this.saxParser.ended) {
          throw err;
        }
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);

},{"./bom":44,"./defaults":46,"./processors":48,"events":8,"sax":50,"timers":36}],48:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  var prefixMatch;

  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

  exports.normalize = function(str) {
    return str.toLowerCase();
  };

  exports.firstCharLowerCase = function(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  };

  exports.stripPrefix = function(str) {
    return str.replace(prefixMatch, '');
  };

  exports.parseNumbers = function(str) {
    if (!isNaN(str)) {
      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
    }
    return str;
  };

  exports.parseBooleans = function(str) {
    if (/^(?:true|false)$/i.test(str)) {
      str = str.toLowerCase() === 'true';
    }
    return str;
  };

}).call(this);

},{}],49:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  var builder, defaults, parser, processors,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  defaults = require('./defaults');

  builder = require('./builder');

  parser = require('./parser');

  processors = require('./processors');

  exports.defaults = defaults.defaults;

  exports.processors = processors;

  exports.ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Builder = builder.Builder;

  exports.Parser = parser.Parser;

  exports.parseString = parser.parseString;

}).call(this);

},{"./builder":45,"./defaults":46,"./parser":47,"./processors":48}],50:[function(require,module,exports){
(function (Buffer){
(function (sax) { // wrapper for non-node envs
  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) };
  sax.SAXParser = SAXParser;
  sax.SAXStream = SAXStream;
  sax.createStream = createStream;

  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
  // since that's the earliest that a buffer overrun could occur.  This way, checks are
  // as rare as required, but as often as necessary to ensure never crossing this bound.
  // Furthermore, buffers are only tested at most once per write(), so passing a very
  // large string into write() might have undesirable effects, but this is manageable by
  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
  // edge case, result in creating at most one complete copy of the string passed in.
  // Set to Infinity to have unlimited buffers.
  sax.MAX_BUFFER_LENGTH = 64 * 1024;

  var buffers = [
    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
    'procInstName', 'procInstBody', 'entity', 'attribName',
    'attribValue', 'cdata', 'script'
  ];

  sax.EVENTS = [
    'text',
    'processinginstruction',
    'sgmldeclaration',
    'doctype',
    'comment',
    'opentagstart',
    'attribute',
    'opentag',
    'closetag',
    'opencdata',
    'cdata',
    'closecdata',
    'error',
    'end',
    'ready',
    'script',
    'opennamespace',
    'closenamespace'
  ];

  function SAXParser (strict, opt) {
    if (!(this instanceof SAXParser)) {
      return new SAXParser(strict, opt)
    }

    var parser = this;
    clearBuffers(parser);
    parser.q = parser.c = '';
    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
    parser.opt = opt || {};
    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
    parser.tags = [];
    parser.closed = parser.closedRoot = parser.sawRoot = false;
    parser.tag = parser.error = null;
    parser.strict = !!strict;
    parser.noscript = !!(strict || parser.opt.noscript);
    parser.state = S.BEGIN;
    parser.strictEntities = parser.opt.strictEntities;
    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
    parser.attribList = [];

    // namespaces form a prototype chain.
    // it always points at the current tag,
    // which protos to its parent tag.
    if (parser.opt.xmlns) {
      parser.ns = Object.create(rootNS);
    }

    // mostly just for error reporting
    parser.trackPosition = parser.opt.position !== false;
    if (parser.trackPosition) {
      parser.position = parser.line = parser.column = 0;
    }
    emit(parser, 'onready');
  }

  if (!Object.create) {
    Object.create = function (o) {
      function F () {}
      F.prototype = o;
      var newf = new F();
      return newf
    };
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = [];
      for (var i in o) { if (o.hasOwnProperty(i)) { a.push(i); } }
      return a
    };
  }

  function checkBufferLength (parser) {
    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
    var maxActual = 0;
    for (var i = 0, l = buffers.length; i < l; i++) {
      var len = parser[buffers[i]].length;
      if (len > maxAllowed) {
        // Text/cdata nodes can get big, and since they're buffered,
        // we can get here under normal conditions.
        // Avoid issues by emitting the text node now,
        // so at least it won't get any bigger.
        switch (buffers[i]) {
          case 'textNode':
            closeText(parser);
            break

          case 'cdata':
            emitNode(parser, 'oncdata', parser.cdata);
            parser.cdata = '';
            break

          case 'script':
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
            break

          default:
            error(parser, 'Max buffer length exceeded: ' + buffers[i]);
        }
      }
      maxActual = Math.max(maxActual, len);
    }
    // schedule the next check for the earliest possible buffer overrun.
    var m = sax.MAX_BUFFER_LENGTH - maxActual;
    parser.bufferCheckPosition = m + parser.position;
  }

  function clearBuffers (parser) {
    for (var i = 0, l = buffers.length; i < l; i++) {
      parser[buffers[i]] = '';
    }
  }

  function flushBuffers (parser) {
    closeText(parser);
    if (parser.cdata !== '') {
      emitNode(parser, 'oncdata', parser.cdata);
      parser.cdata = '';
    }
    if (parser.script !== '') {
      emitNode(parser, 'onscript', parser.script);
      parser.script = '';
    }
  }

  SAXParser.prototype = {
    end: function () { end(this); },
    write: write,
    resume: function () { this.error = null; return this },
    close: function () { return this.write(null) },
    flush: function () { flushBuffers(this); }
  };

  var Stream;
  try {
    Stream = require('stream').Stream;
  } catch (ex) {
    Stream = function () {};
  }

  var streamWraps = sax.EVENTS.filter(function (ev) {
    return ev !== 'error' && ev !== 'end'
  });

  function createStream (strict, opt) {
    return new SAXStream(strict, opt)
  }

  function SAXStream (strict, opt) {
    if (!(this instanceof SAXStream)) {
      return new SAXStream(strict, opt)
    }

    Stream.apply(this);

    this._parser = new SAXParser(strict, opt);
    this.writable = true;
    this.readable = true;

    var me = this;

    this._parser.onend = function () {
      me.emit('end');
    };

    this._parser.onerror = function (er) {
      me.emit('error', er);

      // if didn't throw, then means error was handled.
      // go ahead and clear error, so we can write again.
      me._parser.error = null;
    };

    this._decoder = null;

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, 'on' + ev, {
        get: function () {
          return me._parser['on' + ev]
        },
        set: function (h) {
          if (!h) {
            me.removeAllListeners(ev);
            me._parser['on' + ev] = h;
            return h
          }
          me.on(ev, h);
        },
        enumerable: true,
        configurable: false
      });
    });
  }

  SAXStream.prototype = Object.create(Stream.prototype, {
    constructor: {
      value: SAXStream
    }
  });

  SAXStream.prototype.write = function (data) {
    if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
      if (!this._decoder) {
        var SD = require('string_decoder').StringDecoder;
        this._decoder = new SD('utf8');
      }
      data = this._decoder.write(data);
    }

    this._parser.write(data.toString());
    this.emit('data', data);
    return true
  };

  SAXStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) {
      this.write(chunk);
    }
    this._parser.end();
    return true
  };

  SAXStream.prototype.on = function (ev, handler) {
    var me = this;
    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser['on' + ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
        args.splice(0, 0, ev);
        me.emit.apply(me, args);
      };
    }

    return Stream.prototype.on.call(me, ev, handler)
  };

  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  var CDATA = '[CDATA[';
  var DOCTYPE = 'DOCTYPE';
  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };

  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
  // This implementation works on strings, a single character at a time
  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
  // without a significant breaking change to either this  parser, or the
  // JavaScript language.  Implementation of an emoji-capable xml parser
  // is left as an exercise for the reader.
  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

  function isWhitespace (c) {
    return c === ' ' || c === '\n' || c === '\r' || c === '\t'
  }

  function isQuote (c) {
    return c === '"' || c === '\''
  }

  function isAttribEnd (c) {
    return c === '>' || isWhitespace(c)
  }

  function isMatch (regex, c) {
    return regex.test(c)
  }

  function notMatch (regex, c) {
    return !isMatch(regex, c)
  }

  var S = 0;
  sax.STATE = {
    BEGIN: S++, // leading byte order mark or whitespace
    BEGIN_WHITESPACE: S++, // leading whitespace
    TEXT: S++, // general stuff
    TEXT_ENTITY: S++, // &amp and such.
    OPEN_WAKA: S++, // <
    SGML_DECL: S++, // <!BLARG
    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
    DOCTYPE: S++, // <!DOCTYPE
    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
    COMMENT_STARTING: S++, // <!-
    COMMENT: S++, // <!--
    COMMENT_ENDING: S++, // <!-- blah -
    COMMENT_ENDED: S++, // <!-- blah --
    CDATA: S++, // <![CDATA[ something
    CDATA_ENDING: S++, // ]
    CDATA_ENDING_2: S++, // ]]
    PROC_INST: S++, // <?hi
    PROC_INST_BODY: S++, // <?hi there
    PROC_INST_ENDING: S++, // <?hi "there" ?
    OPEN_TAG: S++, // <strong
    OPEN_TAG_SLASH: S++, // <strong /
    ATTRIB: S++, // <a
    ATTRIB_NAME: S++, // <a foo
    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
    ATTRIB_VALUE: S++, // <a foo=
    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
    CLOSE_TAG: S++, // </a
    CLOSE_TAG_SAW_WHITE: S++, // </a   >
    SCRIPT: S++, // <script> ...
    SCRIPT_ENDING: S++ // <script> ... <
  };

  sax.XML_ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'"
  };

  sax.ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'",
    'AElig': 198,
    'Aacute': 193,
    'Acirc': 194,
    'Agrave': 192,
    'Aring': 197,
    'Atilde': 195,
    'Auml': 196,
    'Ccedil': 199,
    'ETH': 208,
    'Eacute': 201,
    'Ecirc': 202,
    'Egrave': 200,
    'Euml': 203,
    'Iacute': 205,
    'Icirc': 206,
    'Igrave': 204,
    'Iuml': 207,
    'Ntilde': 209,
    'Oacute': 211,
    'Ocirc': 212,
    'Ograve': 210,
    'Oslash': 216,
    'Otilde': 213,
    'Ouml': 214,
    'THORN': 222,
    'Uacute': 218,
    'Ucirc': 219,
    'Ugrave': 217,
    'Uuml': 220,
    'Yacute': 221,
    'aacute': 225,
    'acirc': 226,
    'aelig': 230,
    'agrave': 224,
    'aring': 229,
    'atilde': 227,
    'auml': 228,
    'ccedil': 231,
    'eacute': 233,
    'ecirc': 234,
    'egrave': 232,
    'eth': 240,
    'euml': 235,
    'iacute': 237,
    'icirc': 238,
    'igrave': 236,
    'iuml': 239,
    'ntilde': 241,
    'oacute': 243,
    'ocirc': 244,
    'ograve': 242,
    'oslash': 248,
    'otilde': 245,
    'ouml': 246,
    'szlig': 223,
    'thorn': 254,
    'uacute': 250,
    'ucirc': 251,
    'ugrave': 249,
    'uuml': 252,
    'yacute': 253,
    'yuml': 255,
    'copy': 169,
    'reg': 174,
    'nbsp': 160,
    'iexcl': 161,
    'cent': 162,
    'pound': 163,
    'curren': 164,
    'yen': 165,
    'brvbar': 166,
    'sect': 167,
    'uml': 168,
    'ordf': 170,
    'laquo': 171,
    'not': 172,
    'shy': 173,
    'macr': 175,
    'deg': 176,
    'plusmn': 177,
    'sup1': 185,
    'sup2': 178,
    'sup3': 179,
    'acute': 180,
    'micro': 181,
    'para': 182,
    'middot': 183,
    'cedil': 184,
    'ordm': 186,
    'raquo': 187,
    'frac14': 188,
    'frac12': 189,
    'frac34': 190,
    'iquest': 191,
    'times': 215,
    'divide': 247,
    'OElig': 338,
    'oelig': 339,
    'Scaron': 352,
    'scaron': 353,
    'Yuml': 376,
    'fnof': 402,
    'circ': 710,
    'tilde': 732,
    'Alpha': 913,
    'Beta': 914,
    'Gamma': 915,
    'Delta': 916,
    'Epsilon': 917,
    'Zeta': 918,
    'Eta': 919,
    'Theta': 920,
    'Iota': 921,
    'Kappa': 922,
    'Lambda': 923,
    'Mu': 924,
    'Nu': 925,
    'Xi': 926,
    'Omicron': 927,
    'Pi': 928,
    'Rho': 929,
    'Sigma': 931,
    'Tau': 932,
    'Upsilon': 933,
    'Phi': 934,
    'Chi': 935,
    'Psi': 936,
    'Omega': 937,
    'alpha': 945,
    'beta': 946,
    'gamma': 947,
    'delta': 948,
    'epsilon': 949,
    'zeta': 950,
    'eta': 951,
    'theta': 952,
    'iota': 953,
    'kappa': 954,
    'lambda': 955,
    'mu': 956,
    'nu': 957,
    'xi': 958,
    'omicron': 959,
    'pi': 960,
    'rho': 961,
    'sigmaf': 962,
    'sigma': 963,
    'tau': 964,
    'upsilon': 965,
    'phi': 966,
    'chi': 967,
    'psi': 968,
    'omega': 969,
    'thetasym': 977,
    'upsih': 978,
    'piv': 982,
    'ensp': 8194,
    'emsp': 8195,
    'thinsp': 8201,
    'zwnj': 8204,
    'zwj': 8205,
    'lrm': 8206,
    'rlm': 8207,
    'ndash': 8211,
    'mdash': 8212,
    'lsquo': 8216,
    'rsquo': 8217,
    'sbquo': 8218,
    'ldquo': 8220,
    'rdquo': 8221,
    'bdquo': 8222,
    'dagger': 8224,
    'Dagger': 8225,
    'bull': 8226,
    'hellip': 8230,
    'permil': 8240,
    'prime': 8242,
    'Prime': 8243,
    'lsaquo': 8249,
    'rsaquo': 8250,
    'oline': 8254,
    'frasl': 8260,
    'euro': 8364,
    'image': 8465,
    'weierp': 8472,
    'real': 8476,
    'trade': 8482,
    'alefsym': 8501,
    'larr': 8592,
    'uarr': 8593,
    'rarr': 8594,
    'darr': 8595,
    'harr': 8596,
    'crarr': 8629,
    'lArr': 8656,
    'uArr': 8657,
    'rArr': 8658,
    'dArr': 8659,
    'hArr': 8660,
    'forall': 8704,
    'part': 8706,
    'exist': 8707,
    'empty': 8709,
    'nabla': 8711,
    'isin': 8712,
    'notin': 8713,
    'ni': 8715,
    'prod': 8719,
    'sum': 8721,
    'minus': 8722,
    'lowast': 8727,
    'radic': 8730,
    'prop': 8733,
    'infin': 8734,
    'ang': 8736,
    'and': 8743,
    'or': 8744,
    'cap': 8745,
    'cup': 8746,
    'int': 8747,
    'there4': 8756,
    'sim': 8764,
    'cong': 8773,
    'asymp': 8776,
    'ne': 8800,
    'equiv': 8801,
    'le': 8804,
    'ge': 8805,
    'sub': 8834,
    'sup': 8835,
    'nsub': 8836,
    'sube': 8838,
    'supe': 8839,
    'oplus': 8853,
    'otimes': 8855,
    'perp': 8869,
    'sdot': 8901,
    'lceil': 8968,
    'rceil': 8969,
    'lfloor': 8970,
    'rfloor': 8971,
    'lang': 9001,
    'rang': 9002,
    'loz': 9674,
    'spades': 9824,
    'clubs': 9827,
    'hearts': 9829,
    'diams': 9830
  };

  Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key];
    var s = typeof e === 'number' ? String.fromCharCode(e) : e;
    sax.ENTITIES[key] = s;
  });

  for (var s in sax.STATE) {
    sax.STATE[sax.STATE[s]] = s;
  }

  // shorthand
  S = sax.STATE;

  function emit (parser, event, data) {
    parser[event] && parser[event](data);
  }

  function emitNode (parser, nodeType, data) {
    if (parser.textNode) { closeText(parser); }
    emit(parser, nodeType, data);
  }

  function closeText (parser) {
    parser.textNode = textopts(parser.opt, parser.textNode);
    if (parser.textNode) { emit(parser, 'ontext', parser.textNode); }
    parser.textNode = '';
  }

  function textopts (opt, text) {
    if (opt.trim) { text = text.trim(); }
    if (opt.normalize) { text = text.replace(/\s+/g, ' '); }
    return text
  }

  function error (parser, er) {
    closeText(parser);
    if (parser.trackPosition) {
      er += '\nLine: ' + parser.line +
        '\nColumn: ' + parser.column +
        '\nChar: ' + parser.c;
    }
    er = new Error(er);
    parser.error = er;
    emit(parser, 'onerror', er);
    return parser
  }

  function end (parser) {
    if (parser.sawRoot && !parser.closedRoot) { strictFail(parser, 'Unclosed root tag'); }
    if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT)) {
      error(parser, 'Unexpected end');
    }
    closeText(parser);
    parser.c = '';
    parser.closed = true;
    emit(parser, 'onend');
    SAXParser.call(parser, parser.strict, parser.opt);
    return parser
  }

  function strictFail (parser, message) {
    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
      throw new Error('bad call to strictFail')
    }
    if (parser.strict) {
      error(parser, message);
    }
  }

  function newTag (parser) {
    if (!parser.strict) { parser.tagName = parser.tagName[parser.looseCase](); }
    var parent = parser.tags[parser.tags.length - 1] || parser;
    var tag = parser.tag = { name: parser.tagName, attributes: {} };

    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
    if (parser.opt.xmlns) {
      tag.ns = parent.ns;
    }
    parser.attribList.length = 0;
    emitNode(parser, 'onopentagstart', tag);
  }

  function qname (name, attribute) {
    var i = name.indexOf(':');
    var qualName = i < 0 ? [ '', name ] : name.split(':');
    var prefix = qualName[0];
    var local = qualName[1];

    // <x "xmlns"="http://foo">
    if (attribute && name === 'xmlns') {
      prefix = 'xmlns';
      local = '';
    }

    return { prefix: prefix, local: local }
  }

  function attrib (parser) {
    if (!parser.strict) {
      parser.attribName = parser.attribName[parser.looseCase]();
    }

    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
      parser.attribName = parser.attribValue = '';
      return
    }

    if (parser.opt.xmlns) {
      var qn = qname(parser.attribName, true);
      var prefix = qn.prefix;
      var local = qn.local;

      if (prefix === 'xmlns') {
        // namespace binding attribute. push the binding into scope
        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
          strictFail(parser,
            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue);
        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
          strictFail(parser,
            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue);
        } else {
          var tag = parser.tag;
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns === parent.ns) {
            tag.ns = Object.create(parent.ns);
          }
          tag.ns[local] = parser.attribValue;
        }
      }

      // defer onattribute events until all attributes have been seen
      // so any new bindings can take effect. preserve attribute order
      // so deferred events can be emitted in document order
      parser.attribList.push([parser.attribName, parser.attribValue]);
    } else {
      // in non-xmlns mode, we can emit the event right away
      parser.tag.attributes[parser.attribName] = parser.attribValue;
      emitNode(parser, 'onattribute', {
        name: parser.attribName,
        value: parser.attribValue
      });
    }

    parser.attribName = parser.attribValue = '';
  }

  function openTag (parser, selfClosing) {
    if (parser.opt.xmlns) {
      // emit namespace binding events
      var tag = parser.tag;

      // add namespace info to tag
      var qn = qname(parser.tagName);
      tag.prefix = qn.prefix;
      tag.local = qn.local;
      tag.uri = tag.ns[qn.prefix] || '';

      if (tag.prefix && !tag.uri) {
        strictFail(parser, 'Unbound namespace prefix: ' +
          JSON.stringify(parser.tagName));
        tag.uri = qn.prefix;
      }

      var parent = parser.tags[parser.tags.length - 1] || parser;
      if (tag.ns && parent.ns !== tag.ns) {
        Object.keys(tag.ns).forEach(function (p) {
          emitNode(parser, 'onopennamespace', {
            prefix: p,
            uri: tag.ns[p]
          });
        });
      }

      // handle deferred onattribute events
      // Note: do not apply default ns to attributes:
      //   http://www.w3.org/TR/REC-xml-names/#defaulting
      for (var i = 0, l = parser.attribList.length; i < l; i++) {
        var nv = parser.attribList[i];
        var name = nv[0];
        var value = nv[1];
        var qualName = qname(name, true);
        var prefix = qualName.prefix;
        var local = qualName.local;
        var uri = prefix === '' ? '' : (tag.ns[prefix] || '');
        var a = {
          name: name,
          value: value,
          prefix: prefix,
          local: local,
          uri: uri
        };

        // if there's any attributes with an undefined namespace,
        // then fail on them now.
        if (prefix && prefix !== 'xmlns' && !uri) {
          strictFail(parser, 'Unbound namespace prefix: ' +
            JSON.stringify(prefix));
          a.uri = prefix;
        }
        parser.tag.attributes[name] = a;
        emitNode(parser, 'onattribute', a);
      }
      parser.attribList.length = 0;
    }

    parser.tag.isSelfClosing = !!selfClosing;

    // process the tag
    parser.sawRoot = true;
    parser.tags.push(parser.tag);
    emitNode(parser, 'onopentag', parser.tag);
    if (!selfClosing) {
      // special case for <script> in non-strict mode.
      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
        parser.state = S.SCRIPT;
      } else {
        parser.state = S.TEXT;
      }
      parser.tag = null;
      parser.tagName = '';
    }
    parser.attribName = parser.attribValue = '';
    parser.attribList.length = 0;
  }

  function closeTag (parser) {
    if (!parser.tagName) {
      strictFail(parser, 'Weird empty close tag.');
      parser.textNode += '</>';
      parser.state = S.TEXT;
      return
    }

    if (parser.script) {
      if (parser.tagName !== 'script') {
        parser.script += '</' + parser.tagName + '>';
        parser.tagName = '';
        parser.state = S.SCRIPT;
        return
      }
      emitNode(parser, 'onscript', parser.script);
      parser.script = '';
    }

    // first make sure that the closing tag actually exists.
    // <a><b></c></b></a> will close everything, otherwise.
    var t = parser.tags.length;
    var tagName = parser.tagName;
    if (!parser.strict) {
      tagName = tagName[parser.looseCase]();
    }
    var closeTo = tagName;
    while (t--) {
      var close = parser.tags[t];
      if (close.name !== closeTo) {
        // fail the first time in strict mode
        strictFail(parser, 'Unexpected close tag');
      } else {
        break
      }
    }

    // didn't find it.  we already failed for strict, so just abort.
    if (t < 0) {
      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
      parser.textNode += '</' + parser.tagName + '>';
      parser.state = S.TEXT;
      return
    }
    parser.tagName = tagName;
    var s = parser.tags.length;
    while (s-- > t) {
      var tag = parser.tag = parser.tags.pop();
      parser.tagName = parser.tag.name;
      emitNode(parser, 'onclosetag', parser.tagName);

      var x = {};
      for (var i in tag.ns) {
        x[i] = tag.ns[i];
      }

      var parent = parser.tags[parser.tags.length - 1] || parser;
      if (parser.opt.xmlns && tag.ns !== parent.ns) {
        // remove namespace bindings introduced by tag
        Object.keys(tag.ns).forEach(function (p) {
          var n = tag.ns[p];
          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
        });
      }
    }
    if (t === 0) { parser.closedRoot = true; }
    parser.tagName = parser.attribValue = parser.attribName = '';
    parser.attribList.length = 0;
    parser.state = S.TEXT;
  }

  function parseEntity (parser) {
    var entity = parser.entity;
    var entityLC = entity.toLowerCase();
    var num;
    var numStr = '';

    if (parser.ENTITIES[entity]) {
      return parser.ENTITIES[entity]
    }
    if (parser.ENTITIES[entityLC]) {
      return parser.ENTITIES[entityLC]
    }
    entity = entityLC;
    if (entity.charAt(0) === '#') {
      if (entity.charAt(1) === 'x') {
        entity = entity.slice(2);
        num = parseInt(entity, 16);
        numStr = num.toString(16);
      } else {
        entity = entity.slice(1);
        num = parseInt(entity, 10);
        numStr = num.toString(10);
      }
    }
    entity = entity.replace(/^0+/, '');
    if (isNaN(num) || numStr.toLowerCase() !== entity) {
      strictFail(parser, 'Invalid character entity');
      return '&' + parser.entity + ';'
    }

    return String.fromCodePoint(num)
  }

  function beginWhiteSpace (parser, c) {
    if (c === '<') {
      parser.state = S.OPEN_WAKA;
      parser.startTagPosition = parser.position;
    } else if (!isWhitespace(c)) {
      // have to process this as a text node.
      // weird, but happens.
      strictFail(parser, 'Non-whitespace before first tag.');
      parser.textNode = c;
      parser.state = S.TEXT;
    }
  }

  function charAt (chunk, i) {
    var result = '';
    if (i < chunk.length) {
      result = chunk.charAt(i);
    }
    return result
  }

  function write (chunk) {
    var parser = this;
    if (this.error) {
      throw this.error
    }
    if (parser.closed) {
      return error(parser,
        'Cannot write after close. Assign an onready handler.')
    }
    if (chunk === null) {
      return end(parser)
    }
    if (typeof chunk === 'object') {
      chunk = chunk.toString();
    }
    var i = 0;
    var c = '';
    while (true) {
      c = charAt(chunk, i++);
      parser.c = c;

      if (!c) {
        break
      }

      if (parser.trackPosition) {
        parser.position++;
        if (c === '\n') {
          parser.line++;
          parser.column = 0;
        } else {
          parser.column++;
        }
      }

      switch (parser.state) {
        case S.BEGIN:
          parser.state = S.BEGIN_WHITESPACE;
          if (c === '\uFEFF') {
            continue
          }
          beginWhiteSpace(parser, c);
          continue

        case S.BEGIN_WHITESPACE:
          beginWhiteSpace(parser, c);
          continue

        case S.TEXT:
          if (parser.sawRoot && !parser.closedRoot) {
            var starti = i - 1;
            while (c && c !== '<' && c !== '&') {
              c = charAt(chunk, i++);
              if (c && parser.trackPosition) {
                parser.position++;
                if (c === '\n') {
                  parser.line++;
                  parser.column = 0;
                } else {
                  parser.column++;
                }
              }
            }
            parser.textNode += chunk.substring(starti, i - 1);
          }
          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
            parser.state = S.OPEN_WAKA;
            parser.startTagPosition = parser.position;
          } else {
            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
              strictFail(parser, 'Text data outside of root node.');
            }
            if (c === '&') {
              parser.state = S.TEXT_ENTITY;
            } else {
              parser.textNode += c;
            }
          }
          continue

        case S.SCRIPT:
          // only non-strict
          if (c === '<') {
            parser.state = S.SCRIPT_ENDING;
          } else {
            parser.script += c;
          }
          continue

        case S.SCRIPT_ENDING:
          if (c === '/') {
            parser.state = S.CLOSE_TAG;
          } else {
            parser.script += '<' + c;
            parser.state = S.SCRIPT;
          }
          continue

        case S.OPEN_WAKA:
          // either a /, ?, !, or text is coming next.
          if (c === '!') {
            parser.state = S.SGML_DECL;
            parser.sgmlDecl = '';
          } else if (isWhitespace(c)) {
            // wait for it...
          } else if (isMatch(nameStart, c)) {
            parser.state = S.OPEN_TAG;
            parser.tagName = c;
          } else if (c === '/') {
            parser.state = S.CLOSE_TAG;
            parser.tagName = '';
          } else if (c === '?') {
            parser.state = S.PROC_INST;
            parser.procInstName = parser.procInstBody = '';
          } else {
            strictFail(parser, 'Unencoded <');
            // if there was some whitespace, then add that in.
            if (parser.startTagPosition + 1 < parser.position) {
              var pad = parser.position - parser.startTagPosition;
              c = new Array(pad).join(' ') + c;
            }
            parser.textNode += '<' + c;
            parser.state = S.TEXT;
          }
          continue

        case S.SGML_DECL:
          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
            emitNode(parser, 'onopencdata');
            parser.state = S.CDATA;
            parser.sgmlDecl = '';
            parser.cdata = '';
          } else if (parser.sgmlDecl + c === '--') {
            parser.state = S.COMMENT;
            parser.comment = '';
            parser.sgmlDecl = '';
          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
            parser.state = S.DOCTYPE;
            if (parser.doctype || parser.sawRoot) {
              strictFail(parser,
                'Inappropriately located doctype declaration');
            }
            parser.doctype = '';
            parser.sgmlDecl = '';
          } else if (c === '>') {
            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
            parser.sgmlDecl = '';
            parser.state = S.TEXT;
          } else if (isQuote(c)) {
            parser.state = S.SGML_DECL_QUOTED;
            parser.sgmlDecl += c;
          } else {
            parser.sgmlDecl += c;
          }
          continue

        case S.SGML_DECL_QUOTED:
          if (c === parser.q) {
            parser.state = S.SGML_DECL;
            parser.q = '';
          }
          parser.sgmlDecl += c;
          continue

        case S.DOCTYPE:
          if (c === '>') {
            parser.state = S.TEXT;
            emitNode(parser, 'ondoctype', parser.doctype);
            parser.doctype = true; // just remember that we saw it.
          } else {
            parser.doctype += c;
            if (c === '[') {
              parser.state = S.DOCTYPE_DTD;
            } else if (isQuote(c)) {
              parser.state = S.DOCTYPE_QUOTED;
              parser.q = c;
            }
          }
          continue

        case S.DOCTYPE_QUOTED:
          parser.doctype += c;
          if (c === parser.q) {
            parser.q = '';
            parser.state = S.DOCTYPE;
          }
          continue

        case S.DOCTYPE_DTD:
          parser.doctype += c;
          if (c === ']') {
            parser.state = S.DOCTYPE;
          } else if (isQuote(c)) {
            parser.state = S.DOCTYPE_DTD_QUOTED;
            parser.q = c;
          }
          continue

        case S.DOCTYPE_DTD_QUOTED:
          parser.doctype += c;
          if (c === parser.q) {
            parser.state = S.DOCTYPE_DTD;
            parser.q = '';
          }
          continue

        case S.COMMENT:
          if (c === '-') {
            parser.state = S.COMMENT_ENDING;
          } else {
            parser.comment += c;
          }
          continue

        case S.COMMENT_ENDING:
          if (c === '-') {
            parser.state = S.COMMENT_ENDED;
            parser.comment = textopts(parser.opt, parser.comment);
            if (parser.comment) {
              emitNode(parser, 'oncomment', parser.comment);
            }
            parser.comment = '';
          } else {
            parser.comment += '-' + c;
            parser.state = S.COMMENT;
          }
          continue

        case S.COMMENT_ENDED:
          if (c !== '>') {
            strictFail(parser, 'Malformed comment');
            // allow <!-- blah -- bloo --> in non-strict mode,
            // which is a comment of " blah -- bloo "
            parser.comment += '--' + c;
            parser.state = S.COMMENT;
          } else {
            parser.state = S.TEXT;
          }
          continue

        case S.CDATA:
          if (c === ']') {
            parser.state = S.CDATA_ENDING;
          } else {
            parser.cdata += c;
          }
          continue

        case S.CDATA_ENDING:
          if (c === ']') {
            parser.state = S.CDATA_ENDING_2;
          } else {
            parser.cdata += ']' + c;
            parser.state = S.CDATA;
          }
          continue

        case S.CDATA_ENDING_2:
          if (c === '>') {
            if (parser.cdata) {
              emitNode(parser, 'oncdata', parser.cdata);
            }
            emitNode(parser, 'onclosecdata');
            parser.cdata = '';
            parser.state = S.TEXT;
          } else if (c === ']') {
            parser.cdata += ']';
          } else {
            parser.cdata += ']]' + c;
            parser.state = S.CDATA;
          }
          continue

        case S.PROC_INST:
          if (c === '?') {
            parser.state = S.PROC_INST_ENDING;
          } else if (isWhitespace(c)) {
            parser.state = S.PROC_INST_BODY;
          } else {
            parser.procInstName += c;
          }
          continue

        case S.PROC_INST_BODY:
          if (!parser.procInstBody && isWhitespace(c)) {
            continue
          } else if (c === '?') {
            parser.state = S.PROC_INST_ENDING;
          } else {
            parser.procInstBody += c;
          }
          continue

        case S.PROC_INST_ENDING:
          if (c === '>') {
            emitNode(parser, 'onprocessinginstruction', {
              name: parser.procInstName,
              body: parser.procInstBody
            });
            parser.procInstName = parser.procInstBody = '';
            parser.state = S.TEXT;
          } else {
            parser.procInstBody += '?' + c;
            parser.state = S.PROC_INST_BODY;
          }
          continue

        case S.OPEN_TAG:
          if (isMatch(nameBody, c)) {
            parser.tagName += c;
          } else {
            newTag(parser);
            if (c === '>') {
              openTag(parser);
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH;
            } else {
              if (!isWhitespace(c)) {
                strictFail(parser, 'Invalid character in tag name');
              }
              parser.state = S.ATTRIB;
            }
          }
          continue

        case S.OPEN_TAG_SLASH:
          if (c === '>') {
            openTag(parser, true);
            closeTag(parser);
          } else {
            strictFail(parser, 'Forward-slash in opening tag not followed by >');
            parser.state = S.ATTRIB;
          }
          continue

        case S.ATTRIB:
          // haven't read the attribute name yet.
          if (isWhitespace(c)) {
            continue
          } else if (c === '>') {
            openTag(parser);
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH;
          } else if (isMatch(nameStart, c)) {
            parser.attribName = c;
            parser.attribValue = '';
            parser.state = S.ATTRIB_NAME;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue

        case S.ATTRIB_NAME:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE;
          } else if (c === '>') {
            strictFail(parser, 'Attribute without value');
            parser.attribValue = parser.attribName;
            attrib(parser);
            openTag(parser);
          } else if (isWhitespace(c)) {
            parser.state = S.ATTRIB_NAME_SAW_WHITE;
          } else if (isMatch(nameBody, c)) {
            parser.attribName += c;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue

        case S.ATTRIB_NAME_SAW_WHITE:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE;
          } else if (isWhitespace(c)) {
            continue
          } else {
            strictFail(parser, 'Attribute without value');
            parser.tag.attributes[parser.attribName] = '';
            parser.attribValue = '';
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: ''
            });
            parser.attribName = '';
            if (c === '>') {
              openTag(parser);
            } else if (isMatch(nameStart, c)) {
              parser.attribName = c;
              parser.state = S.ATTRIB_NAME;
            } else {
              strictFail(parser, 'Invalid attribute name');
              parser.state = S.ATTRIB;
            }
          }
          continue

        case S.ATTRIB_VALUE:
          if (isWhitespace(c)) {
            continue
          } else if (isQuote(c)) {
            parser.q = c;
            parser.state = S.ATTRIB_VALUE_QUOTED;
          } else {
            strictFail(parser, 'Unquoted attribute value');
            parser.state = S.ATTRIB_VALUE_UNQUOTED;
            parser.attribValue = c;
          }
          continue

        case S.ATTRIB_VALUE_QUOTED:
          if (c !== parser.q) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_Q;
            } else {
              parser.attribValue += c;
            }
            continue
          }
          attrib(parser);
          parser.q = '';
          parser.state = S.ATTRIB_VALUE_CLOSED;
          continue

        case S.ATTRIB_VALUE_CLOSED:
          if (isWhitespace(c)) {
            parser.state = S.ATTRIB;
          } else if (c === '>') {
            openTag(parser);
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH;
          } else if (isMatch(nameStart, c)) {
            strictFail(parser, 'No whitespace between attributes');
            parser.attribName = c;
            parser.attribValue = '';
            parser.state = S.ATTRIB_NAME;
          } else {
            strictFail(parser, 'Invalid attribute name');
          }
          continue

        case S.ATTRIB_VALUE_UNQUOTED:
          if (!isAttribEnd(c)) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_U;
            } else {
              parser.attribValue += c;
            }
            continue
          }
          attrib(parser);
          if (c === '>') {
            openTag(parser);
          } else {
            parser.state = S.ATTRIB;
          }
          continue

        case S.CLOSE_TAG:
          if (!parser.tagName) {
            if (isWhitespace(c)) {
              continue
            } else if (notMatch(nameStart, c)) {
              if (parser.script) {
                parser.script += '</' + c;
                parser.state = S.SCRIPT;
              } else {
                strictFail(parser, 'Invalid tagname in closing tag.');
              }
            } else {
              parser.tagName = c;
            }
          } else if (c === '>') {
            closeTag(parser);
          } else if (isMatch(nameBody, c)) {
            parser.tagName += c;
          } else if (parser.script) {
            parser.script += '</' + parser.tagName;
            parser.tagName = '';
            parser.state = S.SCRIPT;
          } else {
            if (!isWhitespace(c)) {
              strictFail(parser, 'Invalid tagname in closing tag');
            }
            parser.state = S.CLOSE_TAG_SAW_WHITE;
          }
          continue

        case S.CLOSE_TAG_SAW_WHITE:
          if (isWhitespace(c)) {
            continue
          }
          if (c === '>') {
            closeTag(parser);
          } else {
            strictFail(parser, 'Invalid characters in closing tag');
          }
          continue

        case S.TEXT_ENTITY:
        case S.ATTRIB_VALUE_ENTITY_Q:
        case S.ATTRIB_VALUE_ENTITY_U:
          var returnState;
          var buffer;
          switch (parser.state) {
            case S.TEXT_ENTITY:
              returnState = S.TEXT;
              buffer = 'textNode';
              break

            case S.ATTRIB_VALUE_ENTITY_Q:
              returnState = S.ATTRIB_VALUE_QUOTED;
              buffer = 'attribValue';
              break

            case S.ATTRIB_VALUE_ENTITY_U:
              returnState = S.ATTRIB_VALUE_UNQUOTED;
              buffer = 'attribValue';
              break
          }

          if (c === ';') {
            parser[buffer] += parseEntity(parser);
            parser.entity = '';
            parser.state = returnState;
          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
            parser.entity += c;
          } else {
            strictFail(parser, 'Invalid character in entity name');
            parser[buffer] += '&' + parser.entity + c;
            parser.entity = '';
            parser.state = returnState;
          }

          continue

        default:
          throw new Error(parser, 'Unknown state: ' + parser.state)
      }
    } // while

    if (parser.position >= parser.bufferCheckPosition) {
      checkBufferLength(parser);
    }
    return parser
  }

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  /* istanbul ignore next */
  if (!String.fromCodePoint) {
    (function () {
      var stringFromCharCode = String.fromCharCode;
      var floor = Math.floor;
      var fromCodePoint = function () {
        var arguments$1 = arguments;

        var MAX_SIZE = 0x4000;
        var codeUnits = [];
        var highSurrogate;
        var lowSurrogate;
        var index = -1;
        var length = arguments.length;
        if (!length) {
          return ''
        }
        var result = '';
        while (++index < length) {
          var codePoint = Number(arguments$1[index]);
          if (
            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
            codePoint < 0 || // not a valid Unicode code point
            codePoint > 0x10FFFF || // not a valid Unicode code point
            floor(codePoint) !== codePoint // not an integer
          ) {
            throw RangeError('Invalid code point: ' + codePoint)
          }
          if (codePoint <= 0xFFFF) { // BMP code point
            codeUnits.push(codePoint);
          } else { // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000;
            highSurrogate = (codePoint >> 10) + 0xD800;
            lowSurrogate = (codePoint % 0x400) + 0xDC00;
            codeUnits.push(highSurrogate, lowSurrogate);
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits);
            codeUnits.length = 0;
          }
        }
        return result
      };
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(String, 'fromCodePoint', {
          value: fromCodePoint,
          configurable: true,
          writable: true
        });
      } else {
        String.fromCodePoint = fromCodePoint;
      }
    }());
  }
})(typeof exports === 'undefined' ? this.sax = {} : exports);

}).call(this,require("buffer").Buffer);
},{"buffer":5,"stream":33,"string_decoder":34}],51:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var assign, isArray, isEmpty, isFunction, isObject, isPlainObject,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  assign = function() {
    var i, key, len, source, sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (isFunction(Object.assign)) {
      Object.assign.apply(null, arguments);
    } else {
      for (i = 0, len = sources.length; i < len; i++) {
        source = sources[i];
        if (source != null) {
          for (key in source) {
            if (!hasProp.call(source, key)) { continue; }
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };

  isFunction = function(val) {
    return !!val && Object.prototype.toString.call(val) === '[object Function]';
  };

  isObject = function(val) {
    var ref;
    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
  };

  isArray = function(val) {
    if (isFunction(Array.isArray)) {
      return Array.isArray(val);
    } else {
      return Object.prototype.toString.call(val) === '[object Array]';
    }
  };

  isEmpty = function(val) {
    var key;
    if (isArray(val)) {
      return !val.length;
    } else {
      for (key in val) {
        if (!hasProp.call(val, key)) { continue; }
        return false;
      }
      return true;
    }
  };

  isPlainObject = function(val) {
    var ctor, proto;
    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));
  };

  module.exports.assign = assign;

  module.exports.isFunction = isFunction;

  module.exports.isObject = isObject;

  module.exports.isArray = isArray;

  module.exports.isEmpty = isEmpty;

  module.exports.isPlainObject = isPlainObject;

}).call(this);

},{}],52:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute;

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.options = parent.options;
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return Object.create(this);
    };

    XMLAttribute.prototype.toString = function(options) {
      return this.options.writer.set(options).attribute(this);
    };

    return XMLAttribute;

  })();

}).call(this);

},{}],53:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return Object.create(this);
    };

    XMLCData.prototype.toString = function(options) {
      return this.options.writer.set(options).cdata(this);
    };

    return XMLCData;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],54:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLComment, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return Object.create(this);
    };

    XMLComment.prototype.toString = function(options) {
      return this.options.writer.set(options).comment(this);
    };

    return XMLComment;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],55:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDAttList, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLDTDAttList = (function(superClass) {
    extend(XMLDTDAttList, superClass);

    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      XMLDTDAttList.__super__.constructor.call(this, parent);
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdAttList(this);
    };

    return XMLDTDAttList;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],56:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDElement, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLDTDElement = (function(superClass) {
    extend(XMLDTDElement, superClass);

    function XMLDTDElement(parent, name, value) {
      XMLDTDElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdElement(this);
    };

    return XMLDTDElement;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],57:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDEntity, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = require('./Utility').isObject;

  XMLNode = require('./XMLNode');

  module.exports = XMLDTDEntity = (function(superClass) {
    extend(XMLDTDEntity, superClass);

    function XMLDTDEntity(parent, pe, name, value) {
      XMLDTDEntity.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdEntity(this);
    };

    return XMLDTDEntity;

  })(XMLNode);

}).call(this);

},{"./Utility":51,"./XMLNode":64}],58:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDNotation, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLDTDNotation = (function(superClass) {
    extend(XMLDTDNotation, superClass);

    function XMLDTDNotation(parent, name, value) {
      XMLDTDNotation.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options) {
      return this.options.writer.set(options).dtdNotation(this);
    };

    return XMLDTDNotation;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],59:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDeclaration, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = require('./Utility').isObject;

  XMLNode = require('./XMLNode');

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options) {
      return this.options.writer.set(options).declaration(this);
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);

},{"./Utility":51,"./XMLNode":64}],60:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isObject = require('./Utility').isObject;

  XMLNode = require('./XMLNode');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDNotation = require('./XMLDTDNotation');

  module.exports = XMLDocType = (function(superClass) {
    extend(XMLDocType, superClass);

    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      XMLDocType.__super__.constructor.call(this, parent);
      this.documentObject = parent;
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.toString = function(options) {
      return this.options.writer.set(options).docType(this);
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root() || this.documentObject;
    };

    return XMLDocType;

  })(XMLNode);

}).call(this);

},{"./Utility":51,"./XMLDTDAttList":55,"./XMLDTDElement":56,"./XMLDTDEntity":57,"./XMLDTDNotation":58,"./XMLNode":64}],61:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isPlainObject = require('./Utility').isPlainObject;

  XMLNode = require('./XMLNode');

  XMLStringifier = require('./XMLStringifier');

  XMLStringWriter = require('./XMLStringWriter');

  module.exports = XMLDocument = (function(superClass) {
    extend(XMLDocument, superClass);

    function XMLDocument(options) {
      XMLDocument.__super__.constructor.call(this, null);
      options || (options = {});
      if (!options.writer) {
        options.writer = new XMLStringWriter();
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      this.isDocument = true;
    }

    XMLDocument.prototype.end = function(writer) {
      var writerOptions;
      if (!writer) {
        writer = this.options.writer;
      } else if (isPlainObject(writer)) {
        writerOptions = writer;
        writer = this.options.writer.set(writerOptions);
      }
      return writer.document(this);
    };

    XMLDocument.prototype.toString = function(options) {
      return this.options.writer.set(options).document(this);
    };

    return XMLDocument;

  })(XMLNode);

}).call(this);

},{"./Utility":51,"./XMLNode":64,"./XMLStringWriter":68,"./XMLStringifier":69}],62:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref,
    hasProp = {}.hasOwnProperty;

  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;

  XMLElement = require('./XMLElement');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLRaw = require('./XMLRaw');

  XMLText = require('./XMLText');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLAttribute = require('./XMLAttribute');

  XMLStringifier = require('./XMLStringifier');

  XMLStringWriter = require('./XMLStringWriter');

  module.exports = XMLDocumentCB = (function() {
    function XMLDocumentCB(options, onData, onEnd) {
      var writerOptions;
      options || (options = {});
      if (!options.writer) {
        options.writer = new XMLStringWriter(options);
      } else if (isPlainObject(options.writer)) {
        writerOptions = options.writer;
        options.writer = new XMLStringWriter(writerOptions);
      }
      this.options = options;
      this.writer = options.writer;
      this.stringify = new XMLStringifier(options);
      this.onDataCallback = onData || function() {};
      this.onEndCallback = onEnd || function() {};
      this.currentNode = null;
      this.currentLevel = -1;
      this.openTags = {};
      this.documentStarted = false;
      this.documentCompleted = false;
      this.root = null;
    }

    XMLDocumentCB.prototype.node = function(name, attributes, text) {
      var ref1;
      if (name == null) {
        throw new Error("Missing node name");
      }
      if (this.root && this.currentLevel === -1) {
        throw new Error("Document can only have one root node");
      }
      this.openCurrent();
      name = name.valueOf();
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      this.currentNode = new XMLElement(this, name, attributes);
      this.currentNode.children = false;
      this.currentLevel++;
      this.openTags[this.currentLevel] = this.currentNode;
      if (text != null) {
        this.text(text);
      }
      return this;
    };

    XMLDocumentCB.prototype.element = function(name, attributes, text) {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.dtdElement.apply(this, arguments);
      } else {
        return this.node(name, attributes, text);
      }
    };

    XMLDocumentCB.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (!this.currentNode || this.currentNode.children) {
        throw new Error("att() can only be used immediately after an ele() call in callback mode");
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) { continue; }
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLDocumentCB.prototype.text = function(value) {
      var node;
      this.openCurrent();
      node = new XMLText(this, value);
      this.onData(this.writer.text(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.cdata = function(value) {
      var node;
      this.openCurrent();
      node = new XMLCData(this, value);
      this.onData(this.writer.cdata(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.comment = function(value) {
      var node;
      this.openCurrent();
      node = new XMLComment(this, value);
      this.onData(this.writer.comment(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.raw = function(value) {
      var node;
      this.openCurrent();
      node = new XMLRaw(this, value);
      this.onData(this.writer.raw(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, len, node;
      this.openCurrent();
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) { continue; }
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        node = new XMLProcessingInstruction(this, target, value);
        this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
      }
      return this;
    };

    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
      var node;
      this.openCurrent();
      if (this.documentStarted) {
        throw new Error("declaration() must be the first node");
      }
      node = new XMLDeclaration(this, version, encoding, standalone);
      this.onData(this.writer.declaration(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
      this.openCurrent();
      if (root == null) {
        throw new Error("Missing root node name");
      }
      if (this.root) {
        throw new Error("dtd() must come before the root node");
      }
      this.currentNode = new XMLDocType(this, pubID, sysID);
      this.currentNode.rootNodeName = root;
      this.currentNode.children = false;
      this.currentLevel++;
      this.openTags[this.currentLevel] = this.currentNode;
      return this;
    };

    XMLDocumentCB.prototype.dtdElement = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDElement(this, name, value);
      this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var node;
      this.openCurrent();
      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.entity = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDEntity(this, false, name, value);
      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.pEntity = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDEntity(this, true, name, value);
      this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.notation = function(name, value) {
      var node;
      this.openCurrent();
      node = new XMLDTDNotation(this, name, value);
      this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
      return this;
    };

    XMLDocumentCB.prototype.up = function() {
      if (this.currentLevel < 0) {
        throw new Error("The document node has no parent");
      }
      if (this.currentNode) {
        if (this.currentNode.children) {
          this.closeNode(this.currentNode);
        } else {
          this.openNode(this.currentNode);
        }
        this.currentNode = null;
      } else {
        this.closeNode(this.openTags[this.currentLevel]);
      }
      delete this.openTags[this.currentLevel];
      this.currentLevel--;
      return this;
    };

    XMLDocumentCB.prototype.end = function() {
      while (this.currentLevel >= 0) {
        this.up();
      }
      return this.onEnd();
    };

    XMLDocumentCB.prototype.openCurrent = function() {
      if (this.currentNode) {
        this.currentNode.children = true;
        return this.openNode(this.currentNode);
      }
    };

    XMLDocumentCB.prototype.openNode = function(node) {
      if (!node.isOpen) {
        if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
          this.root = node;
        }
        this.onData(this.writer.openNode(node, this.currentLevel));
        return node.isOpen = true;
      }
    };

    XMLDocumentCB.prototype.closeNode = function(node) {
      if (!node.isClosed) {
        this.onData(this.writer.closeNode(node, this.currentLevel));
        return node.isClosed = true;
      }
    };

    XMLDocumentCB.prototype.onData = function(chunk) {
      this.documentStarted = true;
      return this.onDataCallback(chunk);
    };

    XMLDocumentCB.prototype.onEnd = function() {
      this.documentCompleted = true;
      return this.onEndCallback();
    };

    XMLDocumentCB.prototype.ele = function() {
      return this.element.apply(this, arguments);
    };

    XMLDocumentCB.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLDocumentCB.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLDocumentCB.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocumentCB.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocumentCB.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
      return this.doctype(root, pubID, sysID);
    };

    XMLDocumentCB.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLDocumentCB.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLDocumentCB.prototype.t = function(value) {
      return this.text(value);
    };

    XMLDocumentCB.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLDocumentCB.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLDocumentCB.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLDocumentCB.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocumentCB.prototype.att = function() {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.attList.apply(this, arguments);
      } else {
        return this.attribute.apply(this, arguments);
      }
    };

    XMLDocumentCB.prototype.a = function() {
      if (this.currentNode && this.currentNode instanceof XMLDocType) {
        return this.attList.apply(this, arguments);
      } else {
        return this.attribute.apply(this, arguments);
      }
    };

    XMLDocumentCB.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocumentCB.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocumentCB.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    return XMLDocumentCB;

  })();

}).call(this);

},{"./Utility":51,"./XMLAttribute":52,"./XMLCData":53,"./XMLComment":54,"./XMLDTDAttList":55,"./XMLDTDElement":56,"./XMLDTDEntity":57,"./XMLDTDNotation":58,"./XMLDeclaration":59,"./XMLDocType":60,"./XMLElement":63,"./XMLProcessingInstruction":65,"./XMLRaw":66,"./XMLStringWriter":68,"./XMLStringifier":69,"./XMLText":70}],63:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction;

  XMLNode = require('./XMLNode');

  XMLAttribute = require('./XMLAttribute');

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
      if (parent.isDocument) {
        this.isRoot = true;
        this.documentObject = parent;
        parent.rootObject = this;
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, ref1;
      clonedSelf = Object.create(this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref1 = this.attributes;
      for (attName in ref1) {
        if (!hasProp.call(ref1, attName)) { continue; }
        att = ref1[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) { continue; }
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.toString = function(options) {
      return this.options.writer.set(options).element(this);
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);

},{"./Utility":51,"./XMLAttribute":52,"./XMLNode":64}],64:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref,
    hasProp = {}.hasOwnProperty;

  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  XMLProcessingInstruction = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      if (this.parent) {
        this.options = this.parent.options;
        this.stringify = this.parent.stringify;
      }
      this.children = [];
      if (!XMLElement) {
        XMLElement = require('./XMLElement');
        XMLCData = require('./XMLCData');
        XMLComment = require('./XMLComment');
        XMLDeclaration = require('./XMLDeclaration');
        XMLDocType = require('./XMLDocType');
        XMLRaw = require('./XMLRaw');
        XMLText = require('./XMLText');
        XMLProcessingInstruction = require('./XMLProcessingInstruction');
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) { continue; }
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref1;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref1;
      if (name != null) {
        name = name.valueOf();
      }
      attributes || (attributes = {});
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.commentBefore = function(value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.comment(value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.commentAfter = function(value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.comment(value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.instruction = function(target, value) {
      var insTarget, insValue, instruction, j, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (j = 0, len = target.length; j < len; j++) {
          insTarget = target[j];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) { continue; }
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.children.push(instruction);
      }
      return this;
    };

    XMLNode.prototype.instructionBefore = function(target, value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.instruction(target, value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.instructionAfter = function(target, value) {
      var child, i, removed;
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.instruction(target, value);
      Array.prototype.push.apply(this.parent.children, removed);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      if (doc.children[0] instanceof XMLDeclaration) {
        doc.children[0] = xmldec;
      } else {
        doc.children.unshift(xmldec);
      }
      return doc.root() || doc;
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      ref1 = doc.children;
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        child = ref1[i];
        if (child instanceof XMLDocType) {
          doc.children[i] = doctype;
          return doctype;
        }
      }
      ref2 = doc.children;
      for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
        child = ref2[i];
        if (child.isRoot) {
          doc.children.splice(i, 0, doctype);
          return doctype;
        }
      }
      doc.children.push(doctype);
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var node;
      node = this;
      while (node) {
        if (node.isDocument) {
          return node.rootObject;
        } else if (node.isRoot) {
          return node;
        } else {
          node = node.parent;
        }
      }
    };

    XMLNode.prototype.document = function() {
      var node;
      node = this;
      while (node) {
        if (node.isDocument) {
          return node;
        } else {
          node = node.parent;
        }
      }
    };

    XMLNode.prototype.end = function(options) {
      return this.document().end(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importDocument = function(doc) {
      var clonedRoot;
      clonedRoot = doc.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    XMLNode.prototype.importXMLBuilder = function(doc) {
      return this.importDocument(doc);
    };

    return XMLNode;

  })();

}).call(this);

},{"./Utility":51,"./XMLCData":53,"./XMLComment":54,"./XMLDeclaration":59,"./XMLDocType":60,"./XMLElement":63,"./XMLProcessingInstruction":65,"./XMLRaw":66,"./XMLText":70}],65:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLProcessingInstruction,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLProcessingInstruction = (function(superClass) {
    extend(XMLProcessingInstruction, superClass);

    function XMLProcessingInstruction(parent, target, value) {
      XMLProcessingInstruction.__super__.constructor.call(this, parent);
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return Object.create(this);
    };

    XMLProcessingInstruction.prototype.toString = function(options) {
      return this.options.writer.set(options).processingInstruction(this);
    };

    return XMLProcessingInstruction;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],66:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLRaw,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return Object.create(this);
    };

    XMLRaw.prototype.toString = function(options) {
      return this.options.writer.set(options).raw(this);
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],67:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLElement = require('./XMLElement');

  XMLRaw = require('./XMLRaw');

  XMLText = require('./XMLText');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLWriterBase = require('./XMLWriterBase');

  module.exports = XMLStreamWriter = (function(superClass) {
    extend(XMLStreamWriter, superClass);

    function XMLStreamWriter(stream, options) {
      this.stream = stream;
      XMLStreamWriter.__super__.constructor.call(this, options);
    }

    XMLStreamWriter.prototype.document = function(doc) {
      var child, i, j, len, len1, ref, ref1, results;
      ref = doc.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        child.isLastRootNode = false;
      }
      doc.children[doc.children.length - 1].isLastRootNode = true;
      ref1 = doc.children;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        child = ref1[j];
        switch (false) {
          case !(child instanceof XMLDeclaration):
            results.push(this.declaration(child));
            break;
          case !(child instanceof XMLDocType):
            results.push(this.docType(child));
            break;
          case !(child instanceof XMLComment):
            results.push(this.comment(child));
            break;
          case !(child instanceof XMLProcessingInstruction):
            results.push(this.processingInstruction(child));
            break;
          default:
            results.push(this.element(child));
        }
      }
      return results;
    };

    XMLStreamWriter.prototype.attribute = function(att) {
      return this.stream.write(' ' + att.name + '="' + att.value + '"');
    };

    XMLStreamWriter.prototype.cdata = function(node, level) {
      return this.stream.write(this.space(level) + '<![CDATA[' + node.text + ']]>' + this.endline(node));
    };

    XMLStreamWriter.prototype.comment = function(node, level) {
      return this.stream.write(this.space(level) + '<!-- ' + node.text + ' -->' + this.endline(node));
    };

    XMLStreamWriter.prototype.declaration = function(node, level) {
      this.stream.write(this.space(level));
      this.stream.write('<?xml version="' + node.version + '"');
      if (node.encoding != null) {
        this.stream.write(' encoding="' + node.encoding + '"');
      }
      if (node.standalone != null) {
        this.stream.write(' standalone="' + node.standalone + '"');
      }
      this.stream.write(this.spacebeforeslash + '?>');
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.docType = function(node, level) {
      var child, i, len, ref;
      level || (level = 0);
      this.stream.write(this.space(level));
      this.stream.write('<!DOCTYPE ' + node.root().name);
      if (node.pubID && node.sysID) {
        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
      } else if (node.sysID) {
        this.stream.write(' SYSTEM "' + node.sysID + '"');
      }
      if (node.children.length > 0) {
        this.stream.write(' [');
        this.stream.write(this.endline(node));
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          switch (false) {
            case !(child instanceof XMLDTDAttList):
              this.dtdAttList(child, level + 1);
              break;
            case !(child instanceof XMLDTDElement):
              this.dtdElement(child, level + 1);
              break;
            case !(child instanceof XMLDTDEntity):
              this.dtdEntity(child, level + 1);
              break;
            case !(child instanceof XMLDTDNotation):
              this.dtdNotation(child, level + 1);
              break;
            case !(child instanceof XMLCData):
              this.cdata(child, level + 1);
              break;
            case !(child instanceof XMLComment):
              this.comment(child, level + 1);
              break;
            case !(child instanceof XMLProcessingInstruction):
              this.processingInstruction(child, level + 1);
              break;
            default:
              throw new Error("Unknown DTD node type: " + child.constructor.name);
          }
        }
        this.stream.write(']');
      }
      this.stream.write(this.spacebeforeslash + '>');
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.element = function(node, level) {
      var att, child, i, len, name, ref, ref1, space;
      level || (level = 0);
      space = this.space(level);
      this.stream.write(space + '<' + node.name);
      ref = node.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) { continue; }
        att = ref[name];
        this.attribute(att);
      }
      if (node.children.length === 0 || node.children.every(function(e) {
        return e.value === '';
      })) {
        if (this.allowEmpty) {
          this.stream.write('></' + node.name + '>');
        } else {
          this.stream.write(this.spacebeforeslash + '/>');
        }
      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
        this.stream.write('>');
        this.stream.write(node.children[0].value);
        this.stream.write('</' + node.name + '>');
      } else {
        this.stream.write('>' + this.newline);
        ref1 = node.children;
        for (i = 0, len = ref1.length; i < len; i++) {
          child = ref1[i];
          switch (false) {
            case !(child instanceof XMLCData):
              this.cdata(child, level + 1);
              break;
            case !(child instanceof XMLComment):
              this.comment(child, level + 1);
              break;
            case !(child instanceof XMLElement):
              this.element(child, level + 1);
              break;
            case !(child instanceof XMLRaw):
              this.raw(child, level + 1);
              break;
            case !(child instanceof XMLText):
              this.text(child, level + 1);
              break;
            case !(child instanceof XMLProcessingInstruction):
              this.processingInstruction(child, level + 1);
              break;
            default:
              throw new Error("Unknown XML node type: " + child.constructor.name);
          }
        }
        this.stream.write(space + '</' + node.name + '>');
      }
      return this.stream.write(this.endline(node));
    };

    XMLStreamWriter.prototype.processingInstruction = function(node, level) {
      this.stream.write(this.space(level) + '<?' + node.target);
      if (node.value) {
        this.stream.write(' ' + node.value);
      }
      return this.stream.write(this.spacebeforeslash + '?>' + this.endline(node));
    };

    XMLStreamWriter.prototype.raw = function(node, level) {
      return this.stream.write(this.space(level) + node.value + this.endline(node));
    };

    XMLStreamWriter.prototype.text = function(node, level) {
      return this.stream.write(this.space(level) + node.value + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdAttList = function(node, level) {
      this.stream.write(this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType);
      if (node.defaultValueType !== '#DEFAULT') {
        this.stream.write(' ' + node.defaultValueType);
      }
      if (node.defaultValue) {
        this.stream.write(' "' + node.defaultValue + '"');
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdElement = function(node, level) {
      this.stream.write(this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value);
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdEntity = function(node, level) {
      this.stream.write(this.space(level) + '<!ENTITY');
      if (node.pe) {
        this.stream.write(' %');
      }
      this.stream.write(' ' + node.name);
      if (node.value) {
        this.stream.write(' "' + node.value + '"');
      } else {
        if (node.pubID && node.sysID) {
          this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
        } else if (node.sysID) {
          this.stream.write(' SYSTEM "' + node.sysID + '"');
        }
        if (node.nData) {
          this.stream.write(' NDATA ' + node.nData);
        }
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.dtdNotation = function(node, level) {
      this.stream.write(this.space(level) + '<!NOTATION ' + node.name);
      if (node.pubID && node.sysID) {
        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
      } else if (node.pubID) {
        this.stream.write(' PUBLIC "' + node.pubID + '"');
      } else if (node.sysID) {
        this.stream.write(' SYSTEM "' + node.sysID + '"');
      }
      return this.stream.write(this.spacebeforeslash + '>' + this.endline(node));
    };

    XMLStreamWriter.prototype.endline = function(node) {
      if (!node.isLastRootNode) {
        return this.newline;
      } else {
        return '';
      }
    };

    return XMLStreamWriter;

  })(XMLWriterBase);

}).call(this);

},{"./XMLCData":53,"./XMLComment":54,"./XMLDTDAttList":55,"./XMLDTDElement":56,"./XMLDTDEntity":57,"./XMLDTDNotation":58,"./XMLDeclaration":59,"./XMLDocType":60,"./XMLElement":63,"./XMLProcessingInstruction":65,"./XMLRaw":66,"./XMLText":70,"./XMLWriterBase":71}],68:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLElement = require('./XMLElement');

  XMLRaw = require('./XMLRaw');

  XMLText = require('./XMLText');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLWriterBase = require('./XMLWriterBase');

  module.exports = XMLStringWriter = (function(superClass) {
    extend(XMLStringWriter, superClass);

    function XMLStringWriter(options) {
      XMLStringWriter.__super__.constructor.call(this, options);
    }

    XMLStringWriter.prototype.document = function(doc) {
      var child, i, len, r, ref;
      this.textispresent = false;
      r = '';
      ref = doc.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        r += (function() {
          switch (false) {
            case !(child instanceof XMLDeclaration):
              return this.declaration(child);
            case !(child instanceof XMLDocType):
              return this.docType(child);
            case !(child instanceof XMLComment):
              return this.comment(child);
            case !(child instanceof XMLProcessingInstruction):
              return this.processingInstruction(child);
            default:
              return this.element(child, 0);
          }
        }).call(this);
      }
      if (this.pretty && r.slice(-this.newline.length) === this.newline) {
        r = r.slice(0, -this.newline.length);
      }
      return r;
    };

    XMLStringWriter.prototype.attribute = function(att) {
      return ' ' + att.name + '="' + att.value + '"';
    };

    XMLStringWriter.prototype.cdata = function(node, level) {
      return this.space(level) + '<![CDATA[' + node.text + ']]>' + this.newline;
    };

    XMLStringWriter.prototype.comment = function(node, level) {
      return this.space(level) + '<!-- ' + node.text + ' -->' + this.newline;
    };

    XMLStringWriter.prototype.declaration = function(node, level) {
      var r;
      r = this.space(level);
      r += '<?xml version="' + node.version + '"';
      if (node.encoding != null) {
        r += ' encoding="' + node.encoding + '"';
      }
      if (node.standalone != null) {
        r += ' standalone="' + node.standalone + '"';
      }
      r += this.spacebeforeslash + '?>';
      r += this.newline;
      return r;
    };

    XMLStringWriter.prototype.docType = function(node, level) {
      var child, i, len, r, ref;
      level || (level = 0);
      r = this.space(level);
      r += '<!DOCTYPE ' + node.root().name;
      if (node.pubID && node.sysID) {
        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
      } else if (node.sysID) {
        r += ' SYSTEM "' + node.sysID + '"';
      }
      if (node.children.length > 0) {
        r += ' [';
        r += this.newline;
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          r += (function() {
            switch (false) {
              case !(child instanceof XMLDTDAttList):
                return this.dtdAttList(child, level + 1);
              case !(child instanceof XMLDTDElement):
                return this.dtdElement(child, level + 1);
              case !(child instanceof XMLDTDEntity):
                return this.dtdEntity(child, level + 1);
              case !(child instanceof XMLDTDNotation):
                return this.dtdNotation(child, level + 1);
              case !(child instanceof XMLCData):
                return this.cdata(child, level + 1);
              case !(child instanceof XMLComment):
                return this.comment(child, level + 1);
              case !(child instanceof XMLProcessingInstruction):
                return this.processingInstruction(child, level + 1);
              default:
                throw new Error("Unknown DTD node type: " + child.constructor.name);
            }
          }).call(this);
        }
        r += ']';
      }
      r += this.spacebeforeslash + '>';
      r += this.newline;
      return r;
    };

    XMLStringWriter.prototype.element = function(node, level) {
      var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;
      level || (level = 0);
      textispresentwasset = false;
      if (this.textispresent) {
        this.newline = '';
        this.pretty = false;
      } else {
        this.newline = this.newlinedefault;
        this.pretty = this.prettydefault;
      }
      space = this.space(level);
      r = '';
      r += space + '<' + node.name;
      ref = node.attributes;
      for (name in ref) {
        if (!hasProp.call(ref, name)) { continue; }
        att = ref[name];
        r += this.attribute(att);
      }
      if (node.children.length === 0 || node.children.every(function(e) {
        return e.value === '';
      })) {
        if (this.allowEmpty) {
          r += '></' + node.name + '>' + this.newline;
        } else {
          r += this.spacebeforeslash + '/>' + this.newline;
        }
      } else if (this.pretty && node.children.length === 1 && (node.children[0].value != null)) {
        r += '>';
        r += node.children[0].value;
        r += '</' + node.name + '>' + this.newline;
      } else {
        if (this.dontprettytextnodes) {
          ref1 = node.children;
          for (i = 0, len = ref1.length; i < len; i++) {
            child = ref1[i];
            if (child.value != null) {
              this.textispresent++;
              textispresentwasset = true;
              break;
            }
          }
        }
        if (this.textispresent) {
          this.newline = '';
          this.pretty = false;
          space = this.space(level);
        }
        r += '>' + this.newline;
        ref2 = node.children;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          child = ref2[j];
          r += (function() {
            switch (false) {
              case !(child instanceof XMLCData):
                return this.cdata(child, level + 1);
              case !(child instanceof XMLComment):
                return this.comment(child, level + 1);
              case !(child instanceof XMLElement):
                return this.element(child, level + 1);
              case !(child instanceof XMLRaw):
                return this.raw(child, level + 1);
              case !(child instanceof XMLText):
                return this.text(child, level + 1);
              case !(child instanceof XMLProcessingInstruction):
                return this.processingInstruction(child, level + 1);
              default:
                throw new Error("Unknown XML node type: " + child.constructor.name);
            }
          }).call(this);
        }
        if (textispresentwasset) {
          this.textispresent--;
        }
        if (!this.textispresent) {
          this.newline = this.newlinedefault;
          this.pretty = this.prettydefault;
        }
        r += space + '</' + node.name + '>' + this.newline;
      }
      return r;
    };

    XMLStringWriter.prototype.processingInstruction = function(node, level) {
      var r;
      r = this.space(level) + '<?' + node.target;
      if (node.value) {
        r += ' ' + node.value;
      }
      r += this.spacebeforeslash + '?>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.raw = function(node, level) {
      return this.space(level) + node.value + this.newline;
    };

    XMLStringWriter.prototype.text = function(node, level) {
      return this.space(level) + node.value + this.newline;
    };

    XMLStringWriter.prototype.dtdAttList = function(node, level) {
      var r;
      r = this.space(level) + '<!ATTLIST ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
      if (node.defaultValueType !== '#DEFAULT') {
        r += ' ' + node.defaultValueType;
      }
      if (node.defaultValue) {
        r += ' "' + node.defaultValue + '"';
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.dtdElement = function(node, level) {
      return this.space(level) + '<!ELEMENT ' + node.name + ' ' + node.value + this.spacebeforeslash + '>' + this.newline;
    };

    XMLStringWriter.prototype.dtdEntity = function(node, level) {
      var r;
      r = this.space(level) + '<!ENTITY';
      if (node.pe) {
        r += ' %';
      }
      r += ' ' + node.name;
      if (node.value) {
        r += ' "' + node.value + '"';
      } else {
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        if (node.nData) {
          r += ' NDATA ' + node.nData;
        }
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.dtdNotation = function(node, level) {
      var r;
      r = this.space(level) + '<!NOTATION ' + node.name;
      if (node.pubID && node.sysID) {
        r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
      } else if (node.pubID) {
        r += ' PUBLIC "' + node.pubID + '"';
      } else if (node.sysID) {
        r += ' SYSTEM "' + node.sysID + '"';
      }
      r += this.spacebeforeslash + '>' + this.newline;
      return r;
    };

    XMLStringWriter.prototype.openNode = function(node, level) {
      var att, name, r, ref;
      level || (level = 0);
      if (node instanceof XMLElement) {
        r = this.space(level) + '<' + node.name;
        ref = node.attributes;
        for (name in ref) {
          if (!hasProp.call(ref, name)) { continue; }
          att = ref[name];
          r += this.attribute(att);
        }
        r += (node.children ? '>' : '/>') + this.newline;
        return r;
      } else {
        r = this.space(level) + '<!DOCTYPE ' + node.rootNodeName;
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        r += (node.children ? ' [' : '>') + this.newline;
        return r;
      }
    };

    XMLStringWriter.prototype.closeNode = function(node, level) {
      level || (level = 0);
      switch (false) {
        case !(node instanceof XMLElement):
          return this.space(level) + '</' + node.name + '>' + this.newline;
        case !(node instanceof XMLDocType):
          return this.space(level) + ']>' + this.newline;
      }
    };

    return XMLStringWriter;

  })(XMLWriterBase);

}).call(this);

},{"./XMLCData":53,"./XMLComment":54,"./XMLDTDAttList":55,"./XMLDTDElement":56,"./XMLDTDEntity":57,"./XMLDTDNotation":58,"./XMLDeclaration":59,"./XMLDocType":60,"./XMLElement":63,"./XMLProcessingInstruction":65,"./XMLRaw":66,"./XMLText":70,"./XMLWriterBase":71}],69:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      options || (options = {});
      this.noDoubleEncoding = options.noDoubleEncoding;
      ref = options.stringify || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) { continue; }
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      val = val.replace(']]>', ']]]]><![CDATA[>');
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return val = '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var res;
      res = str.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
      if (res) {
        throw new Error("Invalid character in string: " + str + " at index " + res.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
    };

    return XMLStringifier;

  })();

}).call(this);

},{}],70:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLNode, XMLText,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) { child[key] = parent[key]; } } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return Object.create(this);
    };

    XMLText.prototype.toString = function(options) {
      return this.options.writer.set(options).text(this);
    };

    return XMLText;

  })(XMLNode);

}).call(this);

},{"./XMLNode":64}],71:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLWriterBase,
    hasProp = {}.hasOwnProperty;

  module.exports = XMLWriterBase = (function() {
    function XMLWriterBase(options) {
      var key, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
      options || (options = {});
      this.pretty = options.pretty || false;
      this.allowEmpty = (ref = options.allowEmpty) != null ? ref : false;
      if (this.pretty) {
        this.indent = (ref1 = options.indent) != null ? ref1 : '  ';
        this.newline = (ref2 = options.newline) != null ? ref2 : '\n';
        this.offset = (ref3 = options.offset) != null ? ref3 : 0;
        this.dontprettytextnodes = (ref4 = options.dontprettytextnodes) != null ? ref4 : 0;
      } else {
        this.indent = '';
        this.newline = '';
        this.offset = 0;
        this.dontprettytextnodes = 0;
      }
      this.spacebeforeslash = (ref5 = options.spacebeforeslash) != null ? ref5 : '';
      if (this.spacebeforeslash === true) {
        this.spacebeforeslash = ' ';
      }
      this.newlinedefault = this.newline;
      this.prettydefault = this.pretty;
      ref6 = options.writer || {};
      for (key in ref6) {
        if (!hasProp.call(ref6, key)) { continue; }
        value = ref6[key];
        this[key] = value;
      }
    }

    XMLWriterBase.prototype.set = function(options) {
      var key, ref, value;
      options || (options = {});
      if ("pretty" in options) {
        this.pretty = options.pretty;
      }
      if ("allowEmpty" in options) {
        this.allowEmpty = options.allowEmpty;
      }
      if (this.pretty) {
        this.indent = "indent" in options ? options.indent : '  ';
        this.newline = "newline" in options ? options.newline : '\n';
        this.offset = "offset" in options ? options.offset : 0;
        this.dontprettytextnodes = "dontprettytextnodes" in options ? options.dontprettytextnodes : 0;
      } else {
        this.indent = '';
        this.newline = '';
        this.offset = 0;
        this.dontprettytextnodes = 0;
      }
      this.spacebeforeslash = "spacebeforeslash" in options ? options.spacebeforeslash : '';
      if (this.spacebeforeslash === true) {
        this.spacebeforeslash = ' ';
      }
      this.newlinedefault = this.newline;
      this.prettydefault = this.pretty;
      ref = options.writer || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) { continue; }
        value = ref[key];
        this[key] = value;
      }
      return this;
    };

    XMLWriterBase.prototype.space = function(level) {
      var indent;
      if (this.pretty) {
        indent = (level || 0) + this.offset + 1;
        if (indent > 0) {
          return new Array(indent).join(this.indent);
        } else {
          return '';
        }
      } else {
        return '';
      }
    };

    return XMLWriterBase;

  })();

}).call(this);

},{}],72:[function(require,module,exports){
// Generated by CoffeeScript 1.12.6
(function() {
  var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;

  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;

  XMLDocument = require('./XMLDocument');

  XMLDocumentCB = require('./XMLDocumentCB');

  XMLStringWriter = require('./XMLStringWriter');

  XMLStreamWriter = require('./XMLStreamWriter');

  module.exports.create = function(name, xmldec, doctype, options) {
    var doc, root;
    if (name == null) {
      throw new Error("Root element needs a name");
    }
    options = assign({}, xmldec, doctype, options);
    doc = new XMLDocument(options);
    root = doc.element(name);
    if (!options.headless) {
      doc.declaration(options);
      if ((options.pubID != null) || (options.sysID != null)) {
        doc.doctype(options);
      }
    }
    return root;
  };

  module.exports.begin = function(options, onData, onEnd) {
    var ref1;
    if (isFunction(options)) {
      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
      options = {};
    }
    if (onData) {
      return new XMLDocumentCB(options, onData, onEnd);
    } else {
      return new XMLDocument(options);
    }
  };

  module.exports.stringWriter = function(options) {
    return new XMLStringWriter(options);
  };

  module.exports.streamWriter = function(stream, options) {
    return new XMLStreamWriter(stream, options);
  };

}).call(this);

},{"./Utility":51,"./XMLDocument":61,"./XMLDocumentCB":62,"./XMLStreamWriter":67,"./XMLStringWriter":68}],73:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

/**
 * Custom response parser routine to handle Flickr API-style
 * error responses. The Flickr API has a whole bunch of client
 * error codes, but they all come back as HTTP 200 responses.
 * Here, we add in additional logic to accommodate this and check
 * for a Flickr API error. If we find one, craft a new error
 * out of that and throw it.
 * @param {Response} res
 * @returns {Boolean}
 * @throws {Error}
 */

function parseFlickr(res) {
	var body = res.body;
	var err;

	if (body && body.stat === 'fail') {
		err = new Error(body.message);
		err.stat = body.stat;
		err.code = body.code;

		throw err;
	}

	return res.status >= 200 && res.status < 300;
}

/**
 * Superagent plugin-style function to request and parse
 * JSON responses from the Flickr REST API. We need to
 * specify content-type: text/plain here to appease CORS
 * since the API does not accept application/json.
 * @param {Request} req
 * @returns {undefined}
 */

module.exports = function (req) {
	req.query({ format: 'json' });
	req.query({ nojsoncallback: 1 });
	req.type('text/plain');
	req.ok(parseFlickr);
};

},{}],74:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var xml2js = require('xml2js');

/**
 * Custom response parse for parsing XML responses from Flickr.
 * Currently, the Upload and Replace APIs don't support JSON
 * as a response format. Until we fix this on the API side,
 * we need to parse the XML response so that the end user
 * can at least do something with it.
 * @param {Response} res
 * @param {Function} fn
 * @returns {null}
 */

function parseXML(res, fn) {
	// palmtree pray box this approach from superagent's JSON parser
	res.text = '';
	res.setEncoding('utf8');

	// collect all the response text
	res.on('data', function (chunk) {
		res.text += chunk;
	});

	res.on('end', function () {
		xml2js.parseString(res.text, {
			mergeAttrs: true,
			explicitArray: false,
			explicitRoot: false,
			explicitCharkey: true,
			charkey: '_content'
		}, function (err, body) {

			if (err) {
				return fn(new SyntaxError(err.message), body);
			}

			if (body.stat === 'fail' && body.err) {
				err = new Error(body.err.msg);
				err.stat = body.stat;
				err.code = body.err.code;
			}

			fn(err, body);
		});
	});
}

/**
 * Superagent plugin-style function to request and parse
 * XML responses from the Flickr Upload and Replace APIs.
 * @param {Request} req
 * @returns {undefined}
 */

module.exports = function (req) {
	req.parse(parseXML);
};

},{"xml2js":49}],75:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var request = require('../lib/request');
var validate = require('../lib/validate');

/**
 * Creates a new Feeds service instance. You can use this instance
 * to explore and retrieve public Flickr API data.
 *
 * @constructor
 * @param {Object} [args] Arguments that will be passed along with every feed request
 * @param {String} [args.format=json] The feed response format
 * @param {String} [args.lang=en-us] The language to request for the feed
 * @memberof Flickr
 *
 * @example
 *
 * var feeds = new Flickr.Feeds();
 */

function Feeds(args) {

	// allow creating a client without `new`
	if (!(this instanceof Feeds)) {
		return new Feeds(args);
	}

	// default arguments
	this._args = Object.assign({ format: 'json', nojsoncallback: 1 }, args);
}

/**
 * Factory method to create a new request for a feed.
 * @param {String} feed
 * @param {Object} [args]
 * @returns {Request}
 * @private
 */

Feeds.prototype._ = function (feed, args) {
	return request('GET', 'https://www.flickr.com/services/feeds/' + feed + '.gne')
		.query(this._args)
		.query(args);
};

/**
 * Returns a list of public content matching some criteria.
 *
 * @param {Object} [args]
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/photos_public/
 */

Feeds.prototype.publicPhotos = function (args) {
	return this._('photos_public', args);
};

/**
 * Returns a list of public content from the contacts, friends & family of a given person.
 *
 * @param {Object} args
 * @param {Number|String} args.user_id The user ID of the user to fetch friends' photos and videos for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/photos_friends/
 */

Feeds.prototype.friendsPhotos = function (args) {
	validate(args, 'user_id');

	return this._('photos_friends', args);
};

/**
 * Returns a list of public favorites for a given user.
 *
 * @param {Object} args
 * @param {Number|String} args.id A single user ID. This specifies a user to fetch for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/photos_faves/
 */

Feeds.prototype.favePhotos = function (args) {
	// This feed launched with support for id, but was
	// later changed to support `nsid`. This allows us to
	// check both, and fail if neither is specified
	validate(args, ['id', 'nsid']);

	return this._('photos_faves', args);
};

/**
 * Returns a list of recent discussions in a given group.
 *
 * @param {Object} args
 * @param {Number} args.id The ID of the group to fetch discussions for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/groups_discuss/
 */

Feeds.prototype.groupDiscussions = function (args) {
	validate(args, 'id');

	return this._('groups_discuss', args);
};

/**
 * Returns a list of things recently added to the pool of a given group.
 *
 * @param {Object} args
 * @param {Number} args.id The ID of the group to fetch for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/groups_pool/
 */

Feeds.prototype.groupPool = function (args) {
	validate(args, 'id');

	return this._('groups_pool', args);
};

/**
 * Returns a list of recent topics from the forum.
 *
 * @param {Object} [args]
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/forums/
 */

Feeds.prototype.forum = function (args) {
	return this._('forums', args);
};

/**
 * Returns a list of recent comments on photostream and sets belonging to a given user.
 *
 * @param {Object} args
 * @param {Number|String} args.user_id The user ID to fetch recent activity for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/activity/
 */

Feeds.prototype.recentActivity = function (args) {
	validate(args, 'user_id');

	return this._('activity', args);
};

/**
 * Returns a list of recent comments that have been commented on by a given person.
 *
 * @param {Object} args
 * @param {Number|String} args.user_id The user ID to fetch recent comments for.
 * @returns {Request}
 * @see https://www.flickr.com/services/feeds/docs/photos_comments/
 */

Feeds.prototype.recentComments = function (args) {
	validate(args, 'user_id');

	return this._('photos_comments', args);
};

module.exports = Feeds;

},{"../lib/request":2,"../lib/validate":3}],76:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

/**
 * OAuth 1.0 requires your consumer secret to sign calls,
 * and you should never expose secrets to the browser.
 * @constructor
 * @throws {Error}
 */

function OAuth() {
	throw new Error('OAuth 1.0 is not supported in the browser');
}

// also throw for static methods
OAuth.createPlugin = OAuth;

module.exports = OAuth;

},{}],77:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var Request = require('../lib/request').Request;
var xml = require('../plugins/xml');

/**
 * Creates a new Replace service instance. Since the Replace API only
 * does one thing (replace files), an Replace instance is simply
 * a Request subclass.
 *
 * The Replace endpoint requires authentication. You should pass a configured
 * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to replace
 * photos on behalf of another user.
 *
 * @param {Function} auth
 * @param {Number|String} photoID The ID of the photo to replace
 * @param {String|fs.ReadStream|Buffer} file
 * @param {Object} [args]
 * @constructor
 * @extends Request
 * @memberof Flickr
 *
 * @example
 *
 * var replace = new Flickr.Replace(auth, 41234567890, 'replace.png', {
 *   title: 'Now in pink!'
 * });
 *
 * replace.then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @see https://www.flickr.com/services/api/replace.api.html
 */

function Replace(auth, photoID, file, args) {

	// allow creating a client without `new`
	if (!(this instanceof Replace)) {
		return new Replace(auth, photoID, file, args);
	}

	Request.call(this, 'POST', 'https://up.flickr.com/services/replace');

	if (typeof auth !== 'function') {
		throw new Error('Missing required argument "auth"');
	}

	if (typeof photoID === 'undefined') {
		throw new Error('Missing required argument "photoID"');
	}

	if (typeof args === 'undefined') {
		args = {};
	}

	this.attach('photo', file);
	this.field('photo_id', photoID);
	this.field(args);
	this.use(xml);
	this.use(auth);
}

Replace.prototype = Object.create(Request.prototype);

module.exports = Replace;

},{"../lib/request":2,"../plugins/xml":74}],78:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var request = require('../lib/request');
var validate = require('../lib/validate');
var json = require('../plugins/json');

/**
 * Creates a superagent plugin that simply adds api_key to
 * the query string of every request.
 * @param {String} str
 * @returns {Function}
 * @private
 */

function createAPIKeyPlugin(str) {
	return function (req) {
		return req.query({ api_key: str });
	};
}

/**
 * Creates a new Flickr API client. This "client" is a factory
 * method that creates a new superagent request pre-configured
 * for talking to the Flickr API. You must pass an "auth"
 * supergent plugin.
 * @param {Function} auth
 * @returns {Function}
 * @private
 * @see https://github.com/visionmedia/superagent
 */

function createClient(auth, opts) {
	var host;

	// allow passing just an api key instead of a function
	if (typeof auth === 'string') {
		auth = createAPIKeyPlugin(auth);
	}

	if (typeof auth !== 'function') {
		throw new Error('Missing required argument "auth"');
	}

	// options
	opts = opts || {};
	host = opts.host || 'api.flickr.com';

	return function (verb, method, args) {
		if (typeof args === 'undefined') {
			args = {};
		}

		// the API expects the "extras" param to be a
		// comma-separated list, so if we are given an
		// array we should join it
		if (Array.isArray(args.extras)) {
			args.extras = args.extras.join(',');
		} else if (args.extras instanceof Set) {
			args.extras = Array.from(args.extras).join(',');
		}

		return request(verb, 'https://' + host + '/services/rest')
			.query({ method: method })
			.query(args)
			.use(json)
			.use(auth);
	};

}

/**
 * Creates a new Flickr REST API client.
 *
 * You **must** pass a superagent plugin or your API key as the first
 * parameter. For methods that don't require authentication, you can simply
 * provide your API key. For methods that do require authentication,
 * use the [OAuth plugin]{@link Flickr.OAuth.createPlugin}.
 *
 * @constructor
 * @param {Function|String} auth An authentication plugin function or an API key
 *
 * @example <caption>Get info about a public photo with your API key</caption>
 *
 * var flickr = new Flickr(process.env.FLICKR_API_KEY);
 *
 * flickr.photos.getInfo({
 *   photo_id: 25825763 // sorry, @dokas
 * }).then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @example <caption>Searching for public photos with your API key</caption>
 *
 * var flickr = new Flickr(process.env.FLICKR_API_KEY);
 *
 * flickr.photos.search({
 *   text: 'doggo'
 * }).then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @example <caption>Authenticate as a user with the OAuth plugin</caption>
 *
 * var flickr = new Flickr(Flickr.OAuth.createPlugin(
 *   process.env.FLICKR_CONSUMER_KEY,
 *   process.env.FLICKR_CONSUMER_SECRET,
 *   process.env.FLICKR_OAUTH_TOKEN,
 *   process.env.FLICKR_OAUTH_TOKEN_SECRET
 * ));
 *
 * flickr.test.login().then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @classdesc
 *
 * All of the [REST API][services/api] methods are available on the
 * [Flickr]{@link Flickr} prototype. Each method accepts a single parameter
 * which is an optional hash of arguments. Refer to the [REST API][services/api]
 * docs for the full list of methods and their supported arguments.
 *
 * | Method | Permissions | Required Arguments |
 * | --- | --- | --- |
 * | [flickr.activity.userComments](https://www.flickr.com/services/api/flickr.activity.userComments.html) | `read` :eyes: |  |
 * | [flickr.activity.userPhotos](https://www.flickr.com/services/api/flickr.activity.userPhotos.html) | `read` :eyes: |  |
 * | [flickr.auth.checkToken](https://www.flickr.com/services/api/flickr.auth.checkToken.html) | `none`  | `auth_token` |
 * | [flickr.auth.getFrob](https://www.flickr.com/services/api/flickr.auth.getFrob.html) | `none`  |  |
 * | [flickr.auth.getFullToken](https://www.flickr.com/services/api/flickr.auth.getFullToken.html) | `none`  | `mini_token` |
 * | [flickr.auth.getToken](https://www.flickr.com/services/api/flickr.auth.getToken.html) | `none`  | `frob` |
 * | [flickr.auth.oauth.checkToken](https://www.flickr.com/services/api/flickr.auth.oauth.checkToken.html) | `none`  | `oauth_token` |
 * | [flickr.auth.oauth.getAccessToken](https://www.flickr.com/services/api/flickr.auth.oauth.getAccessToken.html) | `none`  |  |
 * | [flickr.blogs.getList](https://www.flickr.com/services/api/flickr.blogs.getList.html) | `read` :eyes: |  |
 * | [flickr.blogs.getServices](https://www.flickr.com/services/api/flickr.blogs.getServices.html) | `none`  |  |
 * | [flickr.blogs.postPhoto](https://www.flickr.com/services/api/flickr.blogs.postPhoto.html) | `write` :pencil2: | `photo_id`, `title`, `description` |
 * | [flickr.cameras.getBrandModels](https://www.flickr.com/services/api/flickr.cameras.getBrandModels.html) | `none`  | `brand` |
 * | [flickr.cameras.getBrands](https://www.flickr.com/services/api/flickr.cameras.getBrands.html) | `none`  |  |
 * | [flickr.collections.getInfo](https://www.flickr.com/services/api/flickr.collections.getInfo.html) | `read` :eyes: | `collection_id` |
 * | [flickr.collections.getTree](https://www.flickr.com/services/api/flickr.collections.getTree.html) | `none`  |  |
 * | [flickr.commons.getInstitutions](https://www.flickr.com/services/api/flickr.commons.getInstitutions.html) | `none`  |  |
 * | [flickr.contacts.getList](https://www.flickr.com/services/api/flickr.contacts.getList.html) | `read` :eyes: |  |
 * | [flickr.contacts.getListRecentlyUploaded](https://www.flickr.com/services/api/flickr.contacts.getListRecentlyUploaded.html) | `read` :eyes: |  |
 * | [flickr.contacts.getPublicList](https://www.flickr.com/services/api/flickr.contacts.getPublicList.html) | `none`  | `user_id` |
 * | [flickr.contacts.getTaggingSuggestions](https://www.flickr.com/services/api/flickr.contacts.getTaggingSuggestions.html) | `read` :eyes: |  |
 * | [flickr.favorites.add](https://www.flickr.com/services/api/flickr.favorites.add.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.favorites.getContext](https://www.flickr.com/services/api/flickr.favorites.getContext.html) | `none`  | `photo_id`, `user_id` |
 * | [flickr.favorites.getList](https://www.flickr.com/services/api/flickr.favorites.getList.html) | `none`  |  |
 * | [flickr.favorites.getPublicList](https://www.flickr.com/services/api/flickr.favorites.getPublicList.html) | `none`  | `user_id` |
 * | [flickr.favorites.remove](https://www.flickr.com/services/api/flickr.favorites.remove.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.galleries.addPhoto](https://www.flickr.com/services/api/flickr.galleries.addPhoto.html) | `write` :pencil2: | `gallery_id`, `photo_id` |
 * | [flickr.galleries.create](https://www.flickr.com/services/api/flickr.galleries.create.html) | `write` :pencil2: | `title`, `description` |
 * | [flickr.galleries.editMeta](https://www.flickr.com/services/api/flickr.galleries.editMeta.html) | `write` :pencil2: | `gallery_id`, `title` |
 * | [flickr.galleries.editPhoto](https://www.flickr.com/services/api/flickr.galleries.editPhoto.html) | `write` :pencil2: | `gallery_id`, `photo_id`, `comment` |
 * | [flickr.galleries.editPhotos](https://www.flickr.com/services/api/flickr.galleries.editPhotos.html) | `write` :pencil2: | `gallery_id`, `primary_photo_id`, `photo_ids` |
 * | [flickr.galleries.getInfo](https://www.flickr.com/services/api/flickr.galleries.getInfo.html) | `none`  | `gallery_id` |
 * | [flickr.galleries.getList](https://www.flickr.com/services/api/flickr.galleries.getList.html) | `none`  | `user_id` |
 * | [flickr.galleries.getListForPhoto](https://www.flickr.com/services/api/flickr.galleries.getListForPhoto.html) | `none`  | `photo_id` |
 * | [flickr.galleries.getPhotos](https://www.flickr.com/services/api/flickr.galleries.getPhotos.html) | `none`  | `gallery_id` |
 * | [flickr.groups.browse](https://www.flickr.com/services/api/flickr.groups.browse.html) | `read` :eyes: |  |
 * | [flickr.groups.getInfo](https://www.flickr.com/services/api/flickr.groups.getInfo.html) | `none`  | `group_id` |
 * | [flickr.groups.join](https://www.flickr.com/services/api/flickr.groups.join.html) | `write` :pencil2: | `group_id` |
 * | [flickr.groups.joinRequest](https://www.flickr.com/services/api/flickr.groups.joinRequest.html) | `write` :pencil2: | `group_id`, `message`, `accept_rules` |
 * | [flickr.groups.leave](https://www.flickr.com/services/api/flickr.groups.leave.html) | `delete` :boom: | `group_id` |
 * | [flickr.groups.search](https://www.flickr.com/services/api/flickr.groups.search.html) | `none`  | `text` |
 * | [flickr.groups.discuss.replies.add](https://www.flickr.com/services/api/flickr.groups.discuss.replies.add.html) | `write` :pencil2: | `group_id`, `topic_id`, `message` |
 * | [flickr.groups.discuss.replies.delete](https://www.flickr.com/services/api/flickr.groups.discuss.replies.delete.html) | `delete` :boom: | `group_id`, `topic_id`, `reply_id` |
 * | [flickr.groups.discuss.replies.edit](https://www.flickr.com/services/api/flickr.groups.discuss.replies.edit.html) | `write` :pencil2: | `group_id`, `topic_id`, `reply_id`, `message` |
 * | [flickr.groups.discuss.replies.getInfo](https://www.flickr.com/services/api/flickr.groups.discuss.replies.getInfo.html) | `none`  | `group_id`, `topic_id`, `reply_id` |
 * | [flickr.groups.discuss.replies.getList](https://www.flickr.com/services/api/flickr.groups.discuss.replies.getList.html) | `none`  | `group_id`, `topic_id`, `per_page` |
 * | [flickr.groups.discuss.topics.add](https://www.flickr.com/services/api/flickr.groups.discuss.topics.add.html) | `write` :pencil2: | `group_id`, `subject`, `message` |
 * | [flickr.groups.discuss.topics.getInfo](https://www.flickr.com/services/api/flickr.groups.discuss.topics.getInfo.html) | `none`  | `group_id`, `topic_id` |
 * | [flickr.groups.discuss.topics.getList](https://www.flickr.com/services/api/flickr.groups.discuss.topics.getList.html) | `none`  | `group_id` |
 * | [flickr.groups.members.getList](https://www.flickr.com/services/api/flickr.groups.members.getList.html) | `read` :eyes: | `group_id` |
 * | [flickr.groups.pools.add](https://www.flickr.com/services/api/flickr.groups.pools.add.html) | `write` :pencil2: | `photo_id`, `group_id` |
 * | [flickr.groups.pools.getContext](https://www.flickr.com/services/api/flickr.groups.pools.getContext.html) | `none`  | `photo_id`, `group_id` |
 * | [flickr.groups.pools.getGroups](https://www.flickr.com/services/api/flickr.groups.pools.getGroups.html) | `read` :eyes: |  |
 * | [flickr.groups.pools.getPhotos](https://www.flickr.com/services/api/flickr.groups.pools.getPhotos.html) | `none`  | `group_id` |
 * | [flickr.groups.pools.remove](https://www.flickr.com/services/api/flickr.groups.pools.remove.html) | `write` :pencil2: | `photo_id`, `group_id` |
 * | [flickr.interestingness.getList](https://www.flickr.com/services/api/flickr.interestingness.getList.html) | `none`  |  |
 * | [flickr.machinetags.getNamespaces](https://www.flickr.com/services/api/flickr.machinetags.getNamespaces.html) | `none`  |  |
 * | [flickr.machinetags.getPairs](https://www.flickr.com/services/api/flickr.machinetags.getPairs.html) | `none`  |  |
 * | [flickr.machinetags.getPredicates](https://www.flickr.com/services/api/flickr.machinetags.getPredicates.html) | `none`  |  |
 * | [flickr.machinetags.getRecentValues](https://www.flickr.com/services/api/flickr.machinetags.getRecentValues.html) | `none`  |  |
 * | [flickr.machinetags.getValues](https://www.flickr.com/services/api/flickr.machinetags.getValues.html) | `none`  | `namespace`, `predicate` |
 * | [flickr.panda.getList](https://www.flickr.com/services/api/flickr.panda.getList.html) | `none`  |  |
 * | [flickr.panda.getPhotos](https://www.flickr.com/services/api/flickr.panda.getPhotos.html) | `none`  | `panda_name` |
 * | [flickr.people.findByEmail](https://www.flickr.com/services/api/flickr.people.findByEmail.html) | `none`  | `find_email` |
 * | [flickr.people.findByUsername](https://www.flickr.com/services/api/flickr.people.findByUsername.html) | `none`  | `username` |
 * | [flickr.people.getGroups](https://www.flickr.com/services/api/flickr.people.getGroups.html) | `read` :eyes: | `user_id` |
 * | [flickr.people.getInfo](https://www.flickr.com/services/api/flickr.people.getInfo.html) | `none`  | `user_id` |
 * | [flickr.people.getLimits](https://www.flickr.com/services/api/flickr.people.getLimits.html) | `read` :eyes: |  |
 * | [flickr.people.getPhotos](https://www.flickr.com/services/api/flickr.people.getPhotos.html) | `none`  | `user_id` |
 * | [flickr.people.getPhotosOf](https://www.flickr.com/services/api/flickr.people.getPhotosOf.html) | `none`  | `user_id` |
 * | [flickr.people.getPublicGroups](https://www.flickr.com/services/api/flickr.people.getPublicGroups.html) | `none`  | `user_id` |
 * | [flickr.people.getPublicPhotos](https://www.flickr.com/services/api/flickr.people.getPublicPhotos.html) | `none`  | `user_id` |
 * | [flickr.people.getUploadStatus](https://www.flickr.com/services/api/flickr.people.getUploadStatus.html) | `read` :eyes: |  |
 * | [flickr.photos.addTags](https://www.flickr.com/services/api/flickr.photos.addTags.html) | `write` :pencil2: | `photo_id`, `tags` |
 * | [flickr.photos.delete](https://www.flickr.com/services/api/flickr.photos.delete.html) | `delete` :boom: | `photo_id` |
 * | [flickr.photos.getAllContexts](https://www.flickr.com/services/api/flickr.photos.getAllContexts.html) | `none`  | `photo_id` |
 * | [flickr.photos.getContactsPhotos](https://www.flickr.com/services/api/flickr.photos.getContactsPhotos.html) | `read` :eyes: |  |
 * | [flickr.photos.getContactsPublicPhotos](https://www.flickr.com/services/api/flickr.photos.getContactsPublicPhotos.html) | `none`  | `user_id` |
 * | [flickr.photos.getContext](https://www.flickr.com/services/api/flickr.photos.getContext.html) | `none`  | `photo_id` |
 * | [flickr.photos.getCounts](https://www.flickr.com/services/api/flickr.photos.getCounts.html) | `read` :eyes: |  |
 * | [flickr.photos.getExif](https://www.flickr.com/services/api/flickr.photos.getExif.html) | `none`  | `photo_id` |
 * | [flickr.photos.getFavorites](https://www.flickr.com/services/api/flickr.photos.getFavorites.html) | `none`  | `photo_id` |
 * | [flickr.photos.getInfo](https://www.flickr.com/services/api/flickr.photos.getInfo.html) | `none`  | `photo_id` |
 * | [flickr.photos.getNotInSet](https://www.flickr.com/services/api/flickr.photos.getNotInSet.html) | `read` :eyes: |  |
 * | [flickr.photos.getPerms](https://www.flickr.com/services/api/flickr.photos.getPerms.html) | `read` :eyes: | `photo_id` |
 * | [flickr.photos.getPopular](https://www.flickr.com/services/api/flickr.photos.getPopular.html) | `none`  |  |
 * | [flickr.photos.getRecent](https://www.flickr.com/services/api/flickr.photos.getRecent.html) | `none`  |  |
 * | [flickr.photos.getSizes](https://www.flickr.com/services/api/flickr.photos.getSizes.html) | `none`  | `photo_id` |
 * | [flickr.photos.getUntagged](https://www.flickr.com/services/api/flickr.photos.getUntagged.html) | `read` :eyes: |  |
 * | [flickr.photos.getWithGeoData](https://www.flickr.com/services/api/flickr.photos.getWithGeoData.html) | `read` :eyes: |  |
 * | [flickr.photos.getWithoutGeoData](https://www.flickr.com/services/api/flickr.photos.getWithoutGeoData.html) | `read` :eyes: |  |
 * | [flickr.photos.recentlyUpdated](https://www.flickr.com/services/api/flickr.photos.recentlyUpdated.html) | `read` :eyes: | `min_date` |
 * | [flickr.photos.removeTag](https://www.flickr.com/services/api/flickr.photos.removeTag.html) | `write` :pencil2: | `tag_id` |
 * | [flickr.photos.search](https://www.flickr.com/services/api/flickr.photos.search.html) | `none`  |  |
 * | [flickr.photos.setContentType](https://www.flickr.com/services/api/flickr.photos.setContentType.html) | `write` :pencil2: | `photo_id`, `content_type` |
 * | [flickr.photos.setDates](https://www.flickr.com/services/api/flickr.photos.setDates.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.photos.setMeta](https://www.flickr.com/services/api/flickr.photos.setMeta.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.photos.setPerms](https://www.flickr.com/services/api/flickr.photos.setPerms.html) | `write` :pencil2: | `photo_id`, `is_public`, `is_friend`, `is_family` |
 * | [flickr.photos.setSafetyLevel](https://www.flickr.com/services/api/flickr.photos.setSafetyLevel.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.photos.setTags](https://www.flickr.com/services/api/flickr.photos.setTags.html) | `write` :pencil2: | `photo_id`, `tags` |
 * | [flickr.photos.comments.addComment](https://www.flickr.com/services/api/flickr.photos.comments.addComment.html) | `write` :pencil2: | `photo_id`, `comment_text` |
 * | [flickr.photos.comments.deleteComment](https://www.flickr.com/services/api/flickr.photos.comments.deleteComment.html) | `write` :pencil2: | `comment_id` |
 * | [flickr.photos.comments.editComment](https://www.flickr.com/services/api/flickr.photos.comments.editComment.html) | `write` :pencil2: | `comment_id`, `comment_text` |
 * | [flickr.photos.comments.getList](https://www.flickr.com/services/api/flickr.photos.comments.getList.html) | `none`  | `photo_id` |
 * | [flickr.photos.comments.getRecentForContacts](https://www.flickr.com/services/api/flickr.photos.comments.getRecentForContacts.html) | `read` :eyes: |  |
 * | [flickr.photos.geo.batchCorrectLocation](https://www.flickr.com/services/api/flickr.photos.geo.batchCorrectLocation.html) | `write` :pencil2: | `lat`, `lon`, `accuracy` |
 * | [flickr.photos.geo.correctLocation](https://www.flickr.com/services/api/flickr.photos.geo.correctLocation.html) | `write` :pencil2: | `photo_id`, `foursquare_id` |
 * | [flickr.photos.geo.getLocation](https://www.flickr.com/services/api/flickr.photos.geo.getLocation.html) | `none`  | `photo_id` |
 * | [flickr.photos.geo.getPerms](https://www.flickr.com/services/api/flickr.photos.geo.getPerms.html) | `read` :eyes: | `photo_id` |
 * | [flickr.photos.geo.photosForLocation](https://www.flickr.com/services/api/flickr.photos.geo.photosForLocation.html) | `read` :eyes: | `lat`, `lon` |
 * | [flickr.photos.geo.removeLocation](https://www.flickr.com/services/api/flickr.photos.geo.removeLocation.html) | `write` :pencil2: | `photo_id` |
 * | [flickr.photos.geo.setContext](https://www.flickr.com/services/api/flickr.photos.geo.setContext.html) | `write` :pencil2: | `photo_id`, `context` |
 * | [flickr.photos.geo.setLocation](https://www.flickr.com/services/api/flickr.photos.geo.setLocation.html) | `write` :pencil2: | `photo_id`, `lat`, `lon` |
 * | [flickr.photos.geo.setPerms](https://www.flickr.com/services/api/flickr.photos.geo.setPerms.html) | `write` :pencil2: | `is_public`, `is_contact`, `is_friend`, `is_family`, `photo_id` |
 * | [flickr.photos.licenses.getInfo](https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html) | `none`  |  |
 * | [flickr.photos.licenses.setLicense](https://www.flickr.com/services/api/flickr.photos.licenses.setLicense.html) | `write` :pencil2: | `photo_id`, `license_id` |
 * | [flickr.photos.notes.add](https://www.flickr.com/services/api/flickr.photos.notes.add.html) | `write` :pencil2: | `photo_id`, `note_x`, `note_y`, `note_w`, `note_h`, `note_text` |
 * | [flickr.photos.notes.delete](https://www.flickr.com/services/api/flickr.photos.notes.delete.html) | `write` :pencil2: | `note_id` |
 * | [flickr.photos.notes.edit](https://www.flickr.com/services/api/flickr.photos.notes.edit.html) | `write` :pencil2: | `note_id`, `note_x`, `note_y`, `note_w`, `note_h`, `note_text` |
 * | [flickr.photos.people.add](https://www.flickr.com/services/api/flickr.photos.people.add.html) | `write` :pencil2: | `photo_id`, `user_id` |
 * | [flickr.photos.people.delete](https://www.flickr.com/services/api/flickr.photos.people.delete.html) | `write` :pencil2: | `photo_id`, `user_id` |
 * | [flickr.photos.people.deleteCoords](https://www.flickr.com/services/api/flickr.photos.people.deleteCoords.html) | `write` :pencil2: | `photo_id`, `user_id` |
 * | [flickr.photos.people.editCoords](https://www.flickr.com/services/api/flickr.photos.people.editCoords.html) | `write` :pencil2: | `photo_id`, `user_id`, `person_x`, `person_y`, `person_w`, `person_h` |
 * | [flickr.photos.people.getList](https://www.flickr.com/services/api/flickr.photos.people.getList.html) | `none`  | `photo_id` |
 * | [flickr.photos.suggestions.approveSuggestion](https://www.flickr.com/services/api/flickr.photos.suggestions.approveSuggestion.html) | `write` :pencil2: | `suggestion_id` |
 * | [flickr.photos.suggestions.getList](https://www.flickr.com/services/api/flickr.photos.suggestions.getList.html) | `read` :eyes: |  |
 * | [flickr.photos.suggestions.rejectSuggestion](https://www.flickr.com/services/api/flickr.photos.suggestions.rejectSuggestion.html) | `write` :pencil2: | `suggestion_id` |
 * | [flickr.photos.suggestions.removeSuggestion](https://www.flickr.com/services/api/flickr.photos.suggestions.removeSuggestion.html) | `write` :pencil2: | `suggestion_id` |
 * | [flickr.photos.suggestions.suggestLocation](https://www.flickr.com/services/api/flickr.photos.suggestions.suggestLocation.html) | `write` :pencil2: | `photo_id`, `lat`, `lon` |
 * | [flickr.photos.transform.rotate](https://www.flickr.com/services/api/flickr.photos.transform.rotate.html) | `write` :pencil2: | `photo_id`, `degrees` |
 * | [flickr.photos.upload.checkTickets](https://www.flickr.com/services/api/flickr.photos.upload.checkTickets.html) | `none`  | `tickets` |
 * | [flickr.photosets.addPhoto](https://www.flickr.com/services/api/flickr.photosets.addPhoto.html) | `write` :pencil2: | `photoset_id`, `photo_id` |
 * | [flickr.photosets.create](https://www.flickr.com/services/api/flickr.photosets.create.html) | `write` :pencil2: | `title`, `primary_photo_id` |
 * | [flickr.photosets.delete](https://www.flickr.com/services/api/flickr.photosets.delete.html) | `write` :pencil2: | `photoset_id` |
 * | [flickr.photosets.editMeta](https://www.flickr.com/services/api/flickr.photosets.editMeta.html) | `write` :pencil2: | `photoset_id`, `title` |
 * | [flickr.photosets.editPhotos](https://www.flickr.com/services/api/flickr.photosets.editPhotos.html) | `write` :pencil2: | `photoset_id`, `primary_photo_id`, `photo_ids` |
 * | [flickr.photosets.getContext](https://www.flickr.com/services/api/flickr.photosets.getContext.html) | `none`  | `photo_id`, `photoset_id` |
 * | [flickr.photosets.getInfo](https://www.flickr.com/services/api/flickr.photosets.getInfo.html) | `none`  | `photoset_id`, `user_id` |
 * | [flickr.photosets.getList](https://www.flickr.com/services/api/flickr.photosets.getList.html) | `none`  |  |
 * | [flickr.photosets.getPhotos](https://www.flickr.com/services/api/flickr.photosets.getPhotos.html) | `none`  | `photoset_id`, `user_id` |
 * | [flickr.photosets.orderSets](https://www.flickr.com/services/api/flickr.photosets.orderSets.html) | `write` :pencil2: | `photoset_ids` |
 * | [flickr.photosets.removePhoto](https://www.flickr.com/services/api/flickr.photosets.removePhoto.html) | `write` :pencil2: | `photoset_id`, `photo_id` |
 * | [flickr.photosets.removePhotos](https://www.flickr.com/services/api/flickr.photosets.removePhotos.html) | `write` :pencil2: | `photoset_id`, `photo_ids` |
 * | [flickr.photosets.reorderPhotos](https://www.flickr.com/services/api/flickr.photosets.reorderPhotos.html) | `write` :pencil2: | `photoset_id`, `photo_ids` |
 * | [flickr.photosets.setPrimaryPhoto](https://www.flickr.com/services/api/flickr.photosets.setPrimaryPhoto.html) | `write` :pencil2: | `photoset_id`, `photo_id` |
 * | [flickr.photosets.comments.addComment](https://www.flickr.com/services/api/flickr.photosets.comments.addComment.html) | `write` :pencil2: | `photoset_id`, `comment_text` |
 * | [flickr.photosets.comments.deleteComment](https://www.flickr.com/services/api/flickr.photosets.comments.deleteComment.html) | `write` :pencil2: | `comment_id` |
 * | [flickr.photosets.comments.editComment](https://www.flickr.com/services/api/flickr.photosets.comments.editComment.html) | `write` :pencil2: | `comment_id`, `comment_text` |
 * | [flickr.photosets.comments.getList](https://www.flickr.com/services/api/flickr.photosets.comments.getList.html) | `none`  | `photoset_id` |
 * | [flickr.places.find](https://www.flickr.com/services/api/flickr.places.find.html) | `none`  | `query` |
 * | [flickr.places.findByLatLon](https://www.flickr.com/services/api/flickr.places.findByLatLon.html) | `none`  | `lat`, `lon` |
 * | [flickr.places.getChildrenWithPhotosPublic](https://www.flickr.com/services/api/flickr.places.getChildrenWithPhotosPublic.html) | `none`  |  |
 * | [flickr.places.getInfo](https://www.flickr.com/services/api/flickr.places.getInfo.html) | `none`  |  |
 * | [flickr.places.getInfoByUrl](https://www.flickr.com/services/api/flickr.places.getInfoByUrl.html) | `none`  | `url` |
 * | [flickr.places.getPlaceTypes](https://www.flickr.com/services/api/flickr.places.getPlaceTypes.html) | `none`  |  |
 * | [flickr.places.getShapeHistory](https://www.flickr.com/services/api/flickr.places.getShapeHistory.html) | `none`  |  |
 * | [flickr.places.getTopPlacesList](https://www.flickr.com/services/api/flickr.places.getTopPlacesList.html) | `none`  | `place_type_id` |
 * | [flickr.places.placesForBoundingBox](https://www.flickr.com/services/api/flickr.places.placesForBoundingBox.html) | `none`  | `bbox` |
 * | [flickr.places.placesForContacts](https://www.flickr.com/services/api/flickr.places.placesForContacts.html) | `read` :eyes: |  |
 * | [flickr.places.placesForTags](https://www.flickr.com/services/api/flickr.places.placesForTags.html) | `none`  | `place_type_id` |
 * | [flickr.places.placesForUser](https://www.flickr.com/services/api/flickr.places.placesForUser.html) | `read` :eyes: |  |
 * | [flickr.places.resolvePlaceId](https://www.flickr.com/services/api/flickr.places.resolvePlaceId.html) | `none`  | `place_id` |
 * | [flickr.places.resolvePlaceURL](https://www.flickr.com/services/api/flickr.places.resolvePlaceURL.html) | `none`  | `url` |
 * | [flickr.places.tagsForPlace](https://www.flickr.com/services/api/flickr.places.tagsForPlace.html) | `none`  |  |
 * | [flickr.prefs.getContentType](https://www.flickr.com/services/api/flickr.prefs.getContentType.html) | `read` :eyes: |  |
 * | [flickr.prefs.getGeoPerms](https://www.flickr.com/services/api/flickr.prefs.getGeoPerms.html) | `read` :eyes: |  |
 * | [flickr.prefs.getHidden](https://www.flickr.com/services/api/flickr.prefs.getHidden.html) | `read` :eyes: |  |
 * | [flickr.prefs.getPrivacy](https://www.flickr.com/services/api/flickr.prefs.getPrivacy.html) | `read` :eyes: |  |
 * | [flickr.prefs.getSafetyLevel](https://www.flickr.com/services/api/flickr.prefs.getSafetyLevel.html) | `read` :eyes: |  |
 * | [flickr.profile.getProfile](https://www.flickr.com/services/api/flickr.profile.getProfile.html) | `none`  | `user_id` |
 * | [flickr.push.getSubscriptions](https://www.flickr.com/services/api/flickr.push.getSubscriptions.html) | `read` :eyes: |  |
 * | [flickr.push.getTopics](https://www.flickr.com/services/api/flickr.push.getTopics.html) | `none`  |  |
 * | [flickr.push.subscribe](https://www.flickr.com/services/api/flickr.push.subscribe.html) | `read` :eyes: | `topic`, `callback`, `verify` |
 * | [flickr.push.unsubscribe](https://www.flickr.com/services/api/flickr.push.unsubscribe.html) | `read` :eyes: | `topic`, `callback`, `verify` |
 * | [flickr.reflection.getMethodInfo](https://www.flickr.com/services/api/flickr.reflection.getMethodInfo.html) | `none`  | `method_name` |
 * | [flickr.reflection.getMethods](https://www.flickr.com/services/api/flickr.reflection.getMethods.html) | `none`  |  |
 * | [flickr.stats.getCSVFiles](https://www.flickr.com/services/api/flickr.stats.getCSVFiles.html) | `read` :eyes: |  |
 * | [flickr.stats.getCollectionDomains](https://www.flickr.com/services/api/flickr.stats.getCollectionDomains.html) | `read` :eyes: | `date` |
 * | [flickr.stats.getCollectionReferrers](https://www.flickr.com/services/api/flickr.stats.getCollectionReferrers.html) | `read` :eyes: | `date`, `domain` |
 * | [flickr.stats.getCollectionStats](https://www.flickr.com/services/api/flickr.stats.getCollectionStats.html) | `read` :eyes: | `date`, `collection_id` |
 * | [flickr.stats.getPhotoDomains](https://www.flickr.com/services/api/flickr.stats.getPhotoDomains.html) | `read` :eyes: | `date` |
 * | [flickr.stats.getPhotoReferrers](https://www.flickr.com/services/api/flickr.stats.getPhotoReferrers.html) | `read` :eyes: | `date`, `domain` |
 * | [flickr.stats.getPhotoStats](https://www.flickr.com/services/api/flickr.stats.getPhotoStats.html) | `read` :eyes: | `date`, `photo_id` |
 * | [flickr.stats.getPhotosetDomains](https://www.flickr.com/services/api/flickr.stats.getPhotosetDomains.html) | `read` :eyes: | `date` |
 * | [flickr.stats.getPhotosetReferrers](https://www.flickr.com/services/api/flickr.stats.getPhotosetReferrers.html) | `read` :eyes: | `date`, `domain` |
 * | [flickr.stats.getPhotosetStats](https://www.flickr.com/services/api/flickr.stats.getPhotosetStats.html) | `read` :eyes: | `date`, `photoset_id` |
 * | [flickr.stats.getPhotostreamDomains](https://www.flickr.com/services/api/flickr.stats.getPhotostreamDomains.html) | `read` :eyes: | `date` |
 * | [flickr.stats.getPhotostreamReferrers](https://www.flickr.com/services/api/flickr.stats.getPhotostreamReferrers.html) | `read` :eyes: | `date`, `domain` |
 * | [flickr.stats.getPhotostreamStats](https://www.flickr.com/services/api/flickr.stats.getPhotostreamStats.html) | `read` :eyes: | `date` |
 * | [flickr.stats.getPopularPhotos](https://www.flickr.com/services/api/flickr.stats.getPopularPhotos.html) | `read` :eyes: |  |
 * | [flickr.stats.getTotalViews](https://www.flickr.com/services/api/flickr.stats.getTotalViews.html) | `read` :eyes: |  |
 * | [flickr.tags.getClusterPhotos](https://www.flickr.com/services/api/flickr.tags.getClusterPhotos.html) | `none`  | `tag`, `cluster_id` |
 * | [flickr.tags.getClusters](https://www.flickr.com/services/api/flickr.tags.getClusters.html) | `none`  | `tag` |
 * | [flickr.tags.getHotList](https://www.flickr.com/services/api/flickr.tags.getHotList.html) | `none`  |  |
 * | [flickr.tags.getListPhoto](https://www.flickr.com/services/api/flickr.tags.getListPhoto.html) | `none`  | `photo_id` |
 * | [flickr.tags.getListUser](https://www.flickr.com/services/api/flickr.tags.getListUser.html) | `none`  |  |
 * | [flickr.tags.getListUserPopular](https://www.flickr.com/services/api/flickr.tags.getListUserPopular.html) | `none`  |  |
 * | [flickr.tags.getListUserRaw](https://www.flickr.com/services/api/flickr.tags.getListUserRaw.html) | `none`  |  |
 * | [flickr.tags.getMostFrequentlyUsed](https://www.flickr.com/services/api/flickr.tags.getMostFrequentlyUsed.html) | `read` :eyes: |  |
 * | [flickr.tags.getRelated](https://www.flickr.com/services/api/flickr.tags.getRelated.html) | `none`  | `tag` |
 * | [flickr.test.echo](https://www.flickr.com/services/api/flickr.test.echo.html) | `none`  |  |
 * | [flickr.test.login](https://www.flickr.com/services/api/flickr.test.login.html) | `read` :eyes: |  |
 * | [flickr.test.null](https://www.flickr.com/services/api/flickr.test.null.html) | `read` :eyes: |  |
 * | [flickr.testimonials.addTestimonial](https://www.flickr.com/services/api/flickr.testimonials.addTestimonial.html) | `write` :pencil2: | `user_id`, `testimonial_text` |
 * | [flickr.testimonials.approveTestimonial](https://www.flickr.com/services/api/flickr.testimonials.approveTestimonial.html) | `write` :pencil2: | `testimonial_id` |
 * | [flickr.testimonials.deleteTestimonial](https://www.flickr.com/services/api/flickr.testimonials.deleteTestimonial.html) | `write` :pencil2: | `testimonial_id` |
 * | [flickr.testimonials.editTestimonial](https://www.flickr.com/services/api/flickr.testimonials.editTestimonial.html) | `write` :pencil2: | `user_id`, `testimonial_id`, `testimonial_text` |
 * | [flickr.testimonials.getAllTestimonialsAbout](https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsAbout.html) | `read` :eyes: |  |
 * | [flickr.testimonials.getAllTestimonialsAboutBy](https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsAboutBy.html) | `read` :eyes: | `user_id` |
 * | [flickr.testimonials.getAllTestimonialsBy](https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsBy.html) | `read` :eyes: |  |
 * | [flickr.testimonials.getPendingTestimonialsAbout](https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsAbout.html) | `read` :eyes: |  |
 * | [flickr.testimonials.getPendingTestimonialsAboutBy](https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsAboutBy.html) | `read` :eyes: | `user_id` |
 * | [flickr.testimonials.getPendingTestimonialsBy](https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsBy.html) | `read` :eyes: |  |
 * | [flickr.testimonials.getTestimonialsAbout](https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsAbout.html) | `none`  | `user_id` |
 * | [flickr.testimonials.getTestimonialsAboutBy](https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsAboutBy.html) | `read` :eyes: | `user_id` |
 * | [flickr.testimonials.getTestimonialsBy](https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsBy.html) | `none`  | `user_id` |
 * | [flickr.urls.getGroup](https://www.flickr.com/services/api/flickr.urls.getGroup.html) | `none`  | `group_id` |
 * | [flickr.urls.getUserPhotos](https://www.flickr.com/services/api/flickr.urls.getUserPhotos.html) | `none`  |  |
 * | [flickr.urls.getUserProfile](https://www.flickr.com/services/api/flickr.urls.getUserProfile.html) | `none`  |  |
 * | [flickr.urls.lookupGallery](https://www.flickr.com/services/api/flickr.urls.lookupGallery.html) | `none`  | `url` |
 * | [flickr.urls.lookupGroup](https://www.flickr.com/services/api/flickr.urls.lookupGroup.html) | `none`  | `url` |
 * | [flickr.urls.lookupUser](https://www.flickr.com/services/api/flickr.urls.lookupUser.html) | `none`  | `url` |
 */

function Flickr(auth, opts) {

	// allow creating a client without `new`
	if (!(this instanceof Flickr)) {
		return new Flickr(auth);
	}

	// create a new client and assign it to all of our namespaces
	this.activity._ =
	this.auth._ =
	this.auth.oauth._ =
	this.blogs._ =
	this.cameras._ =
	this.collections._ =
	this.commons._ =
	this.contacts._ =
	this.favorites._ =
	this.galleries._ =
	this.groups._ =
	this.groups.discuss._ =
	this.groups.discuss.replies._ =
	this.groups.discuss.topics._ =
	this.groups.members._ =
	this.groups.pools._ =
	this.interestingness._ =
	this.machinetags._ =
	this.panda._ =
	this.people._ =
	this.photos._ =
	this.photos.comments._ =
	this.photos.geo._ =
	this.photos.licenses._ =
	this.photos.notes._ =
	this.photos.people._ =
	this.photos.suggestions._ =
	this.photos.transform._ =
	this.photos.upload._ =
	this.photosets._ =
	this.photosets.comments._ =
	this.places._ =
	this.prefs._ =
	this.profile._ =
	this.push._ =
	this.reflection._ =
	this.stats._ =
	this.tags._ =
	this.test._ =
	this.testimonials._ =
	this.urls._ =
	this._ = // create passthrough for future/undocumented endpoints
		createClient(auth, opts);
}


/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.activity = {};

/**
 * flickr.activity.userComments
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.activity.userComments.html
 */

Flickr.prototype.activity.userComments = function (args) {
	return this._('GET', 'flickr.activity.userComments', args);
};

/**
 * flickr.activity.userPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.activity.userPhotos.html
 */

Flickr.prototype.activity.userPhotos = function (args) {
	return this._('GET', 'flickr.activity.userPhotos', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.auth = {};

/**
 * flickr.auth.checkToken
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.checkToken.html
 */

Flickr.prototype.auth.checkToken = function (args) {
	validate(args, 'auth_token');
	return this._('GET', 'flickr.auth.checkToken', args);
};

/**
 * flickr.auth.getFrob
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.getFrob.html
 */

Flickr.prototype.auth.getFrob = function (args) {
	return this._('GET', 'flickr.auth.getFrob', args);
};

/**
 * flickr.auth.getFullToken
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.getFullToken.html
 */

Flickr.prototype.auth.getFullToken = function (args) {
	validate(args, 'mini_token');
	return this._('GET', 'flickr.auth.getFullToken', args);
};

/**
 * flickr.auth.getToken
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.getToken.html
 */

Flickr.prototype.auth.getToken = function (args) {
	validate(args, 'frob');
	return this._('GET', 'flickr.auth.getToken', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.auth.oauth = {};

/**
 * flickr.auth.oauth.checkToken
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.oauth.checkToken.html
 */

Flickr.prototype.auth.oauth.checkToken = function (args) {
	validate(args, 'oauth_token');
	return this._('GET', 'flickr.auth.oauth.checkToken', args);
};

/**
 * flickr.auth.oauth.getAccessToken
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.auth.oauth.getAccessToken.html
 */

Flickr.prototype.auth.oauth.getAccessToken = function (args) {
	return this._('GET', 'flickr.auth.oauth.getAccessToken', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.blogs = {};

/**
 * flickr.blogs.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.blogs.getList.html
 */

Flickr.prototype.blogs.getList = function (args) {
	return this._('GET', 'flickr.blogs.getList', args);
};

/**
 * flickr.blogs.getServices
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.blogs.getServices.html
 */

Flickr.prototype.blogs.getServices = function (args) {
	return this._('GET', 'flickr.blogs.getServices', args);
};

/**
 * flickr.blogs.postPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.blogs.postPhoto.html
 */

Flickr.prototype.blogs.postPhoto = function (args) {
	validate(args, 'photo_id');
	validate(args, 'title');
	validate(args, 'description');
	return this._('POST', 'flickr.blogs.postPhoto', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.cameras = {};

/**
 * flickr.cameras.getBrandModels
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.cameras.getBrandModels.html
 */

Flickr.prototype.cameras.getBrandModels = function (args) {
	validate(args, 'brand');
	return this._('GET', 'flickr.cameras.getBrandModels', args);
};

/**
 * flickr.cameras.getBrands
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.cameras.getBrands.html
 */

Flickr.prototype.cameras.getBrands = function (args) {
	return this._('GET', 'flickr.cameras.getBrands', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.collections = {};

/**
 * flickr.collections.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.collections.getInfo.html
 */

Flickr.prototype.collections.getInfo = function (args) {
	validate(args, 'collection_id');
	return this._('GET', 'flickr.collections.getInfo', args);
};

/**
 * flickr.collections.getTree
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.collections.getTree.html
 */

Flickr.prototype.collections.getTree = function (args) {
	return this._('GET', 'flickr.collections.getTree', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.commons = {};

/**
 * flickr.commons.getInstitutions
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.commons.getInstitutions.html
 */

Flickr.prototype.commons.getInstitutions = function (args) {
	return this._('GET', 'flickr.commons.getInstitutions', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.contacts = {};

/**
 * flickr.contacts.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.contacts.getList.html
 */

Flickr.prototype.contacts.getList = function (args) {
	return this._('GET', 'flickr.contacts.getList', args);
};

/**
 * flickr.contacts.getListRecentlyUploaded
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.contacts.getListRecentlyUploaded.html
 */

Flickr.prototype.contacts.getListRecentlyUploaded = function (args) {
	return this._('GET', 'flickr.contacts.getListRecentlyUploaded', args);
};

/**
 * flickr.contacts.getPublicList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.contacts.getPublicList.html
 */

Flickr.prototype.contacts.getPublicList = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.contacts.getPublicList', args);
};

/**
 * flickr.contacts.getTaggingSuggestions
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.contacts.getTaggingSuggestions.html
 */

Flickr.prototype.contacts.getTaggingSuggestions = function (args) {
	return this._('GET', 'flickr.contacts.getTaggingSuggestions', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.favorites = {};

/**
 * flickr.favorites.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.favorites.add.html
 */

Flickr.prototype.favorites.add = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.favorites.add', args);
};

/**
 * flickr.favorites.getContext
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.favorites.getContext.html
 */

Flickr.prototype.favorites.getContext = function (args) {
	validate(args, 'photo_id');
	validate(args, 'user_id');
	return this._('GET', 'flickr.favorites.getContext', args);
};

/**
 * flickr.favorites.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.favorites.getList.html
 */

Flickr.prototype.favorites.getList = function (args) {
	return this._('GET', 'flickr.favorites.getList', args);
};

/**
 * flickr.favorites.getPublicList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.favorites.getPublicList.html
 */

Flickr.prototype.favorites.getPublicList = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.favorites.getPublicList', args);
};

/**
 * flickr.favorites.remove
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.favorites.remove.html
 */

Flickr.prototype.favorites.remove = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.favorites.remove', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.galleries = {};

/**
 * flickr.galleries.addPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.addPhoto.html
 */

Flickr.prototype.galleries.addPhoto = function (args) {
	validate(args, 'gallery_id');
	validate(args, 'photo_id');
	return this._('POST', 'flickr.galleries.addPhoto', args);
};

/**
 * flickr.galleries.create
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.create.html
 */

Flickr.prototype.galleries.create = function (args) {
	validate(args, 'title');
	validate(args, 'description');
	return this._('POST', 'flickr.galleries.create', args);
};

/**
 * flickr.galleries.editMeta
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.editMeta.html
 */

Flickr.prototype.galleries.editMeta = function (args) {
	validate(args, 'gallery_id');
	validate(args, 'title');
	return this._('POST', 'flickr.galleries.editMeta', args);
};

/**
 * flickr.galleries.editPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.editPhoto.html
 */

Flickr.prototype.galleries.editPhoto = function (args) {
	validate(args, 'gallery_id');
	validate(args, 'photo_id');
	validate(args, 'comment');
	return this._('POST', 'flickr.galleries.editPhoto', args);
};

/**
 * flickr.galleries.editPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.editPhotos.html
 */

Flickr.prototype.galleries.editPhotos = function (args) {
	validate(args, 'gallery_id');
	validate(args, 'primary_photo_id');
	validate(args, 'photo_ids');
	return this._('POST', 'flickr.galleries.editPhotos', args);
};

/**
 * flickr.galleries.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.getInfo.html
 */

Flickr.prototype.galleries.getInfo = function (args) {
	validate(args, 'gallery_id');
	return this._('GET', 'flickr.galleries.getInfo', args);
};

/**
 * flickr.galleries.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.getList.html
 */

Flickr.prototype.galleries.getList = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.galleries.getList', args);
};

/**
 * flickr.galleries.getListForPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.getListForPhoto.html
 */

Flickr.prototype.galleries.getListForPhoto = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.galleries.getListForPhoto', args);
};

/**
 * flickr.galleries.getPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.galleries.getPhotos.html
 */

Flickr.prototype.galleries.getPhotos = function (args) {
	validate(args, 'gallery_id');
	return this._('GET', 'flickr.galleries.getPhotos', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups = {};

/**
 * flickr.groups.browse
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.browse.html
 */

Flickr.prototype.groups.browse = function (args) {
	return this._('GET', 'flickr.groups.browse', args);
};

/**
 * flickr.groups.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.getInfo.html
 */

Flickr.prototype.groups.getInfo = function (args) {
	validate(args, 'group_id');
	return this._('GET', 'flickr.groups.getInfo', args);
};

/**
 * flickr.groups.join
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.join.html
 */

Flickr.prototype.groups.join = function (args) {
	validate(args, 'group_id');
	return this._('POST', 'flickr.groups.join', args);
};

/**
 * flickr.groups.joinRequest
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.joinRequest.html
 */

Flickr.prototype.groups.joinRequest = function (args) {
	validate(args, 'group_id');
	validate(args, 'message');
	validate(args, 'accept_rules');
	return this._('POST', 'flickr.groups.joinRequest', args);
};

/**
 * flickr.groups.leave
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.leave.html
 */

Flickr.prototype.groups.leave = function (args) {
	validate(args, 'group_id');
	return this._('POST', 'flickr.groups.leave', args);
};

/**
 * flickr.groups.search
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.search.html
 */

Flickr.prototype.groups.search = function (args) {
	validate(args, 'text');
	return this._('GET', 'flickr.groups.search', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups.discuss = {};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups.discuss.replies = {};

/**
 * flickr.groups.discuss.replies.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.replies.add.html
 */

Flickr.prototype.groups.discuss.replies.add = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	validate(args, 'message');
	return this._('POST', 'flickr.groups.discuss.replies.add', args);
};

/**
 * flickr.groups.discuss.replies.delete
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.replies.delete.html
 */

Flickr.prototype.groups.discuss.replies.delete = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	validate(args, 'reply_id');
	return this._('POST', 'flickr.groups.discuss.replies.delete', args);
};

/**
 * flickr.groups.discuss.replies.edit
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.replies.edit.html
 */

Flickr.prototype.groups.discuss.replies.edit = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	validate(args, 'reply_id');
	validate(args, 'message');
	return this._('POST', 'flickr.groups.discuss.replies.edit', args);
};

/**
 * flickr.groups.discuss.replies.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.replies.getInfo.html
 */

Flickr.prototype.groups.discuss.replies.getInfo = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	validate(args, 'reply_id');
	return this._('GET', 'flickr.groups.discuss.replies.getInfo', args);
};

/**
 * flickr.groups.discuss.replies.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.replies.getList.html
 */

Flickr.prototype.groups.discuss.replies.getList = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	validate(args, 'per_page');
	return this._('GET', 'flickr.groups.discuss.replies.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups.discuss.topics = {};

/**
 * flickr.groups.discuss.topics.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.topics.add.html
 */

Flickr.prototype.groups.discuss.topics.add = function (args) {
	validate(args, 'group_id');
	validate(args, 'subject');
	validate(args, 'message');
	return this._('POST', 'flickr.groups.discuss.topics.add', args);
};

/**
 * flickr.groups.discuss.topics.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.topics.getInfo.html
 */

Flickr.prototype.groups.discuss.topics.getInfo = function (args) {
	validate(args, 'group_id');
	validate(args, 'topic_id');
	return this._('GET', 'flickr.groups.discuss.topics.getInfo', args);
};

/**
 * flickr.groups.discuss.topics.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.discuss.topics.getList.html
 */

Flickr.prototype.groups.discuss.topics.getList = function (args) {
	validate(args, 'group_id');
	return this._('GET', 'flickr.groups.discuss.topics.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups.members = {};

/**
 * flickr.groups.members.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.members.getList.html
 */

Flickr.prototype.groups.members.getList = function (args) {
	validate(args, 'group_id');
	return this._('GET', 'flickr.groups.members.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.groups.pools = {};

/**
 * flickr.groups.pools.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.pools.add.html
 */

Flickr.prototype.groups.pools.add = function (args) {
	validate(args, 'photo_id');
	validate(args, 'group_id');
	return this._('POST', 'flickr.groups.pools.add', args);
};

/**
 * flickr.groups.pools.getContext
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.pools.getContext.html
 */

Flickr.prototype.groups.pools.getContext = function (args) {
	validate(args, 'photo_id');
	validate(args, 'group_id');
	return this._('GET', 'flickr.groups.pools.getContext', args);
};

/**
 * flickr.groups.pools.getGroups
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.pools.getGroups.html
 */

Flickr.prototype.groups.pools.getGroups = function (args) {
	return this._('GET', 'flickr.groups.pools.getGroups', args);
};

/**
 * flickr.groups.pools.getPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.pools.getPhotos.html
 */

Flickr.prototype.groups.pools.getPhotos = function (args) {
	validate(args, 'group_id');
	return this._('GET', 'flickr.groups.pools.getPhotos', args);
};

/**
 * flickr.groups.pools.remove
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.groups.pools.remove.html
 */

Flickr.prototype.groups.pools.remove = function (args) {
	validate(args, 'photo_id');
	validate(args, 'group_id');
	return this._('POST', 'flickr.groups.pools.remove', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.interestingness = {};

/**
 * flickr.interestingness.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.interestingness.getList.html
 */

Flickr.prototype.interestingness.getList = function (args) {
	return this._('GET', 'flickr.interestingness.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.machinetags = {};

/**
 * flickr.machinetags.getNamespaces
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.machinetags.getNamespaces.html
 */

Flickr.prototype.machinetags.getNamespaces = function (args) {
	return this._('GET', 'flickr.machinetags.getNamespaces', args);
};

/**
 * flickr.machinetags.getPairs
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.machinetags.getPairs.html
 */

Flickr.prototype.machinetags.getPairs = function (args) {
	return this._('GET', 'flickr.machinetags.getPairs', args);
};

/**
 * flickr.machinetags.getPredicates
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.machinetags.getPredicates.html
 */

Flickr.prototype.machinetags.getPredicates = function (args) {
	return this._('GET', 'flickr.machinetags.getPredicates', args);
};

/**
 * flickr.machinetags.getRecentValues
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.machinetags.getRecentValues.html
 */

Flickr.prototype.machinetags.getRecentValues = function (args) {
	return this._('GET', 'flickr.machinetags.getRecentValues', args);
};

/**
 * flickr.machinetags.getValues
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.machinetags.getValues.html
 */

Flickr.prototype.machinetags.getValues = function (args) {
	validate(args, 'namespace');
	validate(args, 'predicate');
	return this._('GET', 'flickr.machinetags.getValues', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.panda = {};

/**
 * flickr.panda.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.panda.getList.html
 */

Flickr.prototype.panda.getList = function (args) {
	return this._('GET', 'flickr.panda.getList', args);
};

/**
 * flickr.panda.getPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.panda.getPhotos.html
 */

Flickr.prototype.panda.getPhotos = function (args) {
	validate(args, 'panda_name');
	return this._('GET', 'flickr.panda.getPhotos', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.people = {};

/**
 * flickr.people.findByEmail
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.findByEmail.html
 */

Flickr.prototype.people.findByEmail = function (args) {
	validate(args, 'find_email');
	return this._('GET', 'flickr.people.findByEmail', args);
};

/**
 * flickr.people.findByUsername
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.findByUsername.html
 */

Flickr.prototype.people.findByUsername = function (args) {
	validate(args, 'username');
	return this._('GET', 'flickr.people.findByUsername', args);
};

/**
 * flickr.people.getGroups
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getGroups.html
 */

Flickr.prototype.people.getGroups = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getGroups', args);
};

/**
 * flickr.people.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getInfo.html
 */

Flickr.prototype.people.getInfo = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getInfo', args);
};

/**
 * flickr.people.getLimits
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getLimits.html
 */

Flickr.prototype.people.getLimits = function (args) {
	return this._('GET', 'flickr.people.getLimits', args);
};

/**
 * flickr.people.getPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getPhotos.html
 */

Flickr.prototype.people.getPhotos = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getPhotos', args);
};

/**
 * flickr.people.getPhotosOf
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getPhotosOf.html
 */

Flickr.prototype.people.getPhotosOf = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getPhotosOf', args);
};

/**
 * flickr.people.getPublicGroups
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getPublicGroups.html
 */

Flickr.prototype.people.getPublicGroups = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getPublicGroups', args);
};

/**
 * flickr.people.getPublicPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getPublicPhotos.html
 */

Flickr.prototype.people.getPublicPhotos = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.people.getPublicPhotos', args);
};

/**
 * flickr.people.getUploadStatus
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.people.getUploadStatus.html
 */

Flickr.prototype.people.getUploadStatus = function (args) {
	return this._('GET', 'flickr.people.getUploadStatus', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos = {};

/**
 * flickr.photos.addTags
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.addTags.html
 */

Flickr.prototype.photos.addTags = function (args) {
	validate(args, 'photo_id');
	validate(args, 'tags');
	return this._('POST', 'flickr.photos.addTags', args);
};

/**
 * flickr.photos.delete
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.delete.html
 */

Flickr.prototype.photos.delete = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.delete', args);
};

/**
 * flickr.photos.getAllContexts
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getAllContexts.html
 */

Flickr.prototype.photos.getAllContexts = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getAllContexts', args);
};

/**
 * flickr.photos.getContactsPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getContactsPhotos.html
 */

Flickr.prototype.photos.getContactsPhotos = function (args) {
	return this._('GET', 'flickr.photos.getContactsPhotos', args);
};

/**
 * flickr.photos.getContactsPublicPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getContactsPublicPhotos.html
 */

Flickr.prototype.photos.getContactsPublicPhotos = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.photos.getContactsPublicPhotos', args);
};

/**
 * flickr.photos.getContext
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getContext.html
 */

Flickr.prototype.photos.getContext = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getContext', args);
};

/**
 * flickr.photos.getCounts
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getCounts.html
 */

Flickr.prototype.photos.getCounts = function (args) {
	return this._('GET', 'flickr.photos.getCounts', args);
};

/**
 * flickr.photos.getExif
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getExif.html
 */

Flickr.prototype.photos.getExif = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getExif', args);
};

/**
 * flickr.photos.getFavorites
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getFavorites.html
 */

Flickr.prototype.photos.getFavorites = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getFavorites', args);
};

/**
 * flickr.photos.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getInfo.html
 */

Flickr.prototype.photos.getInfo = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getInfo', args);
};

/**
 * flickr.photos.getNotInSet
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getNotInSet.html
 */

Flickr.prototype.photos.getNotInSet = function (args) {
	return this._('GET', 'flickr.photos.getNotInSet', args);
};

/**
 * flickr.photos.getPerms
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getPerms.html
 */

Flickr.prototype.photos.getPerms = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getPerms', args);
};

/**
 * flickr.photos.getPopular
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getPopular.html
 */

Flickr.prototype.photos.getPopular = function (args) {
	return this._('GET', 'flickr.photos.getPopular', args);
};

/**
 * flickr.photos.getRecent
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getRecent.html
 */

Flickr.prototype.photos.getRecent = function (args) {
	return this._('GET', 'flickr.photos.getRecent', args);
};

/**
 * flickr.photos.getSizes
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getSizes.html
 */

Flickr.prototype.photos.getSizes = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.getSizes', args);
};

/**
 * flickr.photos.getUntagged
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getUntagged.html
 */

Flickr.prototype.photos.getUntagged = function (args) {
	return this._('GET', 'flickr.photos.getUntagged', args);
};

/**
 * flickr.photos.getWithGeoData
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getWithGeoData.html
 */

Flickr.prototype.photos.getWithGeoData = function (args) {
	return this._('GET', 'flickr.photos.getWithGeoData', args);
};

/**
 * flickr.photos.getWithoutGeoData
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.getWithoutGeoData.html
 */

Flickr.prototype.photos.getWithoutGeoData = function (args) {
	return this._('GET', 'flickr.photos.getWithoutGeoData', args);
};

/**
 * flickr.photos.recentlyUpdated
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.recentlyUpdated.html
 */

Flickr.prototype.photos.recentlyUpdated = function (args) {
	validate(args, 'min_date');
	return this._('GET', 'flickr.photos.recentlyUpdated', args);
};

/**
 * flickr.photos.removeTag
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.removeTag.html
 */

Flickr.prototype.photos.removeTag = function (args) {
	validate(args, 'tag_id');
	return this._('POST', 'flickr.photos.removeTag', args);
};

/**
 * flickr.photos.search
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.search.html
 */

Flickr.prototype.photos.search = function (args) {
	return this._('GET', 'flickr.photos.search', args);
};

/**
 * flickr.photos.setContentType
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setContentType.html
 */

Flickr.prototype.photos.setContentType = function (args) {
	validate(args, 'photo_id');
	validate(args, 'content_type');
	return this._('POST', 'flickr.photos.setContentType', args);
};

/**
 * flickr.photos.setDates
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setDates.html
 */

Flickr.prototype.photos.setDates = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.setDates', args);
};

/**
 * flickr.photos.setMeta
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setMeta.html
 */

Flickr.prototype.photos.setMeta = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.setMeta', args);
};

/**
 * flickr.photos.setPerms
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setPerms.html
 */

Flickr.prototype.photos.setPerms = function (args) {
	validate(args, 'photo_id');
	validate(args, 'is_public');
	validate(args, 'is_friend');
	validate(args, 'is_family');
	return this._('POST', 'flickr.photos.setPerms', args);
};

/**
 * flickr.photos.setSafetyLevel
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setSafetyLevel.html
 */

Flickr.prototype.photos.setSafetyLevel = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.setSafetyLevel', args);
};

/**
 * flickr.photos.setTags
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.setTags.html
 */

Flickr.prototype.photos.setTags = function (args) {
	validate(args, 'photo_id');
	validate(args, 'tags');
	return this._('POST', 'flickr.photos.setTags', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.comments = {};

/**
 * flickr.photos.comments.addComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.comments.addComment.html
 */

Flickr.prototype.photos.comments.addComment = function (args) {
	validate(args, 'photo_id');
	validate(args, 'comment_text');
	return this._('POST', 'flickr.photos.comments.addComment', args);
};

/**
 * flickr.photos.comments.deleteComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.comments.deleteComment.html
 */

Flickr.prototype.photos.comments.deleteComment = function (args) {
	validate(args, 'comment_id');
	return this._('POST', 'flickr.photos.comments.deleteComment', args);
};

/**
 * flickr.photos.comments.editComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.comments.editComment.html
 */

Flickr.prototype.photos.comments.editComment = function (args) {
	validate(args, 'comment_id');
	validate(args, 'comment_text');
	return this._('POST', 'flickr.photos.comments.editComment', args);
};

/**
 * flickr.photos.comments.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.comments.getList.html
 */

Flickr.prototype.photos.comments.getList = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.comments.getList', args);
};

/**
 * flickr.photos.comments.getRecentForContacts
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.comments.getRecentForContacts.html
 */

Flickr.prototype.photos.comments.getRecentForContacts = function (args) {
	return this._('GET', 'flickr.photos.comments.getRecentForContacts', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.geo = {};

/**
 * flickr.photos.geo.batchCorrectLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.batchCorrectLocation.html
 */

Flickr.prototype.photos.geo.batchCorrectLocation = function (args) {
	validate(args, 'lat');
	validate(args, 'lon');
	validate(args, 'accuracy');
	return this._('POST', 'flickr.photos.geo.batchCorrectLocation', args);
};

/**
 * flickr.photos.geo.correctLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.correctLocation.html
 */

Flickr.prototype.photos.geo.correctLocation = function (args) {
	validate(args, 'photo_id');
	validate(args, 'foursquare_id');
	return this._('POST', 'flickr.photos.geo.correctLocation', args);
};

/**
 * flickr.photos.geo.getLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.getLocation.html
 */

Flickr.prototype.photos.geo.getLocation = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.geo.getLocation', args);
};

/**
 * flickr.photos.geo.getPerms
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.getPerms.html
 */

Flickr.prototype.photos.geo.getPerms = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.geo.getPerms', args);
};

/**
 * flickr.photos.geo.photosForLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.photosForLocation.html
 */

Flickr.prototype.photos.geo.photosForLocation = function (args) {
	validate(args, 'lat');
	validate(args, 'lon');
	return this._('GET', 'flickr.photos.geo.photosForLocation', args);
};

/**
 * flickr.photos.geo.removeLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.removeLocation.html
 */

Flickr.prototype.photos.geo.removeLocation = function (args) {
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.geo.removeLocation', args);
};

/**
 * flickr.photos.geo.setContext
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.setContext.html
 */

Flickr.prototype.photos.geo.setContext = function (args) {
	validate(args, 'photo_id');
	validate(args, 'context');
	return this._('POST', 'flickr.photos.geo.setContext', args);
};

/**
 * flickr.photos.geo.setLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.setLocation.html
 */

Flickr.prototype.photos.geo.setLocation = function (args) {
	validate(args, 'photo_id');
	validate(args, 'lat');
	validate(args, 'lon');
	return this._('POST', 'flickr.photos.geo.setLocation', args);
};

/**
 * flickr.photos.geo.setPerms
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.geo.setPerms.html
 */

Flickr.prototype.photos.geo.setPerms = function (args) {
	validate(args, 'is_public');
	validate(args, 'is_contact');
	validate(args, 'is_friend');
	validate(args, 'is_family');
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photos.geo.setPerms', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.licenses = {};

/**
 * flickr.photos.licenses.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html
 */

Flickr.prototype.photos.licenses.getInfo = function (args) {
	return this._('GET', 'flickr.photos.licenses.getInfo', args);
};

/**
 * flickr.photos.licenses.setLicense
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.licenses.setLicense.html
 */

Flickr.prototype.photos.licenses.setLicense = function (args) {
	validate(args, 'photo_id');
	validate(args, 'license_id');
	return this._('POST', 'flickr.photos.licenses.setLicense', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.notes = {};

/**
 * flickr.photos.notes.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.notes.add.html
 */

Flickr.prototype.photos.notes.add = function (args) {
	validate(args, 'photo_id');
	validate(args, 'note_x');
	validate(args, 'note_y');
	validate(args, 'note_w');
	validate(args, 'note_h');
	validate(args, 'note_text');
	return this._('POST', 'flickr.photos.notes.add', args);
};

/**
 * flickr.photos.notes.delete
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.notes.delete.html
 */

Flickr.prototype.photos.notes.delete = function (args) {
	validate(args, 'note_id');
	return this._('POST', 'flickr.photos.notes.delete', args);
};

/**
 * flickr.photos.notes.edit
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.notes.edit.html
 */

Flickr.prototype.photos.notes.edit = function (args) {
	validate(args, 'note_id');
	validate(args, 'note_x');
	validate(args, 'note_y');
	validate(args, 'note_w');
	validate(args, 'note_h');
	validate(args, 'note_text');
	return this._('POST', 'flickr.photos.notes.edit', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.people = {};

/**
 * flickr.photos.people.add
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.people.add.html
 */

Flickr.prototype.photos.people.add = function (args) {
	validate(args, 'photo_id');
	validate(args, 'user_id');
	return this._('POST', 'flickr.photos.people.add', args);
};

/**
 * flickr.photos.people.delete
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.people.delete.html
 */

Flickr.prototype.photos.people.delete = function (args) {
	validate(args, 'photo_id');
	validate(args, 'user_id');
	return this._('POST', 'flickr.photos.people.delete', args);
};

/**
 * flickr.photos.people.deleteCoords
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.people.deleteCoords.html
 */

Flickr.prototype.photos.people.deleteCoords = function (args) {
	validate(args, 'photo_id');
	validate(args, 'user_id');
	return this._('POST', 'flickr.photos.people.deleteCoords', args);
};

/**
 * flickr.photos.people.editCoords
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.people.editCoords.html
 */

Flickr.prototype.photos.people.editCoords = function (args) {
	validate(args, 'photo_id');
	validate(args, 'user_id');
	validate(args, 'person_x');
	validate(args, 'person_y');
	validate(args, 'person_w');
	validate(args, 'person_h');
	return this._('POST', 'flickr.photos.people.editCoords', args);
};

/**
 * flickr.photos.people.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.people.getList.html
 */

Flickr.prototype.photos.people.getList = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.photos.people.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.suggestions = {};

/**
 * flickr.photos.suggestions.approveSuggestion
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.suggestions.approveSuggestion.html
 */

Flickr.prototype.photos.suggestions.approveSuggestion = function (args) {
	validate(args, 'suggestion_id');
	return this._('POST', 'flickr.photos.suggestions.approveSuggestion', args);
};

/**
 * flickr.photos.suggestions.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.suggestions.getList.html
 */

Flickr.prototype.photos.suggestions.getList = function (args) {
	return this._('GET', 'flickr.photos.suggestions.getList', args);
};

/**
 * flickr.photos.suggestions.rejectSuggestion
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.suggestions.rejectSuggestion.html
 */

Flickr.prototype.photos.suggestions.rejectSuggestion = function (args) {
	validate(args, 'suggestion_id');
	return this._('POST', 'flickr.photos.suggestions.rejectSuggestion', args);
};

/**
 * flickr.photos.suggestions.removeSuggestion
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.suggestions.removeSuggestion.html
 */

Flickr.prototype.photos.suggestions.removeSuggestion = function (args) {
	validate(args, 'suggestion_id');
	return this._('POST', 'flickr.photos.suggestions.removeSuggestion', args);
};

/**
 * flickr.photos.suggestions.suggestLocation
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.suggestions.suggestLocation.html
 */

Flickr.prototype.photos.suggestions.suggestLocation = function (args) {
	validate(args, 'photo_id');
	validate(args, 'lat');
	validate(args, 'lon');
	return this._('POST', 'flickr.photos.suggestions.suggestLocation', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.transform = {};

/**
 * flickr.photos.transform.rotate
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.transform.rotate.html
 */

Flickr.prototype.photos.transform.rotate = function (args) {
	validate(args, 'photo_id');
	validate(args, 'degrees');
	return this._('POST', 'flickr.photos.transform.rotate', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photos.upload = {};

/**
 * flickr.photos.upload.checkTickets
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photos.upload.checkTickets.html
 */

Flickr.prototype.photos.upload.checkTickets = function (args) {
	validate(args, 'tickets');
	return this._('GET', 'flickr.photos.upload.checkTickets', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photosets = {};

/**
 * flickr.photosets.addPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.addPhoto.html
 */

Flickr.prototype.photosets.addPhoto = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photosets.addPhoto', args);
};

/**
 * flickr.photosets.create
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.create.html
 */

Flickr.prototype.photosets.create = function (args) {
	validate(args, 'title');
	validate(args, 'primary_photo_id');
	return this._('POST', 'flickr.photosets.create', args);
};

/**
 * flickr.photosets.delete
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.delete.html
 */

Flickr.prototype.photosets.delete = function (args) {
	validate(args, 'photoset_id');
	return this._('POST', 'flickr.photosets.delete', args);
};

/**
 * flickr.photosets.editMeta
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.editMeta.html
 */

Flickr.prototype.photosets.editMeta = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'title');
	return this._('POST', 'flickr.photosets.editMeta', args);
};

/**
 * flickr.photosets.editPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.editPhotos.html
 */

Flickr.prototype.photosets.editPhotos = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'primary_photo_id');
	validate(args, 'photo_ids');
	return this._('POST', 'flickr.photosets.editPhotos', args);
};

/**
 * flickr.photosets.getContext
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.getContext.html
 */

Flickr.prototype.photosets.getContext = function (args) {
	validate(args, 'photo_id');
	validate(args, 'photoset_id');
	return this._('GET', 'flickr.photosets.getContext', args);
};

/**
 * flickr.photosets.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.getInfo.html
 */

Flickr.prototype.photosets.getInfo = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'user_id');
	return this._('GET', 'flickr.photosets.getInfo', args);
};

/**
 * flickr.photosets.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.getList.html
 */

Flickr.prototype.photosets.getList = function (args) {
	return this._('GET', 'flickr.photosets.getList', args);
};

/**
 * flickr.photosets.getPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.getPhotos.html
 */

Flickr.prototype.photosets.getPhotos = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'user_id');
	return this._('GET', 'flickr.photosets.getPhotos', args);
};

/**
 * flickr.photosets.orderSets
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.orderSets.html
 */

Flickr.prototype.photosets.orderSets = function (args) {
	validate(args, 'photoset_ids');
	return this._('POST', 'flickr.photosets.orderSets', args);
};

/**
 * flickr.photosets.removePhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.removePhoto.html
 */

Flickr.prototype.photosets.removePhoto = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photosets.removePhoto', args);
};

/**
 * flickr.photosets.removePhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.removePhotos.html
 */

Flickr.prototype.photosets.removePhotos = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'photo_ids');
	return this._('POST', 'flickr.photosets.removePhotos', args);
};

/**
 * flickr.photosets.reorderPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.reorderPhotos.html
 */

Flickr.prototype.photosets.reorderPhotos = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'photo_ids');
	return this._('POST', 'flickr.photosets.reorderPhotos', args);
};

/**
 * flickr.photosets.setPrimaryPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.setPrimaryPhoto.html
 */

Flickr.prototype.photosets.setPrimaryPhoto = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'photo_id');
	return this._('POST', 'flickr.photosets.setPrimaryPhoto', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.photosets.comments = {};

/**
 * flickr.photosets.comments.addComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.comments.addComment.html
 */

Flickr.prototype.photosets.comments.addComment = function (args) {
	validate(args, 'photoset_id');
	validate(args, 'comment_text');
	return this._('POST', 'flickr.photosets.comments.addComment', args);
};

/**
 * flickr.photosets.comments.deleteComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.comments.deleteComment.html
 */

Flickr.prototype.photosets.comments.deleteComment = function (args) {
	validate(args, 'comment_id');
	return this._('POST', 'flickr.photosets.comments.deleteComment', args);
};

/**
 * flickr.photosets.comments.editComment
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.comments.editComment.html
 */

Flickr.prototype.photosets.comments.editComment = function (args) {
	validate(args, 'comment_id');
	validate(args, 'comment_text');
	return this._('POST', 'flickr.photosets.comments.editComment', args);
};

/**
 * flickr.photosets.comments.getList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.photosets.comments.getList.html
 */

Flickr.prototype.photosets.comments.getList = function (args) {
	validate(args, 'photoset_id');
	return this._('GET', 'flickr.photosets.comments.getList', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.places = {};

/**
 * flickr.places.find
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.find.html
 */

Flickr.prototype.places.find = function (args) {
	validate(args, 'query');
	return this._('GET', 'flickr.places.find', args);
};

/**
 * flickr.places.findByLatLon
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.findByLatLon.html
 */

Flickr.prototype.places.findByLatLon = function (args) {
	validate(args, 'lat');
	validate(args, 'lon');
	return this._('GET', 'flickr.places.findByLatLon', args);
};

/**
 * flickr.places.getChildrenWithPhotosPublic
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getChildrenWithPhotosPublic.html
 */

Flickr.prototype.places.getChildrenWithPhotosPublic = function (args) {
	return this._('GET', 'flickr.places.getChildrenWithPhotosPublic', args);
};

/**
 * flickr.places.getInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getInfo.html
 */

Flickr.prototype.places.getInfo = function (args) {
	return this._('GET', 'flickr.places.getInfo', args);
};

/**
 * flickr.places.getInfoByUrl
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getInfoByUrl.html
 */

Flickr.prototype.places.getInfoByUrl = function (args) {
	validate(args, 'url');
	return this._('GET', 'flickr.places.getInfoByUrl', args);
};

/**
 * flickr.places.getPlaceTypes
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getPlaceTypes.html
 */

Flickr.prototype.places.getPlaceTypes = function (args) {
	return this._('GET', 'flickr.places.getPlaceTypes', args);
};

/**
 * flickr.places.getShapeHistory
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getShapeHistory.html
 */

Flickr.prototype.places.getShapeHistory = function (args) {
	return this._('GET', 'flickr.places.getShapeHistory', args);
};

/**
 * flickr.places.getTopPlacesList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.getTopPlacesList.html
 */

Flickr.prototype.places.getTopPlacesList = function (args) {
	validate(args, 'place_type_id');
	return this._('GET', 'flickr.places.getTopPlacesList', args);
};

/**
 * flickr.places.placesForBoundingBox
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.placesForBoundingBox.html
 */

Flickr.prototype.places.placesForBoundingBox = function (args) {
	validate(args, 'bbox');
	return this._('GET', 'flickr.places.placesForBoundingBox', args);
};

/**
 * flickr.places.placesForContacts
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.placesForContacts.html
 */

Flickr.prototype.places.placesForContacts = function (args) {
	return this._('GET', 'flickr.places.placesForContacts', args);
};

/**
 * flickr.places.placesForTags
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.placesForTags.html
 */

Flickr.prototype.places.placesForTags = function (args) {
	validate(args, 'place_type_id');
	return this._('GET', 'flickr.places.placesForTags', args);
};

/**
 * flickr.places.placesForUser
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.placesForUser.html
 */

Flickr.prototype.places.placesForUser = function (args) {
	return this._('GET', 'flickr.places.placesForUser', args);
};

/**
 * flickr.places.resolvePlaceId
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.resolvePlaceId.html
 */

Flickr.prototype.places.resolvePlaceId = function (args) {
	validate(args, 'place_id');
	return this._('GET', 'flickr.places.resolvePlaceId', args);
};

/**
 * flickr.places.resolvePlaceURL
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.resolvePlaceURL.html
 */

Flickr.prototype.places.resolvePlaceURL = function (args) {
	validate(args, 'url');
	return this._('GET', 'flickr.places.resolvePlaceURL', args);
};

/**
 * flickr.places.tagsForPlace
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.places.tagsForPlace.html
 */

Flickr.prototype.places.tagsForPlace = function (args) {
	return this._('GET', 'flickr.places.tagsForPlace', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.prefs = {};

/**
 * flickr.prefs.getContentType
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.prefs.getContentType.html
 */

Flickr.prototype.prefs.getContentType = function (args) {
	return this._('GET', 'flickr.prefs.getContentType', args);
};

/**
 * flickr.prefs.getGeoPerms
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.prefs.getGeoPerms.html
 */

Flickr.prototype.prefs.getGeoPerms = function (args) {
	return this._('GET', 'flickr.prefs.getGeoPerms', args);
};

/**
 * flickr.prefs.getHidden
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.prefs.getHidden.html
 */

Flickr.prototype.prefs.getHidden = function (args) {
	return this._('GET', 'flickr.prefs.getHidden', args);
};

/**
 * flickr.prefs.getPrivacy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.prefs.getPrivacy.html
 */

Flickr.prototype.prefs.getPrivacy = function (args) {
	return this._('GET', 'flickr.prefs.getPrivacy', args);
};

/**
 * flickr.prefs.getSafetyLevel
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.prefs.getSafetyLevel.html
 */

Flickr.prototype.prefs.getSafetyLevel = function (args) {
	return this._('GET', 'flickr.prefs.getSafetyLevel', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.profile = {};

/**
 * flickr.profile.getProfile
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.profile.getProfile.html
 */

Flickr.prototype.profile.getProfile = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.profile.getProfile', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.push = {};

/**
 * flickr.push.getSubscriptions
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.push.getSubscriptions.html
 */

Flickr.prototype.push.getSubscriptions = function (args) {
	return this._('GET', 'flickr.push.getSubscriptions', args);
};

/**
 * flickr.push.getTopics
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.push.getTopics.html
 */

Flickr.prototype.push.getTopics = function (args) {
	return this._('GET', 'flickr.push.getTopics', args);
};

/**
 * flickr.push.subscribe
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.push.subscribe.html
 */

Flickr.prototype.push.subscribe = function (args) {
	validate(args, 'topic');
	validate(args, 'callback');
	validate(args, 'verify');
	return this._('GET', 'flickr.push.subscribe', args);
};

/**
 * flickr.push.unsubscribe
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.push.unsubscribe.html
 */

Flickr.prototype.push.unsubscribe = function (args) {
	validate(args, 'topic');
	validate(args, 'callback');
	validate(args, 'verify');
	return this._('GET', 'flickr.push.unsubscribe', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.reflection = {};

/**
 * flickr.reflection.getMethodInfo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.reflection.getMethodInfo.html
 */

Flickr.prototype.reflection.getMethodInfo = function (args) {
	validate(args, 'method_name');
	return this._('GET', 'flickr.reflection.getMethodInfo', args);
};

/**
 * flickr.reflection.getMethods
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.reflection.getMethods.html
 */

Flickr.prototype.reflection.getMethods = function (args) {
	return this._('GET', 'flickr.reflection.getMethods', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.stats = {};

/**
 * flickr.stats.getCSVFiles
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getCSVFiles.html
 */

Flickr.prototype.stats.getCSVFiles = function (args) {
	return this._('GET', 'flickr.stats.getCSVFiles', args);
};

/**
 * flickr.stats.getCollectionDomains
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getCollectionDomains.html
 */

Flickr.prototype.stats.getCollectionDomains = function (args) {
	validate(args, 'date');
	return this._('GET', 'flickr.stats.getCollectionDomains', args);
};

/**
 * flickr.stats.getCollectionReferrers
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getCollectionReferrers.html
 */

Flickr.prototype.stats.getCollectionReferrers = function (args) {
	validate(args, 'date');
	validate(args, 'domain');
	return this._('GET', 'flickr.stats.getCollectionReferrers', args);
};

/**
 * flickr.stats.getCollectionStats
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getCollectionStats.html
 */

Flickr.prototype.stats.getCollectionStats = function (args) {
	validate(args, 'date');
	validate(args, 'collection_id');
	return this._('GET', 'flickr.stats.getCollectionStats', args);
};

/**
 * flickr.stats.getPhotoDomains
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotoDomains.html
 */

Flickr.prototype.stats.getPhotoDomains = function (args) {
	validate(args, 'date');
	return this._('GET', 'flickr.stats.getPhotoDomains', args);
};

/**
 * flickr.stats.getPhotoReferrers
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotoReferrers.html
 */

Flickr.prototype.stats.getPhotoReferrers = function (args) {
	validate(args, 'date');
	validate(args, 'domain');
	return this._('GET', 'flickr.stats.getPhotoReferrers', args);
};

/**
 * flickr.stats.getPhotoStats
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotoStats.html
 */

Flickr.prototype.stats.getPhotoStats = function (args) {
	validate(args, 'date');
	validate(args, 'photo_id');
	return this._('GET', 'flickr.stats.getPhotoStats', args);
};

/**
 * flickr.stats.getPhotosetDomains
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotosetDomains.html
 */

Flickr.prototype.stats.getPhotosetDomains = function (args) {
	validate(args, 'date');
	return this._('GET', 'flickr.stats.getPhotosetDomains', args);
};

/**
 * flickr.stats.getPhotosetReferrers
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotosetReferrers.html
 */

Flickr.prototype.stats.getPhotosetReferrers = function (args) {
	validate(args, 'date');
	validate(args, 'domain');
	return this._('GET', 'flickr.stats.getPhotosetReferrers', args);
};

/**
 * flickr.stats.getPhotosetStats
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotosetStats.html
 */

Flickr.prototype.stats.getPhotosetStats = function (args) {
	validate(args, 'date');
	validate(args, 'photoset_id');
	return this._('GET', 'flickr.stats.getPhotosetStats', args);
};

/**
 * flickr.stats.getPhotostreamDomains
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotostreamDomains.html
 */

Flickr.prototype.stats.getPhotostreamDomains = function (args) {
	validate(args, 'date');
	return this._('GET', 'flickr.stats.getPhotostreamDomains', args);
};

/**
 * flickr.stats.getPhotostreamReferrers
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotostreamReferrers.html
 */

Flickr.prototype.stats.getPhotostreamReferrers = function (args) {
	validate(args, 'date');
	validate(args, 'domain');
	return this._('GET', 'flickr.stats.getPhotostreamReferrers', args);
};

/**
 * flickr.stats.getPhotostreamStats
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPhotostreamStats.html
 */

Flickr.prototype.stats.getPhotostreamStats = function (args) {
	validate(args, 'date');
	return this._('GET', 'flickr.stats.getPhotostreamStats', args);
};

/**
 * flickr.stats.getPopularPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getPopularPhotos.html
 */

Flickr.prototype.stats.getPopularPhotos = function (args) {
	return this._('GET', 'flickr.stats.getPopularPhotos', args);
};

/**
 * flickr.stats.getTotalViews
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.stats.getTotalViews.html
 */

Flickr.prototype.stats.getTotalViews = function (args) {
	return this._('GET', 'flickr.stats.getTotalViews', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.tags = {};

/**
 * flickr.tags.getClusterPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getClusterPhotos.html
 */

Flickr.prototype.tags.getClusterPhotos = function (args) {
	validate(args, 'tag');
	validate(args, 'cluster_id');
	return this._('GET', 'flickr.tags.getClusterPhotos', args);
};

/**
 * flickr.tags.getClusters
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getClusters.html
 */

Flickr.prototype.tags.getClusters = function (args) {
	validate(args, 'tag');
	return this._('GET', 'flickr.tags.getClusters', args);
};

/**
 * flickr.tags.getHotList
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getHotList.html
 */

Flickr.prototype.tags.getHotList = function (args) {
	return this._('GET', 'flickr.tags.getHotList', args);
};

/**
 * flickr.tags.getListPhoto
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getListPhoto.html
 */

Flickr.prototype.tags.getListPhoto = function (args) {
	validate(args, 'photo_id');
	return this._('GET', 'flickr.tags.getListPhoto', args);
};

/**
 * flickr.tags.getListUser
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getListUser.html
 */

Flickr.prototype.tags.getListUser = function (args) {
	return this._('GET', 'flickr.tags.getListUser', args);
};

/**
 * flickr.tags.getListUserPopular
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getListUserPopular.html
 */

Flickr.prototype.tags.getListUserPopular = function (args) {
	return this._('GET', 'flickr.tags.getListUserPopular', args);
};

/**
 * flickr.tags.getListUserRaw
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getListUserRaw.html
 */

Flickr.prototype.tags.getListUserRaw = function (args) {
	return this._('GET', 'flickr.tags.getListUserRaw', args);
};

/**
 * flickr.tags.getMostFrequentlyUsed
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getMostFrequentlyUsed.html
 */

Flickr.prototype.tags.getMostFrequentlyUsed = function (args) {
	return this._('GET', 'flickr.tags.getMostFrequentlyUsed', args);
};

/**
 * flickr.tags.getRelated
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.tags.getRelated.html
 */

Flickr.prototype.tags.getRelated = function (args) {
	validate(args, 'tag');
	return this._('GET', 'flickr.tags.getRelated', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.test = {};

/**
 * flickr.test.echo
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.test.echo.html
 */

Flickr.prototype.test.echo = function (args) {
	return this._('GET', 'flickr.test.echo', args);
};

/**
 * flickr.test.login
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.test.login.html
 */

Flickr.prototype.test.login = function (args) {
	return this._('GET', 'flickr.test.login', args);
};

/**
 * flickr.test.null
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.test.null.html
 */

Flickr.prototype.test.null = function (args) {
	return this._('GET', 'flickr.test.null', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.testimonials = {};

/**
 * flickr.testimonials.addTestimonial
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.addTestimonial.html
 */

Flickr.prototype.testimonials.addTestimonial = function (args) {
	validate(args, 'user_id');
	validate(args, 'testimonial_text');
	return this._('POST', 'flickr.testimonials.addTestimonial', args);
};

/**
 * flickr.testimonials.approveTestimonial
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.approveTestimonial.html
 */

Flickr.prototype.testimonials.approveTestimonial = function (args) {
	validate(args, 'testimonial_id');
	return this._('POST', 'flickr.testimonials.approveTestimonial', args);
};

/**
 * flickr.testimonials.deleteTestimonial
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.deleteTestimonial.html
 */

Flickr.prototype.testimonials.deleteTestimonial = function (args) {
	validate(args, 'testimonial_id');
	return this._('POST', 'flickr.testimonials.deleteTestimonial', args);
};

/**
 * flickr.testimonials.editTestimonial
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.editTestimonial.html
 */

Flickr.prototype.testimonials.editTestimonial = function (args) {
	validate(args, 'user_id');
	validate(args, 'testimonial_id');
	validate(args, 'testimonial_text');
	return this._('POST', 'flickr.testimonials.editTestimonial', args);
};

/**
 * flickr.testimonials.getAllTestimonialsAbout
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsAbout.html
 */

Flickr.prototype.testimonials.getAllTestimonialsAbout = function (args) {
	return this._('GET', 'flickr.testimonials.getAllTestimonialsAbout', args);
};

/**
 * flickr.testimonials.getAllTestimonialsAboutBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsAboutBy.html
 */

Flickr.prototype.testimonials.getAllTestimonialsAboutBy = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.testimonials.getAllTestimonialsAboutBy', args);
};

/**
 * flickr.testimonials.getAllTestimonialsBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getAllTestimonialsBy.html
 */

Flickr.prototype.testimonials.getAllTestimonialsBy = function (args) {
	return this._('GET', 'flickr.testimonials.getAllTestimonialsBy', args);
};

/**
 * flickr.testimonials.getPendingTestimonialsAbout
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsAbout.html
 */

Flickr.prototype.testimonials.getPendingTestimonialsAbout = function (args) {
	return this._('GET', 'flickr.testimonials.getPendingTestimonialsAbout', args);
};

/**
 * flickr.testimonials.getPendingTestimonialsAboutBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsAboutBy.html
 */

Flickr.prototype.testimonials.getPendingTestimonialsAboutBy = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.testimonials.getPendingTestimonialsAboutBy', args);
};

/**
 * flickr.testimonials.getPendingTestimonialsBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getPendingTestimonialsBy.html
 */

Flickr.prototype.testimonials.getPendingTestimonialsBy = function (args) {
	return this._('GET', 'flickr.testimonials.getPendingTestimonialsBy', args);
};

/**
 * flickr.testimonials.getTestimonialsAbout
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsAbout.html
 */

Flickr.prototype.testimonials.getTestimonialsAbout = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.testimonials.getTestimonialsAbout', args);
};

/**
 * flickr.testimonials.getTestimonialsAboutBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsAboutBy.html
 */

Flickr.prototype.testimonials.getTestimonialsAboutBy = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.testimonials.getTestimonialsAboutBy', args);
};

/**
 * flickr.testimonials.getTestimonialsBy
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.testimonials.getTestimonialsBy.html
 */

Flickr.prototype.testimonials.getTestimonialsBy = function (args) {
	validate(args, 'user_id');
	return this._('GET', 'flickr.testimonials.getTestimonialsBy', args);
};

/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.urls = {};

/**
 * flickr.urls.getGroup
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.getGroup.html
 */

Flickr.prototype.urls.getGroup = function (args) {
	validate(args, 'group_id');
	return this._('GET', 'flickr.urls.getGroup', args);
};

/**
 * flickr.urls.getUserPhotos
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.getUserPhotos.html
 */

Flickr.prototype.urls.getUserPhotos = function (args) {
	return this._('GET', 'flickr.urls.getUserPhotos', args);
};

/**
 * flickr.urls.getUserProfile
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.getUserProfile.html
 */

Flickr.prototype.urls.getUserProfile = function (args) {
	return this._('GET', 'flickr.urls.getUserProfile', args);
};

/**
 * flickr.urls.lookupGallery
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.lookupGallery.html
 */

Flickr.prototype.urls.lookupGallery = function (args) {
	validate(args, 'url');
	return this._('GET', 'flickr.urls.lookupGallery', args);
};

/**
 * flickr.urls.lookupGroup
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.lookupGroup.html
 */

Flickr.prototype.urls.lookupGroup = function (args) {
	validate(args, 'url');
	return this._('GET', 'flickr.urls.lookupGroup', args);
};

/**
 * flickr.urls.lookupUser
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see https://www.flickr.com/services/api/flickr.urls.lookupUser.html
 */

Flickr.prototype.urls.lookupUser = function (args) {
	validate(args, 'url');
	return this._('GET', 'flickr.urls.lookupUser', args);
};


module.exports = Flickr;

},{"../lib/request":2,"../lib/validate":3,"../plugins/json":73}],79:[function(require,module,exports){
/*!
 * Copyright 2017 Yahoo Holdings.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var Request = require('../lib/request').Request;
var xml = require('../plugins/xml');

/**
 * Creates a new Upload service instance. Since the Upload API only
 * does one thing (upload files), an Upload instance is simply
 * a Request subclass.
 *
 * The Upload endpoint requires authentication. You should pass a configured
 * instance of the [OAuth plugin]{@link Flickr.OAuth.createPlugin} to upload
 * photos on behalf of another user.
 *
 * @param {Function} auth
 * @param {String|fs.ReadStream|Buffer} file
 * @param {Object} [args]
 * @constructor
 * @extends Request
 * @memberof Flickr
 *
 * @example
 *
 * var upload = new Flickr.Upload(auth, 'upload.png', {
 *   title: 'Works on MY machine!'
 * });
 *
 * upload.then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @see https://www.flickr.com/services/api/upload.api.html
 */

function Upload(auth, file, args) {

	// allow creating a client without `new`
	if (!(this instanceof Upload)) {
		return new Upload(auth, file, args);
	}

	Request.call(this, 'POST', 'https://up.flickr.com/services/upload');

	if (typeof auth !== 'function') {
		throw new Error('Missing required argument "auth"');
	}

	if (typeof args === 'undefined') {
		args = {};
	}

	this.attach('photo', file);
	this.field(args);
	this.use(xml);
	this.use(auth);
}

Upload.prototype = Object.create(Request.prototype);

module.exports = Upload;

},{"../lib/request":2,"../plugins/xml":74}]},{},[1])(1)
});
});

var EffectName$5 = 'Flickr Image';
var EffectDescription$5 = 'Changes the underlying image to one loaded from Flickr\'s recent images feed';
var Attribution = 'This product uses the Flickr API but is not endorsed or certified by Flickr.';
var ApiKey = 'bbd60ce148c0a1dedcaaffd228a03264';

var FlickrImageConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function FlickrImageConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-flickr-img';
    var searchInputClass = classPrefix + "-search-term";
    this.element = parseHtml(("\n      <div>\n        " + Attribution + "\n        <fieldset>\n          <legend>" + EffectName$5 + "</legend>\n          <label>\n            Search term:\n            <input type=\"text\" class=\"" + searchInputClass + "\"/>\n          </label>\n          " + (imageScalingMarkup(classPrefix)) + "\n        </fieldset>\n      </div>\n    "));
    var ui = this.element;
    this.scalingSelect = ui.querySelector(("select." + classPrefix + "-scaling-select"));
    this.scalingSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropXSelect = ui.querySelector(("select." + classPrefix + "-crop-x-select"));
    this.cropXSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropYSelect = ui.querySelector(("select." + classPrefix + "-crop-y-select"));
    this.cropYSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.searchTermInput = this.element.querySelector(("." + searchInputClass));
    this.searchTermInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) FlickrImageConfigUI.__proto__ = ConfigUI$$1;
  FlickrImageConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  FlickrImageConfigUI.prototype.constructor = FlickrImageConfigUI;

  FlickrImageConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  FlickrImageConfigUI.prototype.getConfig = function getConfig () {
    var config = {};

    config.searchTerm = this.searchTermInput.value;
    config.imageScaling = this.scalingSelect.value;
    config.imageCropping = {
      x: this.cropXSelect.value,
      y: this.cropYSelect.value
    };

    return config;
  };

  FlickrImageConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.searchTermInput.value = config.searchTerm;
    this.scalingSelect.value = config.imageScaling || 'crop-to-viewport';
    var imageCropping = config.imageCropping || { x: 'crop-both', y: 'crop-both' };
    this.cropXSelect.value = imageCropping.x;
    this.cropYSelect.value = imageCropping.y;
  };

  return FlickrImageConfigUI;
}(ConfigUI));

/// This constant is used both for defining how many images the
/// FlickrImageCache will pre-load for a given search term as well as
/// how many images a FlickrImageEffect will reserve for future use
var prefetchCount = 5;

var FlickrCacheEntry = function FlickrCacheEntry() {
  /// The current position in the stream of photos that this entry
  /// loads images for
  this.page = 1;
  /// Needed to keep track of where the ever growing stream of images
  /// started for us. We can't just assume that "page #1" will always
  /// stay the same, or we risk loading the same image multiple times.
  this.initialQueryTime = Math.floor(Date.now() / 1000);
  /// Pending queries need to be taken into account when deciding whether
  /// or not new flickr api calls should be made
  this.loadsInProgress = 0;
  /// This is the acutal image cache
  this.loadedImgs = [];
  /// If a query cannot be answered right away by this cache entry, we
  /// queue it in this array. So when a new image finishes loading, we
  /// resolve the request at the front of this queue with it.
  this.requests = [];
};

/**
 * The FlickrImageCache manages the process of loading images from flickr.
 * Therefore, it has to select "new" images from flickr and then download
 * the best version available. For efficiency, FlickrImageCache also kicks
 * off the loading process for multiple images at once, so that future
 * queries for the same search term may be resolved faster.
 */
var FlickrImageCache = function FlickrImageCache() {
  this.flickr = new flickrSdk(ApiKey);
  /// a dictionary mapping search queries to FlickrCachEntries
  this.byQuery = {};
};

/// Props will be used to select versions of images which best match
/// the particle grid dimensions (xParticlesCount/yParticlesCount)
FlickrImageCache.prototype.setProps = function setProps (props) {
  this.props = props;
};

/// @return a promise that resolves to flickr api return values
FlickrImageCache.prototype.runFlickrQuery = function runFlickrQuery (searchTerm) {
  var entry = this.getEntryForSearchTerm(searchTerm);

  var onResponse = function (response) {
    var parsed = JSON.parse(response.text);
    // since page is 1-indexed, a real greater is necessary
    if (entry.page > parsed.photos.pages) {
      entry.page = 1;
    }
    return parsed;
  };
  // Two different flickr apis, depending on search string content
  var query = null;
  if (searchTerm === '') {
    query = this.flickr
    .photos
    .getRecent({
      per_page: prefetchCount,
      page: entry.page,
      max_upload_date: entry.initialQueryTime
    }).then(onResponse);
  } else {
    query = this.flickr
    .photos
    .search({
      text: searchTerm,
      per_page: prefetchCount,
      page: entry.page,
      max_upload_date: entry.initialQueryTime
    }).then(onResponse);
  }
  entry.loadsInProgress += prefetchCount;
  entry.page = entry.page + 1;
  return query;
};

/// For each photo in a flickr query response, request the image (i.e.
/// the versions available on flickr), select the best version for the
/// current rendering configuration and load the image from flickr.
///
/// @return a list of promises each representing a loading process. I.e.
///       when one of the promises resolves, either a pending request
///       will have been resolved or a new image is pushed into the
///       image cache.
FlickrImageCache.prototype.processSearchQueryResponse = function processSearchQueryResponse (response, entry) {
  var loadQueue = [];
  for (var i = 0; i < response.photos.photo.length; i++) {
    loadQueue.push(this.processPhoto(response.photos.photo[i], entry));
  }
  return loadQueue;
};

/// We want to exclude all cropped versions (= all versions cropped
/// to squares) and we don't want to load higher resoultions than
/// necessary
FlickrImageCache.prototype.selectBestImageVersion = function selectBestImageVersion (sizes) {
    var this$1 = this;

  var best = sizes.sizes.size.find(function (size) {
    if (size.label.indexOf('Square') >= 0) {
      return false;
    }
    return size.width >= this$1.props.config.xParticlesCount;
  }) || sizes.sizes.size[sizes.sizes.size.length - 1];
  return best;
};

/// Kicks of the loading process for a given flickr photo. I.e., request
/// the list of available image versions, select the most appropriate
/// version and load that. Finally, resolve a pending cache request
/// with it or push the result into the cache
///
/// @return a promise representing the loading process for @p photo
FlickrImageCache.prototype.processPhoto = function processPhoto (photo, entry) {
    var this$1 = this;

  return this.flickr.photos.getSizes({
    photo_id: photo.id
  }).then(function (sizes) {
    var parsed = JSON.parse(sizes.text);
    var original = this$1.selectBestImageVersion(parsed);
    var url = original.source;
    var loader = document.createElement('img');
    loader.crossOrigin = 'Anonymous';
    loader.src = url;
    loader.onload = function () {
      entry.loadsInProgress = entry.loadsInProgress - 1;
      if (entry.requests.length > 0) {
        // resolve pending request directly
        var request = entry.requests.shift();
        request(loader);
      } else {
        entry.loadedImgs.push(loader);
      }
    };
  });
};

/// Looks up and returns the FlickrCacheEntry corresponding to the given
/// @p searchTerm
FlickrImageCache.prototype.getEntryForSearchTerm = function getEntryForSearchTerm (searchTerm) {
  if (!this.byQuery[searchTerm]) {
    this.byQuery[searchTerm] = new FlickrCacheEntry();
  }
  return this.byQuery[searchTerm];
};

/// Decides whether the loading process of new images for a search term
/// (represented by the corresponding @p entry) should be kicked off,
/// depending of how many loaded images are still available and how
/// many images are still in-flight.
FlickrImageCache.prototype.shouldFireNewQuery = function shouldFireNewQuery (entry) {
  if (entry.loadsInProgress + entry.loadedImgs.length -
      entry.requests.length < prefetchCount
  ) {
    return true;
  }
  return false;
};

/// This is FlickrImageCache's main api: Give this method a @p
/// searchTerm and it returns a promise that will eventually resolve to
/// a DOM Image matching the @p searchTerm.
///
/// @return a Promise that will resolve to a DOM Image object matching
///       the given @p searchTerm
FlickrImageCache.prototype.getImageForSearchTerm = function getImageForSearchTerm (searchTerm) {
    var this$1 = this;

  var entry = this.getEntryForSearchTerm(searchTerm);
  if (entry.loadedImgs.length === 0) {
    return new Promise(function (res, rej) {
      entry.requests.push(res);
      if (this$1.shouldFireNewQuery(entry)) {
        this$1.runFlickrQuery(searchTerm, entry)
        .then(function (response) { return this$1.processSearchQueryResponse(response, entry); });
      }
    });
  } else {
    return Promise.resolve(entry.loadedImgs.shift());
  }
};

var FlickrImageEffect = /*@__PURE__*/(function (Effect$$1) {
  function FlickrImageEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) FlickrImageEffect.__proto__ = Effect$$1;
  FlickrImageEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  FlickrImageEffect.prototype.constructor = FlickrImageEffect;

  FlickrImageEffect.registerAsync = function registerAsync (instance, props) {
    var cache = FlickrImageEffect.getCache(props);
    var img2pd = function (image) {
      return props.state.createParticleDataFromDomImg(
        image, instance.config.imageScaling, instance.config.imageCropping
      );
    };
    return cache.getImageForSearchTerm(instance.config.searchTerm)
    .then(function (image) {
      var particleData = img2pd(image);
      var particleDataQueue = [particleData];
      // We want to have some images pre-allocated to this effect
      for (var i = 1; i < prefetchCount; i++) {
        cache.getImageForSearchTerm(instance.config.searchTerm)
        .then(function (image) {
          var particleData = img2pd(image);
          particleDataQueue.push(particleData);
        });
      }

      var alive = true;
      var displayed = -1;
      // Run this in a loop to check if we need to update the image
      var checkTime = function () {
        if (!alive) {
          return;
        }
        var tDist = props.clock.getTime() - instance.timeBegin;
        if (tDist >= 0 && tDist <= props.clock.getDelta()) {
          // free unneeded resources when we proceed to the next image
          var freed = -1;
          if (displayed !== -1 && particleDataQueue.length > 1) {
            freed = particleDataQueue.shift();
          }
          displayed = particleDataQueue[0];
          props.state.setParticleData(displayed);
          // do the free AFTER we setParticleData to a new one
          if (freed !== -1) {
            props.state.destroyParticleData(freed);
            // also look for a replacement
            cache.getImageForSearchTerm(instance.config.searchTerm)
            .then(function (image) {
              var particleData = img2pd(image);
              particleDataQueue.push(particleData);
            });
          }
        }
        window.requestAnimationFrame(checkTime);
      };
      checkTime();
      props.state.addHook(function () {
        alive = false;
      });
    });
  };

  FlickrImageEffect.getDisplayName = function getDisplayName () {
    return EffectName$5;
  };

  FlickrImageEffect.getDescription = function getDescription () {
    return EffectDescription$5;
  };

  FlickrImageEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new FlickrImageConfigUI();
    }

    return this._configUI;
  };

  FlickrImageEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      searchTerm: '',
      imageScaling: 'crop-to-viewport',
      imageCropping: {
        x: 'crop-both',
        y: 'crop-both'
      }
    };
  };

  FlickrImageEffect.getRandomConfig = function getRandomConfig () {
    return this.getDefaultConfig();
  };

  FlickrImageEffect.getCache = function getCache (props) {
    if (!this._cache) {
      this._cache = new FlickrImageCache();
    }
    this._cache.setProps(props);

    return this._cache;
  };

  FlickrImageEffect.isEventOnly = function isEventOnly () {
    return true;
  };

  return FlickrImageEffect;
}(Effect));

var Framebuffer = function Framebuffer(regl) {
  this.texture = regl.texture({ width: 1, height: 1, min: 'linear', mag: 'linear' }); // call resize before first use !
  this.framebuffer = regl.framebuffer({ color: this.texture, depth: false, stencil: false, depthStencil: false });
};

Framebuffer.prototype.resize = function resize (width, height) {
  this.framebuffer.resize(width, height);
};

var FullscreenRectCommand = function FullscreenRectCommand() {
  this.vert = "\n      precision highp float;\n      attribute vec2 v_texcoord;\n      varying vec2 texcoord;\n      void main() {\n        texcoord = v_texcoord;\n        gl_Position = vec4(v_texcoord * vec2(2) - vec2(1), 0, 1);\n      }\n    ";
  this.attributes = {
    v_texcoord: [[0, 0], [1, 0], [0, 1], [1, 1]]
  };
  this.depth = false;
  this.primitive = 'triangle strip';
  this.count = 4;
};

var Shader = function Shader() {
  this.attributes = '';
  this.uniforms = '';
  this.varyings = '';
  this.globals = '';
  this.functions = '';
  this.mainBody = '';
};

Shader.prototype.compile = function compile () {
  return ("\n      precision highp float;\n      precision highp int;\n\n      // Attributes\n      " + (this.attributes) + "\n\n      // Uniforms\n      " + (this.uniforms) + "\n\n      // Varyings\n      " + (this.varyings) + "\n\n      // Globals\n      " + (this.globals) + "\n\n      // Functions\n      " + (this.functions) + "\n\n      void main() {\n        " + (this.mainBody) + "\n      }\n    ");
};

var ShaderData = function ShaderData(id, type) {
  this.data = [];
  this.id = id;
  this.type = type;
};
ShaderData.prototype.add = function add (name, type, value) {
  var entry = { name: name, type: type, value: value };
  this.data.push(entry);

  return this.getNameFor(entry);
};
ShaderData.prototype.getNameFor = function getNameFor (entry) {
  if (this.id === undefined) {
    return entry.name;
  } else {
    return ((entry.name) + "_" + (this.id));
  }
};
ShaderData.prototype.getCompiled = function getCompiled (shader, storage) {
    if ( storage === void 0 ) storage = null;

  var shaderStr = [];
  for (var i = 0; i < this.data.length; i++) {
    var entry = this.data[i];
    shaderStr.push(((this.type) + " " + (entry.type) + " " + (this.getNameFor(entry)) + ";"));
    if (storage !== null) {
      // eslint-disable-next-line no-param-reassign
      storage[this.getNameFor(entry)] = entry.value;
    }
  }
  return shaderStr.join('\n') + '\n';
};

var Uniforms = /*@__PURE__*/(function (ShaderData) {
  function Uniforms(id) {
    ShaderData.call(this, id, 'uniform');
  }

  if ( ShaderData ) Uniforms.__proto__ = ShaderData;
  Uniforms.prototype = Object.create( ShaderData && ShaderData.prototype );
  Uniforms.prototype.constructor = Uniforms;
  Uniforms.prototype.addUniform = function addUniform (name, type, value) {
    return this.add(name, type, value);
  };
  Uniforms.prototype.compile = function compile (shader, uniforms) {
    if ( uniforms === void 0 ) uniforms = null;

    // eslint-disable-next-line no-param-reassign
    shader.uniforms += this.getCompiled(shader, uniforms);
  };

  return Uniforms;
}(ShaderData));

var Attributes = /*@__PURE__*/(function (ShaderData) {
  function Attributes(id) {
    ShaderData.call(this, id, 'attribute');
  }

  if ( ShaderData ) Attributes.__proto__ = ShaderData;
  Attributes.prototype = Object.create( ShaderData && ShaderData.prototype );
  Attributes.prototype.constructor = Attributes;
  Attributes.prototype.addAttribute = function addAttribute (name, type, value) {
    return this.add(name, type, value);
  };
  Attributes.prototype.compile = function compile (shader, attributes) {
    if ( attributes === void 0 ) attributes = null;

    // eslint-disable-next-line no-param-reassign
    shader.attributes += this.getCompiled(shader, attributes);
  };

  return Attributes;
}(ShaderData));

var AccumulationAgent = function AccumulationAgent(instance) {
  this.instance = instance;
};
AccumulationAgent.prototype.getFragmentCode = function getFragmentCode () {
  throw new Error('Not implemented');
};

var AccumulationEffect = /*@__PURE__*/(function (Effect$$1) {
  function AccumulationEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) AccumulationEffect.__proto__ = Effect$$1;
  AccumulationEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  AccumulationEffect.prototype.constructor = AccumulationEffect;

  AccumulationEffect.getAgentClass = function getAgentClass (/* instance */) {
    throw new Error('Not implemented');
  };

  AccumulationEffect.register = function register (instance, props) {
    var AgentClass = this.getAgentClass();
    var agent = new AgentClass(instance);
    props.state.pipeline.addAccumulationAgent(agent);
  };

  AccumulationEffect.supportsRepetition = function supportsRepetition () {
    return false;
  };

  return AccumulationEffect;
}(Effect));

var EffectName$6 = 'Trails';
var EffectDescription$6 = 'Enables an fading image echo';

var TrailsConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function TrailsConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$6 + "</legend>\n        <label>\n          Fade-in:\n          <input type=\"number\" class=\"effect-trails-fadein\" value=\"100\" />ms\n        </label><br/>\n        <label>\n          Fade-out:\n          <input type=\"number\" class=\"effect-trails-fadeout\" value=\"500\" />ms\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.fadeinInput = ui.querySelector('.effect-trails-fadein');
    this.fadeoutInput = ui.querySelector('.effect-trails-fadeout');

    this.fadeinInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.fadeoutInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) TrailsConfigUI.__proto__ = ConfigUI$$1;
  TrailsConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  TrailsConfigUI.prototype.constructor = TrailsConfigUI;

  TrailsConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  TrailsConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.fadein = parseInt(this.fadeinInput.value, 10);
    config.fadeout = parseInt(this.fadeoutInput.value, 10);

    return config;
  };

  TrailsConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.fadeinInput.value = config.fadein;
    this.fadeoutInput.value = config.fadeout;
  };

  return TrailsConfigUI;
}(ConfigUI));

var TrailsAgent = /*@__PURE__*/(function (AccumulationAgent$$1) {
  function TrailsAgent(instance) {
    AccumulationAgent$$1.call(this, instance);
  }

  if ( AccumulationAgent$$1 ) TrailsAgent.__proto__ = AccumulationAgent$$1;
  TrailsAgent.prototype = Object.create( AccumulationAgent$$1 && AccumulationAgent$$1.prototype );
  TrailsAgent.prototype.constructor = TrailsAgent;
  TrailsAgent.prototype.getFragmentCode = function getFragmentCode (uniforms) {
    return "\n      accumulationEffectResult = mix(particleColor, historyColor, 0.7);\n    ";
  };

  return TrailsAgent;
}(AccumulationAgent));

var TrailsEffect = /*@__PURE__*/(function (AccumulationEffect$$1) {
  function TrailsEffect () {
    AccumulationEffect$$1.apply(this, arguments);
  }

  if ( AccumulationEffect$$1 ) TrailsEffect.__proto__ = AccumulationEffect$$1;
  TrailsEffect.prototype = Object.create( AccumulationEffect$$1 && AccumulationEffect$$1.prototype );
  TrailsEffect.prototype.constructor = TrailsEffect;

  TrailsEffect.getAgentClass = function getAgentClass () {
    return TrailsAgent;
  };

  TrailsEffect.getDisplayName = function getDisplayName () {
    return EffectName$6;
  };

  TrailsEffect.getDescription = function getDescription () {
    return EffectDescription$6;
  };

  TrailsEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new TrailsConfigUI();
    }

    return this._configUI;
  };

  TrailsEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      fadein: 100,
      fadeout: 500
    };
  };

  TrailsEffect.getRandomConfig = function getRandomConfig () {
    return this.getDefaultConfig();
  };

  return TrailsEffect;
}(AccumulationEffect));

var EffectName$7 = 'Smooth trails';
var EffectDescription$7 = 'Enables an smoother fading image echo';

var SmoothTrailsConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function SmoothTrailsConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$7 + "</legend>\n        <label>\n          Fade-in:\n          <input type=\"number\" class=\"effect-smooth-trails-fadein\" value=\"100\" />ms\n        </label><br/>\n        <label>\n          Fade-out:\n          <input type=\"number\" class=\"effect-smooth-trails-fadeout\" value=\"500\" />ms\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.fadeinInput = ui.querySelector('.effect-smooth-trails-fadein');
    this.fadeoutInput = ui.querySelector('.effect-smooth-trails-fadeout');

    this.fadeinInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.fadeoutInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) SmoothTrailsConfigUI.__proto__ = ConfigUI$$1;
  SmoothTrailsConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  SmoothTrailsConfigUI.prototype.constructor = SmoothTrailsConfigUI;

  SmoothTrailsConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  SmoothTrailsConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.fadein = parseInt(this.fadeinInput.value, 10);
    config.fadeout = parseInt(this.fadeoutInput.value, 10);

    return config;
  };

  SmoothTrailsConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.fadeinInput.value = config.fadein;
    this.fadeoutInput.value = config.fadeout;
  };

  return SmoothTrailsConfigUI;
}(ConfigUI));

var SmoothTrailsAgent = /*@__PURE__*/(function (AccumulationAgent$$1) {
  function SmoothTrailsAgent(instance) {
    AccumulationAgent$$1.call(this, instance);
  }

  if ( AccumulationAgent$$1 ) SmoothTrailsAgent.__proto__ = AccumulationAgent$$1;
  SmoothTrailsAgent.prototype = Object.create( AccumulationAgent$$1 && AccumulationAgent$$1.prototype );
  SmoothTrailsAgent.prototype.constructor = SmoothTrailsAgent;

  SmoothTrailsAgent.prototype.getFragmentCode = function getFragmentCode (uniforms) {
    var kernelSize = uniforms.addUniform('kernelSize', 'vec2', function (ctx, props) {
      return [4 / props.state.getWidth(), 4 / props.state.getHeight()];
    });
    return ("\n      vec3 color = /* texture2D(historyTexture, vec2(texcoord.x, texcoord.y)).rgb * .2 + */\n        texture2D(historyTexture, vec2(texcoord.x + " + kernelSize + ".x, texcoord.y)).rgb * .25 +\n        texture2D(historyTexture, vec2(texcoord.x - " + kernelSize + ".x, texcoord.y)).rgb * .25 +\n        texture2D(historyTexture, vec2(texcoord.x, texcoord.y + " + kernelSize + ".y)).rgb * .25 +\n        texture2D(historyTexture, vec2(texcoord.x, texcoord.y - " + kernelSize + ".y)).rgb * .25;\n      accumulationEffectResult = mix(particleColor, color, 0.8);\n    ");
  };

  return SmoothTrailsAgent;
}(AccumulationAgent));

var SmoothTrailsEffect = /*@__PURE__*/(function (AccumulationEffect$$1) {
  function SmoothTrailsEffect () {
    AccumulationEffect$$1.apply(this, arguments);
  }

  if ( AccumulationEffect$$1 ) SmoothTrailsEffect.__proto__ = AccumulationEffect$$1;
  SmoothTrailsEffect.prototype = Object.create( AccumulationEffect$$1 && AccumulationEffect$$1.prototype );
  SmoothTrailsEffect.prototype.constructor = SmoothTrailsEffect;

  SmoothTrailsEffect.getAgentClass = function getAgentClass () {
    return SmoothTrailsAgent;
  };

  SmoothTrailsEffect.getDisplayName = function getDisplayName () {
    return EffectName$7;
  };

  SmoothTrailsEffect.getDescription = function getDescription () {
    return EffectDescription$7;
  };

  SmoothTrailsEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new SmoothTrailsConfigUI();
    }

    return this._configUI;
  };

  SmoothTrailsEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      fadein: 100,
      fadeout: 500
    };
  };

  SmoothTrailsEffect.getRandomConfig = function getRandomConfig () {
    return this.getDefaultConfig();
  };

  return SmoothTrailsEffect;
}(AccumulationEffect));

var EffectName$8 = 'Smear';
var EffectDescription$8 = 'Smears the image in a circular way';

var SmearConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function SmearConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$8 + "</legend>\n        <label>\n          Fade-in:\n          <input type=\"number\" class=\"effect-smear-fadein\" value=\"100\" />ms\n        </label><br/>\n        <label>\n          Fade-out:\n          <input type=\"number\" class=\"effect-smear-fadeout\" value=\"500\" />ms\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.fadeinInput = ui.querySelector('.effect-smear-fadein');
    this.fadeoutInput = ui.querySelector('.effect-smear-fadeout');

    this.fadeinInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.fadeoutInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) SmearConfigUI.__proto__ = ConfigUI$$1;
  SmearConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  SmearConfigUI.prototype.constructor = SmearConfigUI;

  SmearConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  SmearConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.fadein = parseInt(this.fadeinInput.value, 10);
    config.fadeout = parseInt(this.fadeoutInput.value, 10);

    return config;
  };

  SmearConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.fadeinInput.value = config.fadein;
    this.fadeoutInput.value = config.fadeout;
  };

  return SmearConfigUI;
}(ConfigUI));

var SmearAgent = /*@__PURE__*/(function (AccumulationAgent$$1) {
  function SmearAgent(instance) {
    AccumulationAgent$$1.call(this, instance);
  }

  if ( AccumulationAgent$$1 ) SmearAgent.__proto__ = AccumulationAgent$$1;
  SmearAgent.prototype = Object.create( AccumulationAgent$$1 && AccumulationAgent$$1.prototype );
  SmearAgent.prototype.constructor = SmearAgent;
  SmearAgent.prototype.getFragmentCode = function getFragmentCode (uniforms) {
    var invTextureSize = uniforms.addUniform('invTextureSize', 'vec2', function (ctx, props) {
      return [1 / props.state.getWidth(), 1 / props.state.getHeight()];
    });
    return ("\n      vec2 smearDir = vec2(-texcoord.y + .5, texcoord.x - .5);\n      vec3 color = texture2D(historyTexture, texcoord + smearDir * " + invTextureSize + " * 8.).rgb;\n      accumulationEffectResult = mix(particleColor, color, 0.8);\n    ");
  };

  return SmearAgent;
}(AccumulationAgent));

var SmearEffect = /*@__PURE__*/(function (AccumulationEffect$$1) {
  function SmearEffect () {
    AccumulationEffect$$1.apply(this, arguments);
  }

  if ( AccumulationEffect$$1 ) SmearEffect.__proto__ = AccumulationEffect$$1;
  SmearEffect.prototype = Object.create( AccumulationEffect$$1 && AccumulationEffect$$1.prototype );
  SmearEffect.prototype.constructor = SmearEffect;

  SmearEffect.getAgentClass = function getAgentClass () {
    return SmearAgent;
  };

  SmearEffect.getDisplayName = function getDisplayName () {
    return EffectName$8;
  };

  SmearEffect.getDescription = function getDescription () {
    return EffectDescription$8;
  };

  SmearEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new SmearConfigUI();
    }

    return this._configUI;
  };

  SmearEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      fadein: 100,
      fadeout: 500
    };
  };

  SmearEffect.getRandomConfig = function getRandomConfig () {
    return this.getDefaultConfig();
  };

  return SmearEffect;
}(AccumulationEffect));

var EffectName$9 = 'Standing Wave';
var EffectDescription$9 = 'A standing wave oscillates';

var StandingWaveConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function StandingWaveConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$9 + "</legend>\n        <label>\n          Max Amplitude:\n          <input type=\"number\" class=\"effect-standing-wave-max-amplitude\" value=\"0.05\" />\n        </label><br/>\n        <label>\n          Wave count:\n          <input type=\"number\" min=\"1\" step=\"1\" class=\"effect-standing-wave-wave-count\" value=\"20\" />\n        </label><br/>\n        <label>\n          Dimension:\n          <select class=\"effect-standing-wave-dimension\" value=\"y\">\n            <option value=\"y\">Y</option>\n            <option value=\"x\">X</option>\n          </select>\n        </label><br/>\n        <label>\n          Time interpolator:\n          <select class=\"effect-standing-wave-time-interpolation\" value=\"sine\">\n            <option value=\"sine\">Sine</option>\n            <option value=\"linear\">Linear</option>\n          </select>\n        </label><br/>\n        <label>\n          Wave function:\n          <select class=\"effect-standing-wave-function\" value=\"sine\">\n            <option value=\"sine\">Sine</option>\n            <option value=\"linear\">Triangle</option>\n          </select>\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.maxAmplitudeInput = ui.querySelector('input.effect-standing-wave-max-amplitude');
    this.waveCountInput = ui.querySelector('input.effect-standing-wave-wave-count');
    this.timeInterpolationInput = ui.querySelector('select.effect-standing-wave-time-interpolation');
    this.functionInput = ui.querySelector('select.effect-standing-wave-function');
    this.dimensionInput = ui.querySelector('select.effect-standing-wave-dimension');

    this.maxAmplitudeInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.waveCountInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.timeInterpolationInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.functionInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.dimensionInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) StandingWaveConfigUI.__proto__ = ConfigUI$$1;
  StandingWaveConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  StandingWaveConfigUI.prototype.constructor = StandingWaveConfigUI;

  StandingWaveConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  StandingWaveConfigUI.prototype.getConfig = function getConfig () {
    var config = {};
    config.maxAmplitude = parseFloat(this.maxAmplitudeInput.value, 10);
    config.waveCount = parseFloat(this.waveCountInput.value, 10);
    config.timeInterpolation = this.timeInterpolationInput.value;
    config.waveFunction = this.functionInput.value;
    config.dimension = this.dimensionInput.value;

    return config;
  };

  StandingWaveConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.maxAmplitudeInput.value = config.maxAmplitude;
    this.waveCountInput.value = config.waveCount;
    this.timeInterpolationInput.value = config.timeInterpolation;
    this.functionInput.value = config.waveFunction;
    this.dimensionInput.value = config.dimension;
  };

  return StandingWaveConfigUI;
}(ConfigUI));

var StandingWaveEffect = /*@__PURE__*/(function (Effect$$1) {
  function StandingWaveEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) StandingWaveEffect.__proto__ = Effect$$1;
  StandingWaveEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  StandingWaveEffect.prototype.constructor = StandingWaveEffect;

  StandingWaveEffect.register = function register (instance, props, uniforms, vertexShader) {
    var maxAmplitude = instance.config.maxAmplitude || 0.05;
    var waveCount = instance.config.waveCount || 20;
    var timeInterpolation = instance.config.timeInterpolation || 'sine';
    var waveFunction = instance.config.waveFunction || 'sine';
    var dimension = instance.config.dimension || 'x';
    var otherDim = {x: 'y', y: 'x'}[dimension];
    if (maxAmplitude !== 0) {
      var time = uniforms.addUniform('time', 'float', function (ctx, props) { return fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod()); });
      var timeInterpolations = {
        // 'linear' is a triangle function that interpolates the points (0,0),(0.25,1),(0.5,0),(0.75,-1),(1,0)
        // i.e. |/\___
        //      |  \/
        linear: "abs(fract(t + 0.75) - 0.5) * 4. - 1.",
        sine: "sin(t * 2. * PI)"
      };
      var timeInterpolStr = timeInterpolations[timeInterpolation] || timeInterpolations['linear'];
      var waveFunctions = {
        linear: "abs(fract(x + 0.75) - 0.5) * 4. - 1.",
        sine: "sin(x * 2. * PI)"
      };
      var waveFuncStr = waveFunctions[waveFunction] || waveFunctions['linear'];
      // eslint-disable-next-line no-param-reassign
      vertexShader.mainBody += "\n        float t = " + time + ";\n        float x = initialPosition." + otherDim + " * float(" + waveCount + ");\n        float timeAmp = " + timeInterpolStr + ";\n        float posAmp = " + waveFuncStr + ";\n        float amplitude = " + (instance.config.maxAmplitude) + " * posAmp * timeAmp;\n\n        position." + dimension + " += amplitude;\n      ";
    }
  };

  StandingWaveEffect.getDisplayName = function getDisplayName () {
    return EffectName$9;
  };

  StandingWaveEffect.getDescription = function getDescription () {
    return EffectDescription$9;
  };

  StandingWaveEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new StandingWaveConfigUI();
    }

    return this._configUI;
  };

  StandingWaveEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      maxAmplitude: 0.05,
      waveCount: 20,
      timeInterpolation: 'linear',
      waveFunction: 'linear',
      dimension: 'y'
    };
  };

  StandingWaveEffect.getRandomConfig = function getRandomConfig () {
    return {
      maxAmplitude: Math.random() * 0.2,
      waveCount: 1 + Math.random() * 30,
      timeInterpolation: ['linear', 'sine'][Math.round(Math.random())],
      waveFunction: ['linear', 'sine'][Math.round(Math.random())],
      dimension: ['y', 'x'][Math.round(Math.random())]
    };
  };

  return StandingWaveEffect;
}(Effect));

var EffectName$10 = 'Sparkle';
var EffectDescription$10 = 'Particle size and brightness increase randomly';

var SparkleConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function SparkleConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$10 + "</legend>\n        <label>\n          min scale: <input type=\"number\" min=\"0\" max=\"100\" step=\"1\" class=\"effect-sparkle-minscale\">%\n        </label><br/>\n        <label>\n          max scale: <input type=\"number\" min=\"100\" step=\"1\" class=\"effect-sparkle-maxscale\">%\n        </label><br/>\n        <label>\n          sparkle ratio: <input type=\"number\" min=\"0\" step=\"1\" class=\"effect-sparkle-ratio\">%\n        </label><br/>\n        <label>\n          sparkle duration: <input type=\"number\" min=\"0\" step=\"1\" class=\"effect-sparkle-duration\">ms\n        </label>\n      </fieldset>\n    "));
    var ui = this.element;
    this.minScaleInput = ui.querySelector('.effect-sparkle-minscale');
    this.maxScaleInput = ui.querySelector('.effect-sparkle-maxscale');
    this.ratioInput = ui.querySelector('.effect-sparkle-ratio');
    this.durationInput = ui.querySelector('.effect-sparkle-duration');

    this.minScaleInput.addEventListener('input', function () {
      this$1.notifyChange();
    });
    this.maxScaleInput.addEventListener('input', function () {
      this$1.notifyChange();
    });
    this.ratioInput.addEventListener('input', function () {
      this$1.notifyChange();
    });
    this.durationInput.addEventListener('input', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) SparkleConfigUI.__proto__ = ConfigUI$$1;
  SparkleConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  SparkleConfigUI.prototype.constructor = SparkleConfigUI;

  SparkleConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  SparkleConfigUI.prototype.getConfig = function getConfig () {
    var config = {};

    config.scaleMin = parseInt(this.minScaleInput.value, 10) / 100;
    config.scaleMax = parseInt(this.maxScaleInput.value, 10) / 100;
    config.ratio = parseInt(this.ratioInput.value, 10) / 100;
    config.duration = parseInt(this.durationInput.value);

    return config;
  };

  SparkleConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.minScaleInput.value = Math.round(config.scaleMin * 100);
    this.maxScaleInput.value = Math.round(config.scaleMax * 100);
    this.ratioInput.value = Math.round(config.ratio * 100);
    this.durationInput.value = config.duration;
  };

  return SparkleConfigUI;
}(ConfigUI));

var SparkleEffect = /*@__PURE__*/(function (Effect$$1) {
  function SparkleEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) SparkleEffect.__proto__ = Effect$$1;
  SparkleEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  SparkleEffect.prototype.constructor = SparkleEffect;

  SparkleEffect.register = function register (instance, props, uniforms, vertexShader, frag, attributes) {
    // Params
    var ref = instance.config;
    var scaleMin = ref.scaleMin;
    var scaleMax = ref.scaleMax;
    var ratio = ref.ratio;
    var duration = ref.duration;

    if (scaleMin >= 1 && scaleMax <= 1) {
      return;
    }

    /* How does this work ?
    ProgressFun does some fancy animation on the point size. It does so
    by taking a x value which goes from 0 to 1 in duration time. This is
    a sawtooth function. Since we want the effect to look random, we
    employ a random period (which is based on the duration and the
    ratio) and offset the function by a random value dependent on the
    period. So it looks like this:
     x
    1      /|          /|
          / |         / |
         /  |        /  |
        /   |       /   |
       /    |      /    |
    0 ----+----------------
          0                t
      |  d  |        duration
      |     p     |  period
      | o |          offset

    Since the function differs for each particle, we need to make sure
    that we always display the complete animation and not start
    somewhere in the middle with x != 0 and always end with x == 1.
    */

    // Shader values
    var particlesCount = props.config.xParticlesCount * props.config.yParticlesCount;
    var periodData = new Float32Array(particlesCount);
    var offsetData = new Float32Array(particlesCount);
    for(var i = 0; i < particlesCount; i++) {
      // The period is based on duration (clear).
      // Divide by ratio to get a reduced effect with smaller ratios.
      // Randomize the period by shifting it a bit in any direction.
      periodData[i] = Math.max((1 + (Math.random() * 2 - 1) * .25) * duration / ratio, duration);
      offsetData[i] = Math.random() * periodData[i];
    }

    var ref$1 = props.state.createBuffer(periodData);
    var periodBufId = ref$1.id;
    var periodBuffer = ref$1.buffer;
    var ref$2 = props.state.createBuffer(offsetData);
    var offsetBufId = ref$2.id;
    var offsetBuffer = ref$2.buffer;

    var period = attributes.add('period', 'float', periodBuffer);
    var offset = attributes.add('offset', 'float', offsetBuffer);

    var progressFun = "\n      float dMin = float(" + scaleMin + ");\n      float dMax = float(" + scaleMax + ");\n      float a = (2. * dMax - 6. * dMin + 4.);\n      float b = 4. * dMin - 0.25 * a - 4.;\n      float progressFun = 1. - sin(2. * PI * x) * (a * pow(x, 2.) + b * x + 1.);\n    ";
    if (scaleMin >= 1) {
      progressFun = "\n        float dMax = float(" + scaleMax + ") - 1.;\n        float progressFun = 1. + (1. - cos(2. * PI * x)) * dMax / 2.;\n      ";
    } else if (scaleMax <= 1) {
      progressFun = "\n        float dMin = 1. - float(" + scaleMin + ");\n        float progressFun = 1. + cos(2. * PI * x) * dMin / 2.;\n      ";
    } 

    // eslint-disable-next-line no-param-reassign
    vertexShader.mainBody += "\n      {\n        float firstPeriodBegin = float(" + (instance.timeBegin) + ") - " + offset + ";\n        if (firstPeriodBegin < float(" + (instance.timeBegin) + ")) firstPeriodBegin += " + period + ";\n        float lastPeriodBegin = float(" + (instance.timeBegin) + ") + ceil(float(" + (instance.timeEnd - instance.timeBegin) + ") / " + period + ") * " + period + " - " + offset + ";\n        if (lastPeriodBegin > float(" + (instance.timeEnd) + ")) lastPeriodBegin -= " + period + ";\n        float lastPeriodLength = float(" + (instance.timeEnd) + ") - lastPeriodBegin;\n        if (float(globalTime) >= firstPeriodBegin\n          && (lastPeriodLength >= float(" + duration + ") || float(globalTime) < lastPeriodBegin)) {\n          float t = mod(float(globalTime) - float(" + (instance.timeBegin) + ") + " + offset + ", " + period + ");\n          float x = t > float(" + duration + ") ? 0. : t * " + (1/duration) + ";\n          " + progressFun + "\n          pointSize *= progressFun;\n          color *= progressFun;\n        }\n      }\n    ";
  };

  SparkleEffect.getDisplayName = function getDisplayName () {
    return EffectName$10;
  };

  SparkleEffect.getDescription = function getDescription () {
    return EffectDescription$10;
  };

  SparkleEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new SparkleConfigUI();
    }

    return this._configUI;
  };

  SparkleEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      scaleMin: 0.5,
      scaleMax: 2,
      ratio: 0.7,
      duration: 700
    };
  };

  SparkleEffect.getRandomConfig = function getRandomConfig () {
    return {
      scaleMin: parseFloat(Math.random().toFixed(3)),
      scaleMax: parseFloat(Math.max(1, Math.random() * 15).toFixed(3)),
      ratio: parseFloat(Math.random().toFixed(3)),
      duration: Math.max(500, Math.round(Math.random() * 5000))
    };
  };

  return SparkleEffect;
}(Effect));

var Ease = function Ease () {};

Ease.makeConfigMarkup = function makeConfigMarkup (classPrefix) {
  var markup = parseHtml(("\n      <div>\n        <label>\n          Ease in time:\n          <input type=\"number\" min=\"0\" step=\"1\" class=\"" + classPrefix + "-ease-in\" value=\"1000\" />\n          ms\n        </label><br/>\n        <label>\n          Ease out time:\n          <input type=\"number\" min=\"0\" step=\"1\" class=\"" + classPrefix + "-ease-out\" value=\"1000\" />\n          ms\n        </label><br/>\n        <label>\n          Ease function:\n          <select class=\"" + classPrefix + "-ease-func\" value=\"sine\">\n            <option value=\"sine\" selected>Sine</option>\n            <option value=\"linear\">Linear</option>\n            <option value=\"none\">None</option>\n          </select>\n        </label>\n      </div>\n    "));
  var fragment = document.createDocumentFragment();
  while (markup.childNodes.length > 0) {
    fragment.appendChild(markup.firstChild);
  }
  return fragment;
};

Ease.extendWithConfigInputs = function extendWithConfigInputs (configUI, classPrefix) {
  var element = configUI.getElement();
  configUI.easeInInput = element.querySelector(("input." + classPrefix + "-ease-in"));
  configUI.easeOutInput = element.querySelector(("input." + classPrefix + "-ease-out"));
  configUI.easeFuncInput = element.querySelector(("select." + classPrefix + "-ease-func"));
  configUI.easeInInput.addEventListener('change', function () {
    configUI.notifyChange();
  });
  configUI.easeOutInput.addEventListener('change', function () {
    configUI.notifyChange();
  });
  configUI.easeFuncInput.addEventListener('change', function () {
    configUI.notifyChange();
  });
};

Ease.extendConfig = function extendConfig (configUI, config) {
  config.easeInTime = parseInt(configUI.easeInInput.value, 10);
  config.easeOutTime = parseInt(configUI.easeOutInput.value, 10);
  config.easeFunc = configUI.easeFuncInput.value;
  return config;
};

Ease.applyConfig = function applyConfig (configUI, config) {
  configUI.easeInInput.value = config.easeInTime || 1000;
  configUI.easeOutInput.value = config.easeOutTime || 1000;
  configUI.easeFuncInput.value = config.easeFunc || 'sine';
};

Ease.extend = function extend (configUI, classPrefix, appendInputsSelector) {
    if ( appendInputsSelector === void 0 ) appendInputsSelector = null;

  var container = configUI.getElement();
  if (appendInputsSelector !== null) {
    container = container.querySelector(appendInputsSelector);
  }
  container.appendChild(Ease.makeConfigMarkup(classPrefix));
  Ease.extendWithConfigInputs(configUI, classPrefix);
  var oldGetConfig = configUI.getConfig;
  var oldApplyConfig = configUI.applyConfig;

  configUI.getConfig = function() {
    return Ease.extendConfig(configUI, oldGetConfig.call(configUI));
  };
  configUI.applyConfig = function(config) {
    Ease.applyConfig(configUI, config);
    oldApplyConfig.call(configUI, config);
  };
};

Ease.setupShaderEasing = function setupShaderEasing (instance, uniforms) {
  var easeInTime = Math.min(instance.config.easeInTime || 1000, instance.getPeriod() / 2);
  var easeOutTime = Math.min(instance.config.easeOutTime || 1000, instance.getPeriod() - easeInTime);
  // starts at 0, goes down to 1
  var easeInProgress = uniforms.addUniform('easeInProgress', 'float', function (ctx, props) {
    var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
    return Math.min(1, time / (easeInTime / instance.getPeriod()));
  });
  // starts at 1, goes down to 0
  var easeOutProgress = uniforms.addUniform('easeOutProgress', 'float', function (ctx, props) {
    var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
    return Math.min(1, (1 - time) / (easeOutTime / instance.getPeriod()));
  });
  var easeFuncs = {
    none: '1.',
    sine: ("(1. - cos(PI * min(" + easeInProgress + ", " + easeOutProgress + "))) / 2."),
    linear: ("min(" + easeInProgress + ", " + easeOutProgress + ")")
  };
  var easeFunc = easeFuncs[instance.config.easeFunc || 'sine'];
  return easeFunc;
};

var EffectName$11 = 'Particle spacing';
var EffectDescription$11 = 'Adds or removes space between particles';

var ParticleSpacingConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ParticleSpacingConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-particle-spacing';
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$11 + "</legend>\n        <label>\n          X spacing factor\n          <input type=\"number\" class=\"" + classPrefix + "-xspread\" value=\"1\" />\n        </label><br/>\n        <label>\n          Y spacing factor\n          <input type=\"number\" class=\"" + classPrefix + "-yspread\" value=\"1\" />\n        </label><br/>\n      </fieldset>\n    "));
    var ui = this.element;
    this.xSpreadInput = ui.querySelector(("input." + classPrefix + "-xspread"));
    this.ySpreadInput = ui.querySelector(("input." + classPrefix + "-yspread"));

    this.xSpreadInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.ySpreadInput.addEventListener('change', function () {
      this$1.notifyChange();
    });

    Ease.extend(this, classPrefix);
  }

  if ( ConfigUI$$1 ) ParticleSpacingConfigUI.__proto__ = ConfigUI$$1;
  ParticleSpacingConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ParticleSpacingConfigUI.prototype.constructor = ParticleSpacingConfigUI;

  ParticleSpacingConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ParticleSpacingConfigUI.prototype.getConfig = function getConfig () {
    return {
      xSpread: parseFloat(this.xSpreadInput.value, 10),
      ySpread: parseFloat(this.ySpreadInput.value, 10)
    };
  };

  ParticleSpacingConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.xSpreadInput.value = config.xSpread || 1;
    this.ySpreadInput.value = config.ySpread || 1;
  };

  return ParticleSpacingConfigUI;
}(ConfigUI));

var ParticleSpacingEffect = /*@__PURE__*/(function (Effect$$1) {
  function ParticleSpacingEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ParticleSpacingEffect.__proto__ = Effect$$1;
  ParticleSpacingEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ParticleSpacingEffect.prototype.constructor = ParticleSpacingEffect;

  ParticleSpacingEffect.register = function register (instance, props, uniforms, vertexShader) {
    var xSpread = instance.config.xSpread || 1;
    var ySpread = instance.config.ySpread || 1;
    var easeInTime = Math.min(instance.config.easeInTime || 1000, instance.getPeriod() / 2);
    var easeOutTime = Math.min(instance.config.easeOutTime || 1000, instance.getPeriod() - easeInTime);

    // starts at 0, goes down to 1
    var easeInProgress = uniforms.addUniform('easeInProgress', 'float', function (ctx, props) {
      var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
      return Math.min(1, time / (easeInTime / instance.getPeriod()));
    });
    // starts at 1, goes down to 0
    var easeOutProgress = uniforms.addUniform('easeOutProgress', 'float', function (ctx, props) {
      var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
      return Math.min(1, (1 - time) / (easeOutTime / instance.getPeriod()));
    });
    var easeFuncs = {
      none: '1.',
      sine: ("(1. - cos(PI * min(" + easeInProgress + ", " + easeOutProgress + "))) / 2."),
      linear: ("min(" + easeInProgress + ", " + easeOutProgress + ")")
    };
    var easeFunc = easeFuncs[instance.config.easeFunc || 'sine'];
    vertexShader.mainBody += "\n      vec2 offset;\n      offset.x = initialPosition.x * float(" + xSpread + ") - (float(" + xSpread + ") - 1.) / 2.;\n      offset.y = initialPosition.y * float(" + ySpread + ") - (float(" + ySpread + ") - 1.) / 2.;\n      offset -= initialPosition.xy;\n      float ease = " + easeFunc + ";\n      offset *= ease;\n      position.xy += offset;\n    ";
  };

  ParticleSpacingEffect.getDisplayName = function getDisplayName () {
    return EffectName$11;
  };

  ParticleSpacingEffect.getDescription = function getDescription () {
    return EffectDescription$11;
  };

  ParticleSpacingEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ParticleSpacingConfigUI();
    }

    return this._configUI;
  };

  ParticleSpacingEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      xSpread: 2,
      ySpread: 2,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: 'sine'
    };
  };

  ParticleSpacingEffect.getRandomConfig = function getRandomConfig () {
    return {
      xSpread: Math.random() > 0.5 ? 0.5 : 1.5,
      ySpread: Math.random() > 0.5 ? 0.5 : 1.5,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: ['sine', 'linear', 'none'][Math.floor(Math.random() * 3)]
    };
  };

  return ParticleSpacingEffect;
}(Effect));

var EffectName$12 = 'Displace Particles';
var EffectDescription$12 = 'Displaces all particles into a certain direction by the same distance';

var ParticleDisplaceConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ParticleDisplaceConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-particle-displace';
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$12 + "</legend>\n        <label>\n          Displace distance:\n          <input type=\"number\" min=\"0\" class=\"" + classPrefix + "-distance\" value=\"0.5\" />\n        </label><br/>\n        <label>\n          Displace direction:\n          <input type=\"number\" class=\"" + classPrefix + "-direction\" value=\"135\" />\n        </label>\n        <select class=\"" + classPrefix + "-direction-unit\">\n          <option value=\"degrees\" selected>deg</option>\n          <option value=\"radians\">rad</option>\n        </select>\n        <br/>\n      </fieldset>\n    "));
    var ui = this.element;
    this.distanceInput = ui.querySelector(("input." + classPrefix + "-distance"));
    this.directionInput = ui.querySelector(("input." + classPrefix + "-direction"));
    this.directionUnitInput = ui.querySelector(("select." + classPrefix + "-direction-unit"));

    this.distanceInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.directionInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.directionUnitInput.addEventListener('change', function () {
      this$1.notifyChange();
    });

    Ease.extend(this, classPrefix);
  }

  if ( ConfigUI$$1 ) ParticleDisplaceConfigUI.__proto__ = ConfigUI$$1;
  ParticleDisplaceConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ParticleDisplaceConfigUI.prototype.constructor = ParticleDisplaceConfigUI;

  ParticleDisplaceConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ParticleDisplaceConfigUI.prototype.getConfig = function getConfig () {
    return {
      direction: parseFloat(this.directionInput.value),
      directionUnit: this.directionUnitInput.value,
      distance: parseFloat(this.distanceInput.value)
    };
  };

  ParticleDisplaceConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.directionInput.value = config.direction || 135;
    this.directionUnitInput.value = config.directionUnit || 'degrees';
    this.distanceInput.value = config.distance || 0.5;
  };

  return ParticleDisplaceConfigUI;
}(ConfigUI));

var ParticleDisplaceEffect = /*@__PURE__*/(function (Effect$$1) {
  function ParticleDisplaceEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ParticleDisplaceEffect.__proto__ = Effect$$1;
  ParticleDisplaceEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ParticleDisplaceEffect.prototype.constructor = ParticleDisplaceEffect;

  ParticleDisplaceEffect.register = function register (instance, props, uniforms, vertexShader) {
    var angle = instance.config.direction || 135;
    if (instance.config.directionUnit !== 'radians') {
      angle = angle / 360 * 2 * Math.PI;
    }
    angle = (angle + 2 * Math.PI) % (2 * Math.PI);
    var distance = instance.config.distance || 0.5;
    var easeFunc = Ease.setupShaderEasing(instance, uniforms);
    vertexShader.mainBody += "\n      vec2 offset;\n      offset.y = cos(float(" + angle + "));\n      offset.x = sqrt(1. - pow(offset.y, 2.)) * (-2. * floor(float(" + angle + ") / PI) + 1.);\n      offset *= float(" + distance + ");\n      float ease = " + easeFunc + ";\n      offset *= ease;\n      position.xy += offset;\n    ";
  };

  ParticleDisplaceEffect.getDisplayName = function getDisplayName () {
    return EffectName$12;
  };

  ParticleDisplaceEffect.getDescription = function getDescription () {
    return EffectDescription$12;
  };

  ParticleDisplaceEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ParticleDisplaceConfigUI();
    }

    return this._configUI;
  };

  ParticleDisplaceEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      direction: 135,
      directionUnit: 'degrees',
      distance: 0.5,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: 'sine'
    };
  };

  ParticleDisplaceEffect.getRandomConfig = function getRandomConfig () {
    return {
      direction: Math.random() * 360,
      directionUnit: 'degrees',
      distance: Math.random() - 0.5,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: ['sine', 'linear'][Math.floor(Math.random() * 2)]
    };
  };

  return ParticleDisplaceEffect;
}(Effect));

var EffectName$13 = 'Particle size by hue';
var EffectDescription$13 = 'Particles will have different sizes depending on their color';

var ParticleSizeByHueConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ParticleSizeByHueConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-particle-size-by-hue';
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$13 + "</legend>\n        <label>\n          Scaling factor:\n          <input type=\"number\" min=\"0\" class=\"" + classPrefix + "-scaling\" value=\"2\" />\n        </label><br/>\n        <label>\n          Hue rotation:\n          <input type=\"number\" min=\"0\" max=\"100\" step=\"1\" class=\"" + classPrefix + "-rotation\" value=\"0\" />%\n        </label><br/>\n      </fieldset>\n    "));
    var ui = this.element;
    this.scalingInput = ui.querySelector(("input." + classPrefix + "-scaling"));
    this.hueRotationInput = ui.querySelector(("input." + classPrefix + "-rotation"));

    this.scalingInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.hueRotationInput.addEventListener('change', function () {
      this$1.notifyChange();
    });

    Ease.extend(this, classPrefix);
  }

  if ( ConfigUI$$1 ) ParticleSizeByHueConfigUI.__proto__ = ConfigUI$$1;
  ParticleSizeByHueConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ParticleSizeByHueConfigUI.prototype.constructor = ParticleSizeByHueConfigUI;

  ParticleSizeByHueConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ParticleSizeByHueConfigUI.prototype.getConfig = function getConfig () {
    var config = {
      scaling: parseFloat(this.scalingInput.value),
      hueRotation: parseInt(this.hueRotationInput.value) / 100 * 2 * Math.PI,
    };
    return config;
  };

  ParticleSizeByHueConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.scalingInput.value = config.scaling;
    this.hueRotationInput.value = Math.round(config.hueRotation / 2 / Math.PI * 100);
  };

  return ParticleSizeByHueConfigUI;
}(ConfigUI));

var ParticleSizeByHueEffect = /*@__PURE__*/(function (Effect$$1) {
  function ParticleSizeByHueEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ParticleSizeByHueEffect.__proto__ = Effect$$1;
  ParticleSizeByHueEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ParticleSizeByHueEffect.prototype.constructor = ParticleSizeByHueEffect;

  ParticleSizeByHueEffect.register = function register (instance, props, uniforms, vertexShader) {
    var scaling = instance.config.scaling || 1;
    var hueRotation = instance.config.hueRotation || 0;
    var easeInTime = Math.min(instance.config.easeInTime || 1000, instance.getPeriod() / 2);
    var easeOutTime = Math.min(instance.config.easeOutTime || 1000, instance.getPeriod() - easeInTime);
    // starts at 0, goes down to 1
    var easeInProgress = uniforms.addUniform('easeInProgress', 'float', function (ctx, props) {
      var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
      return Math.min(1, time / (easeInTime / instance.getPeriod()));
    });
    // starts at 1, goes down to 0
    var easeOutProgress = uniforms.addUniform('easeOutProgress', 'float', function (ctx, props) {
      var time = fract((props.clock.getTime() - instance.timeBegin) / instance.getPeriod());
      return Math.min(1, (1 - time) / (easeOutTime / instance.getPeriod()));
    });
    var easeFuncs = {
      none: '1.',
      sine: ("(1. - cos(PI * min(" + easeInProgress + ", " + easeOutProgress + "))) / 2."),
      linear: ("min(" + easeInProgress + ", " + easeOutProgress + ")")
    };
    var easeFunc = easeFuncs[instance.config.easeFunc || 'sine'];
    vertexShader.mainBody += "\n      // Generate a number between 0 and 1 depending on position on hue wheel\n      float huePosition = fract((hsv[0] + float(" + hueRotation + ")) / (2. * PI));\n      // A scaling value of 0.5 means a decrease by 50%\n      float increase = (float(" + scaling + ") - 1.) * huePosition;\n      float sizeDiff = increase * pointSize;\n      float ease = " + easeFunc + ";\n      pointSize += sizeDiff * ease;\n    ";
  };

  ParticleSizeByHueEffect.getDisplayName = function getDisplayName () {
    return EffectName$13;
  };

  ParticleSizeByHueEffect.getDescription = function getDescription () {
    return EffectDescription$13;
  };

  ParticleSizeByHueEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ParticleSizeByHueConfigUI();
    }

    return this._configUI;
  };

  ParticleSizeByHueEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      scaling: 2,
      hueRotation: 0,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: 'sine'
    };
  };

  ParticleSizeByHueEffect.getRandomConfig = function getRandomConfig () {
    return {
      scaling: Math.random() * 3,
      hueRotation: Math.random() * 2 * Math.PI,
      easeInTime: 1000,
      easeOutTime: 1000,
      easeFunc: ['sine', 'linear', 'none'][Math.floor(Math.random() * 3)]
    };
  };

  return ParticleSizeByHueEffect;
}(Effect));

var EffectName$14 = 'Reset Default Image';
var EffectDescription$14 = 'This effect changes the currently active image ' +
                          'back to the default image (i.e. what came from ' +
                          'the server or was uploaded by the user)';

var ResetDefaultImageConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ResetDefaultImageConfigUI() {
    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$14 + "</legend>\n        Nothing to be configured :)\n      </fieldset>\n    "));
    var ui = this.element;
  }

  if ( ConfigUI$$1 ) ResetDefaultImageConfigUI.__proto__ = ConfigUI$$1;
  ResetDefaultImageConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ResetDefaultImageConfigUI.prototype.constructor = ResetDefaultImageConfigUI;

  ResetDefaultImageConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ResetDefaultImageConfigUI.prototype.getConfig = function getConfig () {
    return {};
  };

  ResetDefaultImageConfigUI.prototype.applyConfig = function applyConfig (config) {
  };

  return ResetDefaultImageConfigUI;
}(ConfigUI));

var ResetDefaultImageEffect = /*@__PURE__*/(function (Effect$$1) {
  function ResetDefaultImageEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ResetDefaultImageEffect.__proto__ = Effect$$1;
  ResetDefaultImageEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ResetDefaultImageEffect.prototype.constructor = ResetDefaultImageEffect;

  ResetDefaultImageEffect.register = function register (instance, props, uniforms, vertexShader) {
    var alive = true;
    var checkTime = function () {
      if (!alive) {
        return;
      }
      var tDist = props.clock.getTime() - instance.timeBegin;
      if (0 <= tDist && tDist <= props.clock.getDelta()) {
        props.state.setParticleData(0);
      }
      window.requestAnimationFrame(checkTime);
    };
    checkTime();
    props.state.addHook(function () {
      alive = false;
    });
  };

  ResetDefaultImageEffect.getDisplayName = function getDisplayName () {
    return EffectName$14;
  };

  ResetDefaultImageEffect.getDescription = function getDescription () {
    return EffectDescription$14;
  };

  ResetDefaultImageEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ResetDefaultImageConfigUI();
    }

    return this._configUI;
  };

  ResetDefaultImageEffect.getDefaultConfig = function getDefaultConfig () {
    return {};
  };

  ResetDefaultImageEffect.getRandomConfig = function getRandomConfig () {
    return {};
  };

  ResetDefaultImageEffect.isEventOnly = function isEventOnly () {
    return true;
  };

  return ResetDefaultImageEffect;
}(Effect));

var imagecapture = createCommonjsModule(function (module, exports) {
(function (global, factory) {
  if (typeof undefined === "function" && undefined.amd) {
    undefined(['exports'], factory);
  } else {
    factory(exports);
  }
})(commonjsGlobal, function (exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) { descriptor.writable = true; }
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) { defineProperties(Constructor.prototype, protoProps); }
      if (staticProps) { defineProperties(Constructor, staticProps); }
      return Constructor;
    };
  }();

  /**
   * MediaStream ImageCapture polyfill
   *
   * @license
   * Copyright 2018 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var ImageCapture = exports.ImageCapture = window.ImageCapture;

  if (typeof ImageCapture === 'undefined') {
    exports.ImageCapture = ImageCapture = function () {

      /**
       * TODO https://www.w3.org/TR/image-capture/#constructors
       *
       * @param {MediaStreamTrack} videoStreamTrack - A MediaStreamTrack of the 'video' kind
       */
      function ImageCapture(videoStreamTrack) {
        var _this = this;

        _classCallCheck(this, ImageCapture);

        if (videoStreamTrack.kind !== 'video') { throw new DOMException('NotSupportedError'); }

        this._videoStreamTrack = videoStreamTrack;
        if (!('readyState' in this._videoStreamTrack)) {
          // Polyfill for Firefox
          this._videoStreamTrack.readyState = 'live';
        }

        // MediaStream constructor not available until Chrome 55 - https://www.chromestatus.com/feature/5912172546752512
        this._previewStream = new MediaStream([videoStreamTrack]);
        this.videoElement = document.createElement('video');
        this.videoElementPlaying = new Promise(function (resolve) {
          _this.videoElement.addEventListener('playing', resolve);
        });
        if (HTMLMediaElement) {
          this.videoElement.srcObject = this._previewStream; // Safari 11 doesn't allow use of createObjectURL for MediaStream
        } else {
          this.videoElement.src = URL.createObjectURL(this._previewStream);
        }
        this.videoElement.muted = true;
        this.videoElement.setAttribute('playsinline', ''); // Required by Safari on iOS 11. See https://webkit.org/blog/6784
        this.videoElement.play();

        this.canvasElement = document.createElement('canvas');
        // TODO Firefox has https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas
        this.canvas2dContext = this.canvasElement.getContext('2d');
      }

      /**
       * https://w3c.github.io/mediacapture-image/index.html#dom-imagecapture-videostreamtrack
       * @return {MediaStreamTrack} The MediaStreamTrack passed into the constructor
       */


      _createClass(ImageCapture, [{
        key: 'getPhotoCapabilities',


        /**
         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-getphotocapabilities
         * @return {Promise<PhotoCapabilities>} Fulfilled promise with
         * [PhotoCapabilities](https://www.w3.org/TR/image-capture/#idl-def-photocapabilities)
         * object on success, rejected promise on failure
         */
        value: function getPhotoCapabilities() {
          return new Promise(function executorGPC(resolve, reject) {
            // TODO see https://github.com/w3c/mediacapture-image/issues/97
            var MediaSettingsRange = {
              current: 0, min: 0, max: 0
            };
            resolve({
              exposureCompensation: MediaSettingsRange,
              exposureMode: 'none',
              fillLightMode: 'none',
              focusMode: 'none',
              imageHeight: MediaSettingsRange,
              imageWidth: MediaSettingsRange,
              iso: MediaSettingsRange,
              redEyeReduction: false,
              whiteBalanceMode: 'none',
              zoom: MediaSettingsRange
            });
            reject(new DOMException('OperationError'));
          });
        }

        /**
         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-setoptions
         * @param {Object} photoSettings - Photo settings dictionary, https://www.w3.org/TR/image-capture/#idl-def-photosettings
         * @return {Promise<void>} Fulfilled promise on success, rejected promise on failure
         */

      }, {
        key: 'setOptions',
        value: function setOptions() {
          return new Promise(function executorSO(resolve, reject) {
            // TODO
          });
        }

        /**
         * TODO
         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-takephoto
         * @return {Promise<Blob>} Fulfilled promise with [Blob](https://www.w3.org/TR/FileAPI/#blob)
         * argument on success; rejected promise on failure
         */

      }, {
        key: 'takePhoto',
        value: function takePhoto() {
          var self = this;
          return new Promise(function executorTP(resolve, reject) {
            // `If the readyState of the MediaStreamTrack provided in the constructor is not live,
            // return a promise rejected with a new DOMException whose name is "InvalidStateError".`
            if (self._videoStreamTrack.readyState !== 'live') {
              return reject(new DOMException('InvalidStateError'));
            }
            self.videoElementPlaying.then(function () {
              try {
                self.canvasElement.width = self.videoElement.videoWidth;
                self.canvasElement.height = self.videoElement.videoHeight;
                self.canvas2dContext.drawImage(self.videoElement, 0, 0);
                self.canvasElement.toBlob(resolve);
              } catch (error) {
                reject(new DOMException('UnknownError'));
              }
            });
          });
        }

        /**
         * Implements https://www.w3.org/TR/image-capture/#dom-imagecapture-grabframe
         * @return {Promise<ImageBitmap>} Fulfilled promise with
         * [ImageBitmap](https://www.w3.org/TR/html51/webappapis.html#webappapis-images)
         * argument on success; rejected promise on failure
         */

      }, {
        key: 'grabFrame',
        value: function grabFrame() {
          var self = this;
          return new Promise(function executorGF(resolve, reject) {
            // `If the readyState of the MediaStreamTrack provided in the constructor is not live,
            // return a promise rejected with a new DOMException whose name is "InvalidStateError".`
            if (self._videoStreamTrack.readyState !== 'live') {
              return reject(new DOMException('InvalidStateError'));
            }
            self.videoElementPlaying.then(function () {
              try {
                self.canvasElement.width = self.videoElement.videoWidth;
                self.canvasElement.height = self.videoElement.videoHeight;
                self.canvas2dContext.drawImage(self.videoElement, 0, 0);
                // TODO polyfill https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap for IE
                resolve(window.createImageBitmap(self.canvasElement));
              } catch (error) {
                reject(new DOMException('UnknownError'));
              }
            });
          });
        }
      }, {
        key: 'videoStreamTrack',
        get: function get() {
          return this._videoStreamTrack;
        }
      }]);

      return ImageCapture;
    }();
  }

  window.ImageCapture = ImageCapture;
});
});

unwrapExports(imagecapture);
var imagecapture_1 = imagecapture.ImageCapture;

var EffectName$15 = 'Webcam';
var EffectDescription$15 = 'Make use of the user\'s webcam as the particles\' color values';

var WebcamConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function WebcamConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-webcam';
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$15 + "</legend>\n        Especially in Firefox, it is sometimes necessary to wait some time\n        before webcam images can be retrieved. It may also be helpful to\n        retry connecting to the webcam several times.\n        <br />\n        <label>\n          Max number of retries:\n          <input type=\"number\" min=\"0\" max=\"10\" step=\"1\" value=\"3\" class=\"" + classPrefix + "-retries\" />\n        </label>\n        <br/>\n        <label>\n          Delay between retries:\n          <input type=\"number\" min=\"0\" max=\"10000\" step=\"1\" value=\"1000\" class=\"" + classPrefix + "-retry-timeout\" />ms\n        </label>\n        <br/>\n        " + (imageScalingMarkup(classPrefix)) + "\n      </fieldset>\n    "));
    var ui = this.element;
    this.maxRetriesInput = ui.querySelector(("." + classPrefix + "-retries"));
    this.retryTimeoutInput = ui.querySelector(("." + classPrefix + "-retry-timeout"));

    this.maxRetriesInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.retryTimeoutInput.addEventListener('change', function () {
      this$1.notifyChange();
    });

    this.scalingSelect = ui.querySelector(("select." + classPrefix + "-scaling-select"));
    this.scalingSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropXSelect = ui.querySelector(("select." + classPrefix + "-crop-x-select"));
    this.cropXSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.cropYSelect = ui.querySelector(("select." + classPrefix + "-crop-y-select"));
    this.cropYSelect.addEventListener('change', function () {
      this$1.notifyChange();
    });
  }

  if ( ConfigUI$$1 ) WebcamConfigUI.__proto__ = ConfigUI$$1;
  WebcamConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  WebcamConfigUI.prototype.constructor = WebcamConfigUI;

  WebcamConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  WebcamConfigUI.prototype.getConfig = function getConfig () {
    var imageScaling = this.scalingSelect.value;
    var imageCropping = {
      x: this.cropXSelect.value,
      y: this.cropYSelect.value
    };
    return {
      maxRetries: parseInt(this.maxRetriesInput.value, 10),
      retryTimeout: parseInt(this.retryTimeoutInput.value, 10),
      imageScaling: imageScaling,
      imageCropping: imageCropping
    };
  };

  WebcamConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.maxRetriesInput.value = config.maxRetries || 3;
    this.retryTimeoutInput.value = config.retryTimeout || 1000;
    this.scalingSelect.value = config.imageScaling || 'crop-to-viewport';
    var imageCropping = config.imageCropping || {x: 'crop-both', y: 'crop-both'};
    this.cropXSelect.value = imageCropping.x;
    this.cropYSelect.value = imageCropping.y;
  };

  return WebcamConfigUI;
}(ConfigUI));

var WebcamEffectImpl = function WebcamEffectImpl(instance, props) {
  this.instance = instance;
  this.props = props;

  this.alive = false;
  this.retries = 0;
  this.canvas = document.createElement('canvas');
  this.stream = null;
  this.track = null;
  this.capture = null;
  this.particleData = -1;
};

WebcamEffectImpl.prototype.isActive = function isActive () {
  var instance = this.instance;
  var clock = this.props.clock;
  var time = clock.getTime();
  return this.isAlive() && !clock.isPaused() && instance.timeBegin <= time && time <= instance.timeEnd;
};
WebcamEffectImpl.prototype.isAlive = function isAlive () {
  return this.alive;
};
WebcamEffectImpl.prototype.start = function start () {
    var this$1 = this;

  this.alive = true;
  // Shutdown hook
  this.props.state.addHook(function () { return this$1.kill(); });
  return this.createStream()
  .then(function (stream) { this$1.stream = stream; return this$1.createTrack(); },
        function (err) { return Promise.reject(err); })
  .then(function (track) { this$1.track = track; this$1.capture = new imagecapture_1(this$1.track); return this$1.tryStartGrabbing(); },
        function (err) { return Promise.reject(err); });
};
WebcamEffectImpl.prototype.kill = function kill () {
  this.alive = false;
  // FIXME understand and document when this can happen.
  // E.g. when the getUserMedia() request is ignored in icognito
  // mode
  var stream = this.stream;
  if (stream !== null) {
    var allTracks = stream.getTracks();
    for (var i = 0; i < allTracks.length; i++) {
      allTracks[i].stop();
    }
  }
  this.stream = null;
};
WebcamEffectImpl.prototype.grabLoop = function grabLoop () {
    var this$1 = this;

  // When we are sure grabbing images works (which happens further
  // below) we call this function to grab frames repeatedly in a loop
  if (this.isAlive()) {
    var track = this.track;
    var capture = this.capture;
    if (track.muted) {
      this.kill();
      console.warn('Video stream muted. Spinning up new WebcamEffectImpl...');
      new WebcamEffectImpl(this.instance, this.props).start();
      return;
    }
    // FIXME if we don't grab frames, Chrome will soon make the
    // track invalid, causing the next grabFrame to throw an error
    // Otherwise, we could test here if we are active and do a
    // no-op instead of grabFrame
    capture.grabFrame()
    .then(function (frame) {
      this$1.processFrame(frame);
      // Queue this into the next animation frame so we don't
      // explode the call stack with recursive calls
      window.requestAnimationFrame(function () { return this$1.grabLoop(); });
    }, function (err) {
      // Throw this error into the global scope
      window.setTimeout(function () { throw new Error('Cannot grab images from the camera'); }, 0);
    });
  }
};
WebcamEffectImpl.prototype.tryStartGrabbing = function tryStartGrabbing () {
    var this$1 = this;

  // As it turns out, having the video alone is not a guarantee that
  // we can actually grab images (at least on FF). So let's make sure
  // it works at least one time
  return new Promise(function (res, rej) {
    var testGrab = function (err) {
      this$1.capture.grabFrame()
      .then(function (frame) {
        // Success, resolve and start grabbing!
        this$1.processFrame(frame);
        this$1.grabLoop();
        res();
      }, function (err) {
        // Aw, no image :( Maybe try again?
        if (this$1.retries < this$1.instance.config.maxRetries) {
          this$1.retries = this$1.retries + 1;
          window.setTimeout(testGrab, this$1.instance.config.retryTimeout);
        } else {
          // We finally have to give up :/
          rej(new Error('Cannot grab images from camera'));
        }
      });
    };
    testGrab();
  });
};
WebcamEffectImpl.prototype.processFrame = function processFrame (image) {
  // This is where the magic happens
  if (this.isActive()) {
    var canvas = this.canvas;
    var state = this.props.state;
    var config = this.instance.config;
    var w = image.width;
    var h = image.height;
    // FIXME the camera resolution shouldn't change all that often
    //     Maybe we can do this only once. Or we keep relying on
    //     the browser to optimize.
    canvas.width = w;
    canvas.height = h;
    var ctx = canvas.getContext('2d');
    ctx.scale(-1, -1);
    ctx.drawImage(image, 0, 0, -w, -h);
    var pd = state.createParticleData(canvas, config.imageScaling, config.imageCropping);
    state.setParticleData(pd);
    if (this.particleData !== -1) {
      state.destroyParticleData(this.particleData);
    }
    this.particleData = pd;
  }
};
WebcamEffectImpl.prototype.createStream = function createStream () {
  var mediaConstraints = {
    audio: false,
    video: true // we want video
  };
  // Let's ask the browser if we can haz video
  return navigator.mediaDevices.getUserMedia(mediaConstraints);
};
WebcamEffectImpl.prototype.createTrack = function createTrack () {
  var videoTracks = this.stream.getVideoTracks();
  if (videoTracks.length === 0) {
    return Promise.reject('No video tracks in user media');
  }
  // We got a video feed!
  // Let's try to adapt it to our needs a little bit more
  var videoTrack = videoTracks[0];
  var state = this.props.state;
  var constraints = {
    width: state.getWidth(),
    height: state.getHeight(),
    aspectRatio: state.getWidth() / state.getHeight(),
    facingMode: 'user'
  };
  // According to MDN, this shouldn't ever reject.
  // TODO maybe add an assertion for that
  return videoTrack.applyConstraints(constraints)
    .then(function () { return Promise.resolve(videoTrack); }, function (err) { return Promise.reject(err); });
};

var WebcamEffect = /*@__PURE__*/(function (Effect$$1) {
  function WebcamEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) WebcamEffect.__proto__ = Effect$$1;
  WebcamEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  WebcamEffect.prototype.constructor = WebcamEffect;

  WebcamEffect.registerAsync = function registerAsync (instance, props) {
    return new WebcamEffectImpl(instance, props).start();
  };

  WebcamEffect.getDisplayName = function getDisplayName () {
    return EffectName$15;
  };

  WebcamEffect.getDescription = function getDescription () {
    return EffectDescription$15;
  };

  WebcamEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new WebcamConfigUI();
    }

    return this._configUI;
  };

  WebcamEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      maxRetries: 3,
      retryTimeout: 1000,
      imageScaling: 'crop-to-viewport',
      imageCropping: {x: 'crop-both', y: 'crop-both'}
    };
  };

  WebcamEffect.getRandomConfig = function getRandomConfig () {
    return WebcamEffect.getDefaultConfig();
  };

  WebcamEffect.supportsRepetition = function supportsRepetition () {
    return false;
  };

  return WebcamEffect;
}(Effect));

var EffectName$16 = 'Reduce Particle Count';
var EffectDescription$16 = 'Drops the given amount of particles';

var ParticlesReduceConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function ParticlesReduceConfigUI() {
    var this$1 = this;

    ConfigUI$$1.call(this);
    var classPrefix = 'effect-particles-reduce';
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$16 + "</legend>\n        Remaining particles amount: <input class=\"" + classPrefix + "-reduction-amount\" type=\"number\" min=\"0\" max=\"100\" step=\"1\" value=\"100\"/>%\n        <br>\n        Hide particles by:\n        <select class=\"" + classPrefix + "-reduction-animation\">\n          <option selected value=\"fade-out\" title=\"fade-out exceeding particles\">fading out</option>\n          <option value=\"amount\" title=\"gradually reduce number of visible particles\">reducing amount</option>\n        </select>\n        <br>\n      </fieldset>\n    "));
    var ui = this.element;
    this.reductionAmountInput = ui.querySelector(("." + classPrefix + "-reduction-amount"));
    this.reductionAnimationInput = ui.querySelector(("." + classPrefix + "-reduction-animation"));

    this.reductionAmountInput.addEventListener('change', function () {
      this$1.notifyChange();
    });
    this.reductionAnimationInput.addEventListener('change', function () {
      this$1.notifyChange();
    });

    Ease.extend(this, classPrefix);
  }

  if ( ConfigUI$$1 ) ParticlesReduceConfigUI.__proto__ = ConfigUI$$1;
  ParticlesReduceConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  ParticlesReduceConfigUI.prototype.constructor = ParticlesReduceConfigUI;

  ParticlesReduceConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  ParticlesReduceConfigUI.prototype.getConfig = function getConfig () {
    return {
      amount: parseFloat(this.reductionAmountInput.value) / 100,
      animation: this.reductionAnimationInput.value
    };
  };

  ParticlesReduceConfigUI.prototype.applyConfig = function applyConfig (config) {
    this.reductionAmountInput.value = config.amount * 100;
    this.reductionAnimationInput.value = config.animation;
  };

  return ParticlesReduceConfigUI;
}(ConfigUI));

var ParticlesReduceEffect = /*@__PURE__*/(function (Effect$$1) {
  function ParticlesReduceEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) ParticlesReduceEffect.__proto__ = Effect$$1;
  ParticlesReduceEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  ParticlesReduceEffect.prototype.constructor = ParticlesReduceEffect;

  ParticlesReduceEffect.register = function register (instance, props, uniforms, vertexShader) {
    var amount = instance.config.amount;
    var animation = instance.config.animation;
    if (amount < 1) {
      // This works as follows:
      // We assume we want to render a different particle grid which is
      // coarser than the one defined by {x,y}ParticlesCount but with a
      // similar aspect ratio. Since it's cells are bigger than the cells
      // in the original particle grid when rendered onto the same area,
      // we refer to it as "super-grid"
      var px = props.config.xParticlesCount;
      var py = props.config.yParticlesCount;
      var AR =  px / py;
      var newH = Math.sqrt(amount * py * py);
      var newW = Math.round(newH * AR);
      newH = Math.round(newH);
      // Now we know the super-grid's dimensions newW and newH. We can
      // also calculate the grid's cell's dimensions relative to the old
      // grid
      var cellSize = Math.min(px / newW, Math.max(px, py)); // FIXME handle 0% better

      var easeFunc = Ease.setupShaderEasing(instance, uniforms);

      var transitionByAmount = {'amount': true, 'fade-out': false}[animation];

      vertexShader.mainBody += "\n        float ease = " + easeFunc + ";\n        float cellSize = float(" + cellSize + ");\n        " + (transitionByAmount ? 'cellSize = mix(1., cellSize, ease);' : '') + "\n        // subcellMid is the center of the sub-cell occupied by the current\n        // vertex (a.k.a. particle)\n        vec2 subcellMid = initialPosition.xy * vec2(float(" + px + "), float(" + py + "));\n        // subcell is the 2d coord of this vertex' sub-cell\n        vec2 subcell = floor(subcellMid);\n        // translate the mid into super-grid coordinates\n        vec2 cellMid = subcellMid / vec2(cellSize);\n        // calculate the 2d coords of the super-cell this vertex falls into\n        vec2 cell = floor(cellMid);\n        // top left (TL) + bottom right (BR) of the super-cell in original grid coords\n        vec2 TL = (cellMid - vec2(0.5)) * vec2(cellSize); \n        vec2 BR = (cellMid + vec2(0.5)) * vec2(cellSize);\n        // Now we calculate the sub-cells that contain the super-cell's TL and BR \n        vec2 subcellTL = floor(TL);\n        vec2 subcellBR = floor(BR);\n        vec2 centerSubcell = mix(subcellTL, subcellBR, 0.5);\n        // a sub-cell dominates a super-cell iff it's the centerSubcell\n        bool dominatesCell = all(equal(subcell, centerSubcell));\n        if (dominatesCell) {\n          // The dominating cell's position should now be set to the center\n          // of the super-cell it dominates\n          vec2 superMid = (cell + vec2(0.5)) * cellSize / vec2(float(" + px + "), float(" + py + "));\n          vec2 offset = superMid - initialPosition.xy;\n          " + (transitionByAmount ? '' : 'offset = offset * vec2(ease);') + "\n          position.xy += offset;\n        } else {\n          pointSize = " + (transitionByAmount ? '0.' : '1. - ease') + ";\n          rgb = " + (transitionByAmount ? 'vec3(0.)' : 'rgb * vec3(1. - ease)') + ";\n        }\n      ";
    } 
  };

  ParticlesReduceEffect.getDisplayName = function getDisplayName () {
    return EffectName$16;
  };

  ParticlesReduceEffect.getDescription = function getDescription () {
    return EffectDescription$16;
  };

  ParticlesReduceEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new ParticlesReduceConfigUI();
    }

    return this._configUI;
  };

  ParticlesReduceEffect.getDefaultConfig = function getDefaultConfig () {
    return {
      amount: 0.5,
      animation: 'fade-out'
    };
  };

  ParticlesReduceEffect.getRandomConfig = function getRandomConfig () {
    return {
      amount: Math.random(),
      animation: ['fade-out', 'amount'][Math.floor(Math.random() * 2)]
    };
  };

  return ParticlesReduceEffect;
}(Effect));

var EffectName$17 = 'Vignette';
var EffectDescription$17 = 'Fade out the edges to make it look like an old crt tv';

var VignetteConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function VignetteConfigUI() {
    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$17 + "</legend>\n        Nothing to be configured :)\n      </fieldset>\n    "));
    var ui = this.element;
  }

  if ( ConfigUI$$1 ) VignetteConfigUI.__proto__ = ConfigUI$$1;
  VignetteConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  VignetteConfigUI.prototype.constructor = VignetteConfigUI;

  VignetteConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  VignetteConfigUI.prototype.getConfig = function getConfig () {
    return {};
  };

  VignetteConfigUI.prototype.applyConfig = function applyConfig (config) {
  };

  return VignetteConfigUI;
}(ConfigUI));

var VignetteEffect = /*@__PURE__*/(function (Effect$$1) {
  function VignetteEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) VignetteEffect.__proto__ = Effect$$1;
  VignetteEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  VignetteEffect.prototype.constructor = VignetteEffect;

  VignetteEffect.register = function register (instance, props, uniforms, vertexShader, fragmentShader) {
    fragmentShader.mainBody += "\n      // magic taken from https://www.shadertoy.com/view/MsXGD4\n      vec2 uv = (frag_coord - 0.5) * 0.98;\n      float vignette = clamp(pow(cos(uv.x * 3.1415), 1.2) * pow(cos(uv.y * 3.1415), 1.2) * 50.0, 0.0, 1.0);\n      rgb = mix(background_color.rgb, rgb, vignette);\n    ";
  };

  VignetteEffect.getDisplayName = function getDisplayName () {
    return EffectName$17;
  };

  VignetteEffect.getDescription = function getDescription () {
    return EffectDescription$17;
  };

  VignetteEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new VignetteConfigUI();
    }

    return this._configUI;
  };

  VignetteEffect.getDefaultConfig = function getDefaultConfig () {
    return {};
  };

  VignetteEffect.getRandomConfig = function getRandomConfig () {
    return {};
  };

  return VignetteEffect;
}(Effect));

var EffectName$18 = 'Letters';
var EffectDescription$18 = 'Render particles in the shape of letters';

var LettersConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function LettersConfigUI() {
    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$18 + "</legend>\n        Nothing to be configured :)\n      </fieldset>\n    "));
    var ui = this.element;
  }

  if ( ConfigUI$$1 ) LettersConfigUI.__proto__ = ConfigUI$$1;
  LettersConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  LettersConfigUI.prototype.constructor = LettersConfigUI;

  LettersConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  LettersConfigUI.prototype.getConfig = function getConfig () {
    return {};
  };

  LettersConfigUI.prototype.applyConfig = function applyConfig (config) {
  };

  return LettersConfigUI;
}(ConfigUI));

var LettersEffect = /*@__PURE__*/(function (Effect$$1) {
  function LettersEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) LettersEffect.__proto__ = Effect$$1;
  LettersEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  LettersEffect.prototype.constructor = LettersEffect;

  LettersEffect.register = function register (instance, props, uniforms, vertexShader, fragmentShader) {
    fragmentShader.functions += "\n      // https://stackoverflow.com/a/1501725/1468532\n      float pointToLineDist(vec2 p, vec2 v, vec2 w) {\n        // Return minimum distance between line segment vw and point p\n        float l2 = pow(distance(v, w), 2.);  // i.e. |w-v|^2 -  avoid a sqrt\n        if (l2 == 0.0) return distance(p, v);   // v == w case\n        // Consider the line extending the segment, parameterized as v + t (w - v).\n        // We find projection of point p onto the line.\n        // It falls where t = [(p-v) . (w-v)] / |w-v|^2\n        // We clamp t from [0,1] to handle points outside the segment vw.\n        float t = max(0., min(1., dot(p - v, w - v) / l2));\n        vec2 projection = v + t * (w - v);  // Projection falls on the segment\n        return distance(p, projection);\n      }\n      int colorToLetter(vec3 color) {\n        vec3 hsv = rgb2hsv(color);\n        return int(65. + mod(floor(255. * hsv.x), 26.));\n      }\n      float getDistFromA(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.4, -.4),      vec2(0., .4));\n        float d2 = pointToLineDist(coord, vec2(0., .4),        vec2(.4, -.4));\n        float d3 = pointToLineDist(coord, vec2(-.25, -.125), vec2(.25, -.125));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromB(vec2 coord) {\n        // Back line\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4),  vec2(-.375, .4));\n        // horizontal lines\n        float d2 = pointToLineDist(coord, vec2(-.375, .4),   vec2(0.125, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, .1),   vec2(0.25, .1));\n        float d4 = pointToLineDist(coord, vec2(-.375, -.4),  vec2(0.25, -.4));\n        // vertical lines\n        float d5 = pointToLineDist(coord, vec2(0.125, .4),    vec2(0.125, .1));\n        float d6 = pointToLineDist(coord, vec2(0.25, .1), vec2(0.25, -.4));\n        float dist = min(min(min(min(min(d1, d2), d3), d4), d5), d6);\n        return dist;\n      }\n      float getDistFromC(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.375), vec2(-.375, .375));\n        float d2 = pointToLineDist(coord, vec2(-.375, .375),  vec2(.375, .375));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.375), vec2(.375, -.375));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromD(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.25, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.25, -.4));\n        float d4 = pointToLineDist(coord, vec2(.25, .4),    vec2(.375, 0.));\n        float d5 = pointToLineDist(coord, vec2(.25, -.4),   vec2(.375, 0.));\n        float dist = min(min(min(min(d1, d2), d3), d4), d5);\n        return dist;\n      }\n      float getDistFromE(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float d4 = pointToLineDist(coord, vec2(-.375, .1),  vec2(.25, .1));\n        float dist = min(min(min(d1, d2), d3), d4);\n        return dist;\n      }\n      float getDistFromF(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, 0.),  vec2(.25, 0.));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromG(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.375), vec2(-.375, .375));\n        float d2 = pointToLineDist(coord, vec2(-.375, .375),  vec2(.375, .375));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.375), vec2(.375, -.375));\n        float d4 = pointToLineDist(coord, vec2(.375, -.375), vec2(.375, 0.));\n        float d5 = pointToLineDist(coord, vec2(.375, 0.), vec2(.1, 0.));\n        float dist = min(min(min(min(d1, d2), d3), d4), d5);\n        return dist;\n      }\n      float getDistFromH(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, 0.));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromI(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(0., -.4), vec2(0., .4));\n        float dist = d1;\n        return dist;\n      }\n      float getDistFromJ(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.125, .5), vec2(.125, .5));\n        float d2 = pointToLineDist(coord, vec2(0., -.2), vec2(0., .5));\n        float d3 = pointToLineDist(coord, vec2(0., -.2), vec2(-.25, -.5));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromK(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, -.4));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromL(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.25, -.4));\n        float dist = min(d1, d2);\n        return dist;\n      }\n      float getDistFromM(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(0., 0.));\n        float d4 = pointToLineDist(coord, vec2(.375, .4),   vec2(0., 0.));\n        float dist = min(min(min(d1, d2), d3), d4);\n        return dist;\n      }\n      float getDistFromN(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, -.4));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromO(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d4 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float dist = min(min(min(d1, d2), d3), d4);\n        return dist;\n      }\n      float getDistFromP(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, .4),   vec2(.375, 0.));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d4 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, 0.));\n        float dist = min(min(min(d1, d2), d3), d4);\n        return dist;\n      }\n      float getDistFromQ(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d4 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float d5 = pointToLineDist(coord, vec2(.2, -.2), vec2(.5, -.5));\n        float dist = min(min(min(min(d1, d2), d3), d4), d5);\n        return dist;\n      }\n      float getDistFromR(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, .4),   vec2(.375, 0.));\n        float d3 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d4 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, 0.));\n        float d5 = pointToLineDist(coord, vec2(-.375, 0.), vec2(.375, -.4));\n        float dist = min(min(min(min(d1, d2), d3), d4), d5);\n        return dist;\n      }\n      float getDistFromS(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, 0.),  vec2(.375, -0.));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float d4 = pointToLineDist(coord, vec2(-.375, .4),  vec2(-.375, 0.));\n        float d5 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, 0.));\n        float dist = min(min(min(min(d1, d2), d3), d4), d5);\n        return dist;\n      }\n      float getDistFromT(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(0., -.4),   vec2(0., .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4), vec2(.375, .4));\n        float dist = min(d1, d2);\n        return dist;\n      }\n      float getDistFromU(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getDistFromV(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, .4), vec2(0., -.4));\n        float d2 = pointToLineDist(coord, vec2(.375, .4),  vec2(0., -.4));\n        float dist = min(d1, d2);\n        return dist;\n      }\n      float getDistFromW(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(-.375, .4));\n        float d2 = pointToLineDist(coord, vec2(.375, -.4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4),  vec2(0., 0.));\n        float d4 = pointToLineDist(coord, vec2(.375, -.4),   vec2(0., 0.));\n        float dist = min(min(min(d1, d2), d3), d4);\n        return dist;\n      }\n      float getDistFromX(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4), vec2(.375, -.4));\n        float dist = min(d1, d2);\n        return dist;\n      }\n      float getDistFromY(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.5), vec2(.375, .4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4), vec2(0., 0.));\n        float dist = min(d1, d2);\n        return dist;\n      }\n      float getDistFromZ(vec2 coord) {\n        float d1 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, -.4));\n        float d2 = pointToLineDist(coord, vec2(-.375, .4),  vec2(.375, .4));\n        float d3 = pointToLineDist(coord, vec2(-.375, -.4), vec2(.375, .4));\n        float dist = min(min(d1, d2), d3);\n        return dist;\n      }\n      float getLetterOpacity(int letter, vec2 coord) {\n        float dist = 0.;\n        if (letter == 65)\n          dist = getDistFromA(coord);\n        else if (letter == 66)\n          dist = getDistFromB(coord);\n        else if (letter == 67)\n          dist = getDistFromC(coord);\n        else if (letter == 68)\n          dist = getDistFromD(coord);\n        else if (letter == 69)\n          dist = getDistFromE(coord);\n        else if (letter == 70)\n          dist = getDistFromF(coord);\n        else if (letter == 71)\n          dist = getDistFromG(coord);\n        else if (letter == 72)\n          dist = getDistFromH(coord);\n        else if (letter == 73)\n          dist = getDistFromI(coord);\n        else if (letter == 74)\n          dist = getDistFromJ(coord);\n        else if (letter == 75)\n          dist = getDistFromK(coord);\n        else if (letter == 76)\n          dist = getDistFromL(coord);\n        else if (letter == 77)\n          dist = getDistFromM(coord);\n        else if (letter == 78)\n          dist = getDistFromN(coord);\n        else if (letter == 79)\n          dist = getDistFromO(coord);\n        else if (letter == 80)\n          dist = getDistFromP(coord);\n        else if (letter == 81)\n          dist = getDistFromQ(coord);\n        else if (letter == 82)\n          dist = getDistFromR(coord);\n        else if (letter == 83)\n          dist = getDistFromS(coord);\n        else if (letter == 84)\n          dist = getDistFromT(coord);\n        else if (letter == 85)\n          dist = getDistFromU(coord);\n        else if (letter == 86)\n          dist = getDistFromV(coord);\n        else if (letter == 87)\n          dist = getDistFromW(coord);\n        else if (letter == 88)\n          dist = getDistFromX(coord);\n        else if (letter == 89)\n          dist = getDistFromY(coord);\n        else if (letter == 90)\n          dist = getDistFromZ(coord);\n        // Opacity is only the distance to the letter atm. Therefore we\n        // do some mathematic magic to get to a more sensible opacity\n        // value\n        float tooFar = .1;\n        float opacity = min(dist, tooFar * .99);\n        opacity = 1. / ((opacity - tooFar) * 100.) + 1.1;\n        return max(min(opacity, 1.), 0.);\n      }\n    ";
    fragmentShader.mainBody += "\n      int letter = colorToLetter(rgb);\n      rgb.rgb *= getLetterOpacity(letter, point_coord);\n    ";
  };

  LettersEffect.getDisplayName = function getDisplayName () {
    return EffectName$18;
  };

  LettersEffect.getDescription = function getDescription () {
    return EffectDescription$18;
  };

  LettersEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new LettersConfigUI();
    }

    return this._configUI;
  };

  LettersEffect.getDefaultConfig = function getDefaultConfig () {
    return {};
  };

  LettersEffect.getRandomConfig = function getRandomConfig () {
    return {};
  };

  return LettersEffect;
}(Effect));

var EffectName$19 = 'Dummy';
var EffectDescription$19 = 'An effect that has no effect - useful to extend the timeline length without having anything happen';

var DummyConfigUI = /*@__PURE__*/(function (ConfigUI$$1) {
  function DummyConfigUI() {
    ConfigUI$$1.call(this);
    this.element = parseHtml(("\n      <fieldset>\n        <legend>" + EffectName$19 + "</legend>\n        Nothing to be configured :)\n      </fieldset>\n    "));
    var ui = this.element;
  }

  if ( ConfigUI$$1 ) DummyConfigUI.__proto__ = ConfigUI$$1;
  DummyConfigUI.prototype = Object.create( ConfigUI$$1 && ConfigUI$$1.prototype );
  DummyConfigUI.prototype.constructor = DummyConfigUI;

  DummyConfigUI.prototype.getElement = function getElement () {
    return this.element;
  };

  DummyConfigUI.prototype.getConfig = function getConfig () {
    return {};
  };

  DummyConfigUI.prototype.applyConfig = function applyConfig (config) {
  };

  return DummyConfigUI;
}(ConfigUI));

var DummyEffect = /*@__PURE__*/(function (Effect$$1) {
  function DummyEffect () {
    Effect$$1.apply(this, arguments);
  }

  if ( Effect$$1 ) DummyEffect.__proto__ = Effect$$1;
  DummyEffect.prototype = Object.create( Effect$$1 && Effect$$1.prototype );
  DummyEffect.prototype.constructor = DummyEffect;

  DummyEffect.register = function register (instance, props, uniforms, vertexShader) {
  };

  DummyEffect.getDisplayName = function getDisplayName () {
    return EffectName$19;
  };

  DummyEffect.getDescription = function getDescription () {
    return EffectDescription$19;
  };

  DummyEffect.getConfigUI = function getConfigUI () {
    if (!this._configUI) {
      this._configUI = new DummyConfigUI();
    }

    return this._configUI;
  };

  DummyEffect.getDefaultConfig = function getDefaultConfig () {
    return {};
  };

  DummyEffect.getRandomConfig = function getRandomConfig () {
    return {};
  };

  return DummyEffect;
}(Effect));

// should be last
var effectList = [
  HueDisplaceEffect,
  ConvergePointEffect,
  ConvergeCircleEffect,
  WaveEffect,
  ChangeImageEffect,
  FlickrImageEffect,
  TrailsEffect,
  SmoothTrailsEffect,
  SmearEffect,
  StandingWaveEffect,
  SparkleEffect,
  ParticleSpacingEffect,
  ParticleDisplaceEffect,
  ParticleSizeByHueEffect,
  ParticlesReduceEffect,
  ResetDefaultImageEffect,
  WebcamEffect,
  VignetteEffect,
  LettersEffect,

  // Should be last
  DummyEffect
];
var byId = {};
for (var i = 0; i < effectList.length; i++) {
  byId[effectList[i].getId()] = effectList[i];
}

// Best website: http://tools.medialab.sciences-po.fr/iwanthue/index.php
var Colors = [
  [211,79,52],
  [98,112,225],
  [90,183,78],
  [176,95,211],
  [219,156,54],
  [209,78,175],
  [79,182,148],
  [219,68,120],
  [82,119,51],
  [110,85,168],
  [150,174,62],
  [75,121,187],
  [163,175,104],
  [156,84,154],
  [171,117,61],
  [80,179,221],
  [204,109,101],
  [164,152,224],
  [159,68,100],
  [221,135,188]
];
function getColorIndexForEffect(effect) {
  var idx = effectList.indexOf(effect);
  if (idx < 0) {
    throw new Error('Cannot get color for unregistered effect');
  }
  if (idx >= Colors.length) {
    console.warn('Not enough colors');
    return Colors.length - 1;
  }
  return idx;
}
function getColorClassnameForEffect(effect) {
  return ("effect-color-" + (getColorIndexForEffect(effect) + 1));
}

var EffectConfig = function EffectConfig(id, timeBegin, timeEnd, repetitions, config) {
  this.id = id;
  this.timeBegin = Math.round(timeBegin);
  this.timeEnd = Math.round(timeEnd);
  this.repetitions = repetitions;
  this.config = config;
};
EffectConfig.prototype.getEffectClass = function getEffectClass () {
  var clazz = byId[this.id];
  if (!clazz) {
    throw new Error(("No such effect: " + (this.id)));
  }
  return clazz;
};
/// @return the amout of time in milliseconds in which the effect
///       should perform one single repetition
EffectConfig.prototype.getPeriod = function getPeriod () {
  return (this.timeEnd - this.timeBegin) / this.repetitions;
};
EffectConfig.deserialize = function deserialize (obj) {
  if (obj.constructor.name === this.name) {
    return obj;
  } else {
    return new EffectConfig(obj.id, obj.timeBegin, obj.timeEnd, obj.repetitions, obj.config);
  }
};

/**
 *
 */
var TimelineEntry = function TimelineEntry(effect, timeline) {
  var this$1 = this;

  // Times are in milliseconds
  this.timeBegin = 0;
  this.timeEnd = 0;
  this.effect = effect;
  this.timeline = timeline;
  this.clickPrevented = false;
  this.config = null;

  var beginHandleClass = 'timeline-entry-begin-time-adjust';
  var endHandleClass = 'timeline-entry-end-time-adjust';
  this.element = parseHtml(("\n      <li class=\"" + (this.effect.isEventOnly() ? 'event' : '') + "\">\n        <div class=\"" + beginHandleClass + "\"></div>\n        <button type=\"button\" class=\"" + (getColorClassnameForEffect(this.effect)) + "\">\n          " + (this.effect.getDisplayName()) + "\n        </button>\n        <div class=\"" + endHandleClass + "\"></div>\n      </li>\n    "));
  this.setupTimeAdjustHandles();
  this.setupDragAndDrop();
  // Prevent a previous text selection from interfering with our custom
  // drag and drop
  this.element.addEventListener('mousedown', function () {
    if (document.selection) {
      document.selection.empty();
    } else if (window.getSelection) {
      window.getSelection().removeAllRanges();
    }
  });
  this.element.addEventListener('mousedown', function (evt) {
    // middle mouse button
    if (/* Middle mouse button: */ evt.which == 2 || evt.button == 4) {
      evt.preventDefault();
      this$1.remove();
    }
  });
  this.element.addEventListener('contextmenu', function (evt) {
    // right mouse button
    evt.preventDefault();
    this$1.remove();
  });

  this.openConfigBtn = this.element.querySelector('button');
  this.openConfigBtn.addEventListener('click', function () {
    if (this$1.clickPrevented) {
      this$1.clickPrevented = false;
      return;
    }
    this$1.timeline.effectConfigDialog.promptUser(this$1)
    .then(
      function (newState) {
        this$1.loadState(newState);
        this$1.timeline.notifyChange();
      },
      function (deleted) {
        if (deleted) {
          if (deleted !== true) {
            // Another error occurred
            throw deleted;
          }
          this$1.remove();
        }
      }
    );
  });
};

TimelineEntry.prototype.remove = function remove () {
  this.timeline.deleteEntry(this);
  this.timeline.renderHtml();
  this.timeline.notifyChange();
};

TimelineEntry.prototype.setupHorizontalDragging = function setupHorizontalDragging () {
    var this$1 = this;

  this.element.addEventListener('mousedown', function (evt) {
    if (evt.target.classList.contains('timeline-entry-begin-time-adjust') ||
        evt.target.classList.contains('timeline-entry-end-time-adjust')) {
      return;
    }
    var startX = evt.clientX;
    var prevX = startX;
    var thres = 5;
    var started = false;
    var onDrag = function (evt) {
      if (!started) {
        if (Math.abs(evt.clientX - startX) > thres) {
          started = true;
        }
      } else {
        var delta = evt.clientX - prevX;
        prevX = evt.clientX;
        var duration = this$1.timeEnd - this$1.timeBegin;
        this$1.timeBegin = Math.max(0, Math.round(this$1.timeBegin + ((delta / this$1.timeline.pxPerSecond) * 1000)));
        this$1.timeEnd = this$1.timeBegin + duration;
        this$1.timeline.notifyChange();
      }

      if (started) {
        this$1.clickPrevented = true;
      }
    };
    var onDragEnd = function (evt) {
      document.documentElement.removeEventListener('mousemove', onDrag);
      document.documentElement.removeEventListener('mouseup', onDragEnd);
    };
    document.documentElement.addEventListener('mousemove', onDrag);
    document.documentElement.addEventListener('mouseup', onDragEnd);
  });
};

TimelineEntry.prototype.setupVericalDragging = function setupVericalDragging () {
  return;
  // Cross-timeline dragging and dropping is more complicated, so we
  // handle it independently from horizontal dragging
  this.element.addEventListener('mousedown', function (evt) {
    if (evt.target.classList.contains('timeline-entry-begin-time-adjust') ||
        evt.target.classList.contains('timeline-entry-end-time-adjust')) {
      return;
    }
    var onDrag = function (evt) {
      // TODO
    };
    var onDragEnd = function (evt) {
      document.documentElement.removeEventListener('mousemove', onDrag);
      document.documentElement.removeEventListener('mouseup', onDragEnd);
    };
    document.documentElement.addEventListener('mousemove', onDrag);
    document.documentElement.addEventListener('mouseup', onDragEnd);
  });
};

TimelineEntry.prototype.setupDragAndDrop = function setupDragAndDrop () {
  this.setupHorizontalDragging();
  this.setupVericalDragging();
};

TimelineEntry.setupAdjustHandle = function setupAdjustHandle (elm, onAdjustCallback) {
  elm.addEventListener('mousedown', function (evt) {
    evt.preventDefault(); // prevent dragging parent

    var prevX = evt.clientX;
    var onAdjust = function (evt) {
      onAdjustCallback(evt.clientX - prevX);
      prevX = evt.clientX;
    };
    var onStopAdjust = function () {
      document.documentElement.removeEventListener('mousemove', onAdjust);
      document.documentElement.removeEventListener('mouseup', onStopAdjust);
    };

    document.documentElement.addEventListener('mousemove', onAdjust);
    document.documentElement.addEventListener('mouseup', onStopAdjust);
  });
};

TimelineEntry.prototype.setupTimeAdjustHandles = function setupTimeAdjustHandles () {
    var this$1 = this;

  if (this.effect.isEventOnly()) {
    return;
  }

  var beginHandle = this.element.querySelector('.timeline-entry-begin-time-adjust');
  TimelineEntry.setupAdjustHandle(beginHandle, function (delta) {
    var newBegin = Math.max(0, this$1.timeBegin + ((delta / this$1.timeline.pxPerSecond) * 1000));
    if (newBegin < this$1.timeEnd) {
      this$1.timeBegin = Math.round(newBegin);
      this$1.timeline.notifyChange();
    }
  });
  var endHandle = this.element.querySelector('.timeline-entry-end-time-adjust');
  TimelineEntry.setupAdjustHandle(endHandle, function (delta) {
    var newEnd = this$1.timeEnd + ((delta / this$1.timeline.pxPerSecond) * 1000);
    if (newEnd > this$1.timeBegin) {
      this$1.timeEnd = Math.round(newEnd);
      this$1.timeline.notifyChange();
    }
  });
};

TimelineEntry.prototype.loadState = function loadState (state) {
  this.timeBegin = state.timeBegin;
  this.timeEnd = state.timeEnd;
  this.repetitions = state.repetitions;
  this.config = state.config;
};
TimelineEntry.prototype.getElement = function getElement () {
  return this.element;
};
TimelineEntry.prototype.getConfiguration = function getConfiguration () {
  return new EffectConfig(
    this.effect.getId(),
    this.timeBegin,
    this.timeEnd,
    this.repetitions,
    this.config
  );
};
TimelineEntry.prototype.renderStyles = function renderStyles () {
  var li = this.getElement();
  var left = (this.timeBegin / 1000) * this.timeline.pxPerSecond;
  var width = ((this.timeEnd - this.timeBegin) / 1000) * this.timeline.pxPerSecond;
  li.style.left = left + "px";
  li.style.width = width + "px";
};

/**
 *
 */
var TimelineTrack = function TimelineTrack(trackNumber, timeline) {
  this.elements = [];
  this.timeline = timeline;
  this.elements.push(parseHtml(("\n      <td>\n        <h3>Track " + trackNumber + "</h3>\n      </td>\n    ")));
  this.elements.push(parseHtml("\n      <td>\n        <ol>\n        </ol>\n      </td>\n    "));
  this.entryListElm = this.elements[1].querySelector('ol');
  this.entryList = [];
  this.width = 0;
};

TimelineTrack.prototype.dropNewEffect = function dropNewEffect (effect, clientX, clientY, width, height) {
  if (this.timeline.isLocked()) {
    return false;
  }

  var elm = this.getTrackElement();
  var rect = elm.getBoundingClientRect();
  if (clientX >= rect.left && clientX <= rect.right &&
      clientY >= rect.top && clientY <= rect.bottom) {
    var entry = new TimelineEntry(effect, this.timeline);
    var timeBegin = Math.round(Math.max(0, clientX - (width / 2) - rect.left) / (this.timeline.pxPerSecond / 1000));
    entry.loadState({
      timeBegin: timeBegin,
      timeEnd:   timeBegin + 1000,
      repetitions: 1,
      config:    effect.getDefaultConfig()
    });
    this.addEntry(entry);
    this.renderHtml();
    this.timeline.notifyChange();
    return true;
  }
  return false;
};

TimelineTrack.prototype.addEntry = function addEntry (entry) {
  this.entryList.push(entry);
};

TimelineTrack.prototype.getElements = function getElements () {
  return this.elements;
};
TimelineTrack.prototype.getTrackElement = function getTrackElement () {
  return this.elements[1];
};
TimelineTrack.prototype.renderHtml = function renderHtml () {
  var lis = document.createDocumentFragment();
  for (var i = 0; i < this.entryList.length; i++) {
    var entry = this.entryList[i];
    var li = entry.getElement();
    lis.appendChild(li);
  }
  clearChildNodes(this.entryListElm);
  this.entryListElm.appendChild(lis);
};
TimelineTrack.prototype.renderStyles = function renderStyles () {
  var maxEnd = 0;
  for (var i = 0; i < this.entryList.length; i++) {
    var entry = this.entryList[i];
    entry.renderStyles();
    maxEnd = Math.max(maxEnd, entry.timeEnd);
  }
  var width = Math.round(maxEnd / 1000 * this.timeline.pxPerSecond);
  if (width > this.width) {
    this.width = width;
    this.getTrackElement().style.minWidth = width + "px";
  }
};

/**
 *
 */
var Timeticks = function Timeticks(clock) {
  var this$1 = this;

  this.clock = clock;
  this.element = document.querySelector('.menu-timeline-timeticks');
  this.styleElm = document.createElement('style');
  document.body.appendChild(this.styleElm);
  this.stylesheet = this.styleElm.sheet;
  this.firstTick = this.element.querySelector('.menu-timeline-timetick');
  this.adjustPosition();
  this.zoomLevel = 1;
  this.zoomInBtn = document.querySelector('.menu-timeline-zoom-in');
  this.zoomOutBtn = document.querySelector('.menu-timeline-zoom-out');
  this.scaleChangeListeners = [];

  var onZoomlevelChange = function () {
    this$1.render();
    for (var i = 0; i < this$1.scaleChangeListeners.length; i++) {
      this$1.scaleChangeListeners[i](this$1.getPxPerSecond());
    }
  };
  this.zoomInBtn.addEventListener('click', function () {
    this$1.zoomLevel *= 1.5;
    onZoomlevelChange();
  });
  this.zoomOutBtn.addEventListener('click', function () {
    this$1.zoomLevel /= 1.5;
    onZoomlevelChange();
  });
  this.element.addEventListener('click', function (evt) {
    var left = Math.round(this$1.element.getBoundingClientRect().left);
    var x = Math.max(0, evt.clientX - left - this$1.getTimelineBorderWidth());
    var t = Math.min(this$1.duration, x / this$1.getPxPerSecond() * 1000);
    this$1.clock.setTime(t);
  });
};
Timeticks.prototype.getTimelineBorderWidth = function getTimelineBorderWidth () {
  var tickWidth = this.firstTick.offsetWidth;
  return Math.round((tickWidth / 2) + 5);
};
Timeticks.prototype.adjustPosition = function adjustPosition () {
  var cssRules = this.stylesheet.cssRules;
  var borderWidth = this.getTimelineBorderWidth();
  var selectorPath = '.menu-timeline-container .menu-timeline-scrollable-container .menu-timeline-content';
  this.stylesheet.insertRule(("\n      " + selectorPath + " tr > th:first-child + th {\n        border-left-width: " + borderWidth + "px;\n      }"), cssRules.length
  );
  this.stylesheet.insertRule(("\n      " + selectorPath + " tr > td:first-child + td {\n        border-left-width: " + borderWidth + "px;\n      }"), cssRules.length
  );
  this.stylesheet.insertRule("\n      .menu-timeline-timetick {\n        transform: translateX(-50%);\n      }\n    ", cssRules.length);
};
/**
 * @return px
 */
Timeticks.prototype.getOptimalTimetickSpace = function getOptimalTimetickSpace () {
  return 2 * this.firstTick.offsetWidth;
};
Timeticks.prototype.getPxPerSecond = function getPxPerSecond () {
  return this.getOptimalTimetickSpace() * this.zoomLevel;
};
/**
 * @return ms
 */
Timeticks.prototype.getOptimalTimeBetweenTicks = function getOptimalTimeBetweenTicks () {
  var tickSpace = this.getOptimalTimetickSpace();
  var pxPerMillis = (tickSpace * this.zoomLevel) / 1000;
  var time = 1000; // ms
  var multiplyNext = 5;
  while (time * pxPerMillis < tickSpace) {
    time *= multiplyNext;
    // alternate between 5 and 10
    multiplyNext = multiplyNext === 2 ? 5 : 2;
  }
  multiplyNext = 0.5;
  while (true) {
    if (time * multiplyNext * pxPerMillis <= tickSpace) {
      break;
    } else {
      time = time * multiplyNext;
      // alternate between 0.5 and 0.1
      multiplyNext = multiplyNext === 0.5 ? 0.2 : 0.5;
    }
  }
  return time;
};
Timeticks.prototype.addScaleChangeListener = function addScaleChangeListener (listener) {
  this.scaleChangeListeners.push(listener);
};
Timeticks.prototype.setDuration = function setDuration (duration) {
  this.duration = duration;
  this.render();
};
Timeticks.msToStr = function msToStr (ms) {
  var zeroPad = function(num, places) {
    var zero = places - num.toString().length + 1;
    return Array(+(zero > 0 && zero)).join('0') + num;
  };
  var rem = ms;
  var m = Math.floor(rem / 1000 / 60);
  rem -= m * 1000 * 60;
  var s = Math.floor(rem / 1000);
  rem -= s * 1000;
  var cs = Math.floor(rem / 10);

  return ((zeroPad(m, 2)) + ":" + (zeroPad(s, 2)) + ":" + (zeroPad(cs, 2)));
};
Timeticks.prototype.render = function render () {
  if (this.duration !== this.renderedDuration ||
      this.zoomLevel !== this.renderedZoomLevel) {
    this.renderedDuration = this.duration;
    this.renderedZoomLevel = this.zoomLevel;
    var container = this.firstTick.parentNode;
    clearChildNodes(container);
    container.appendChild(this.firstTick);
    var pxPerMillis = this.getPxPerSecond() / 1000;
    var timeBetweenTicks = this.getOptimalTimeBetweenTicks();
    var time = timeBetweenTicks;
    do {
      var tick = parseHtml(("<span class=\"menu-timeline-timetick\">" + (Timeticks.msToStr(time)) + "</span>"));
      tick.style.left = (pxPerMillis * time) + "px";
      container.appendChild(tick);
      time += timeBetweenTicks;
    } while (time <= this.duration);
  }
};
Timeticks.prototype.getElement = function getElement () {
  return this.element;
};

var TimeIndicator = function TimeIndicator(menu, timeticks) {
  var this$1 = this;

  this.menu = menu;
  this.clock = menu.clock;
  this.timeticks = timeticks;
  this.element = document.querySelector('.menu-timeline-container .menu-timeline-position-indicator');
  this.element.style.right = 'initial';

  if (!this.element) {
    throw new Error('Cannot find timeline position indicator element');
  }
  var updateLoop = function () {
    this$1.updateStyles();
    window.requestAnimationFrame(updateLoop);
  };
  updateLoop();
};
TimeIndicator.prototype.updateStyles = function updateStyles () {
  if (!this.menu.isVisible()) {
    return;
  }
  this.element.style.left = '0px';
  var selfRect = this.element.getBoundingClientRect();
  var ticksElm = this.timeticks.getElement();
  var ticksBLW = window.getComputedStyle(ticksElm).borderLeftWidth;
  var ticksRect = ticksElm.getBoundingClientRect();
  var ticksBorder = parseInt(ticksBLW.substring(0, ticksBLW.length - 2), 10);
  var timePx = this.clock.getTime() * this.timeticks.getPxPerSecond() / 1000;
  this.element.style.left = (ticksRect.left + ticksBorder - selfRect.left + timePx) + "px";
};

var PauseButton = function PauseButton(menu) {
  var this$1 = this;

  var clock = menu.clock;
  this.clock = clock;
  this.element = document.querySelector('.menu-timeline-pause');
  this.element.addEventListener('click', function () {
    clock.setPaused(!clock.getPaused());
  });
  var onPauseClass = 'paused';
  clock.addPauseListener(function (paused) {
    if (paused) {
      this$1.element.classList.add(onPauseClass);
    } else {
      this$1.element.classList.remove(onPauseClass);
    }
  });
  window.document.addEventListener('keydown', function (e) {
    if (this$1.element.disabled)
      { return; }
    if (e.key === ' ') {
      clock.tooglePause();
    }
  });
  menu.addChangeListener(function (config) {
    if (config.duration === 0) {
      this$1.disable();
      clock.setPaused(true);
    } else
      { this$1.enable(); }
  });
};
PauseButton.prototype.enable = function enable () {
  this.element.disabled = false;
};
PauseButton.prototype.disable = function disable () {
  this.element.disabled = true;
};

var RandomplayButton = function RandomplayButton(timeline) {
  var this$1 = this;

  this.timeline = timeline;
  this.menu = timeline.menu;
  this.clock = this.menu.clock;
  this.onClockWrap = null;
  this.element = document.getElementById('menu-timeline-randomplay');
  this.didJustCreateNewTimeline = false;
  this.element.addEventListener('click', function () {
    if (this$1.onClockWrap === null) {
      this$1.start();
    } else {
      this$1.stop();
    }
  });
  this.menu.addChangeListener(function () {
    if (this$1.didJustCreateNewTimeline) {
      this$1.didJustCreateNewTimeline = false;
    } else {
      this$1.stop();
    }
  });
};
RandomplayButton.prototype.start = function start () {
    var this$1 = this;

  if (this.onClockWrap === null) {
    this.element.checked = true;
    this.onClockWrap = function () { return this$1.fillRandomTimeline(); };
    this.clock.addWrapListener(this.onClockWrap);
    this.fillRandomTimeline();
    this.timeline.setLocked(true);
    this.clock.setPaused(false);
  }
};
RandomplayButton.prototype.stop = function stop () {
  if (this.onClockWrap !== null) {
    this.element.checked = false;
    this.clock.removeWrapListener(this.onClockWrap);
    this.onClockWrap = null;
    this.timeline.setLocked(false);
  }
};

RandomplayButton.prototype.fillRandomTimeline = function fillRandomTimeline () {
  var config = RandomplayButton.generateRandomTimeline(this.menu.submittedConfig);
  this.didJustCreateNewTimeline = true;
  this.menu.applyConfig(config);
  this.menu.submit();
};

RandomplayButton.trimTimeline = function trimTimeline (timeline) {
  var earliest = Number.POSITIVE_INFINITY;
  for (var t = 0; t < timeline.length; t++) {
    var track = timeline[t];
    for (var e = 0; e < track.length; e++) {
      var effect = track[e];
      earliest = Math.min(effect.timeBegin, earliest);
    }
  }
  for (var t$1 = 0; t$1 < timeline.length; t$1++) {
    var track$1 = timeline[t$1];
    for (var e$1 = 0; e$1 < track$1.length; e$1++) {
      var effect$1 = track$1[e$1];
      effect$1.timeBegin -= earliest;
    }
  }
};

RandomplayButton.generateRandomTimeline = function generateRandomTimeline (currentConfig) {
  var config = Object.assign({}, currentConfig);

  config.effects = [];
  config.duration = 0;

  for (var i = 0; i < effectList.length; i++) {
    if (effectList[i].getId() == "FlickrImageEffect") {
      continue;
    }

    var timeBegin = Math.round(Math.random() * 10000);
    var duration = Math.round(Math.random() * 9000 + 1000);

    config.effects.push([new EffectConfig(
      effectList[i].getId(),
      timeBegin,
      timeBegin + duration,
      1,
      effectList[i].getRandomConfig()
    )]);

    config.duration = Math.max(config.duration, timeBegin + duration);
  }
  RandomplayButton.trimTimeline(config.effects);

  //TODO: does not work...
  //config.effects.push([new EffectConfig("FlickrImageEffect", 0, config.duration, 1, { searchTerm: '' })]);

  return config;
};

var TimeDisplay = function TimeDisplay(menu) {
  var this$1 = this;

  this.element = document.querySelector('.menu-timeline-current-time');
  this.menu = menu;
  this.clock = menu.clock;
  var updateLoop = function () {
    this$1.update();
    window.requestAnimationFrame(updateLoop);
  };
  updateLoop();
};
TimeDisplay.prototype.update = function update () {
  if (!this.menu.isVisible()) {
    return;
  }
  var time = this.clock.getTime();
  if (time < 0) {
    time = 0;
  }
  if (!this.clock.isPaused()) {
    this.element.innerHTML = Timeticks.msToStr(time);
  }
};

/**
 *
 */
var Timeline = function Timeline(menu) {
  var this$1 = this;

  this.menu = menu;
  this.element = document.querySelector('.menu-timeline-container');
  this.trackList = [];
  this.locked = false;
  this.trackListElm = this.element.querySelector('.menu-timeline-tracks');
  this.effectConfigDialog = new EffectConfigDialog();
  this.timeticks = new Timeticks(menu.clock);
  this.timeDisplay = new TimeDisplay(menu);
  this.pauseButton = new PauseButton(menu);
  this.randomplayButton = new RandomplayButton(this);
  this.positionIndicator = new TimeIndicator(menu, this.timeticks);
  this.pxPerSecond = this.timeticks.getOptimalTimetickSpace();
  this.timeticks.addScaleChangeListener(function () {
    this$1.pxPerSecond = this$1.timeticks.getPxPerSecond();
    this$1.renderStyles();
  });
};
Timeline.prototype.loadTimeline = function loadTimeline (trackList) {
  this.trackList = [];
  for (var i = 0; i < trackList.length; i++) {
    var track = new TimelineTrack(i + 1, this);
    this.trackList.push(track);
    for (var j = 0; j < trackList[i].length; j++) {
      var entryDesc = EffectConfig.deserialize(trackList[i][j]);
      try {
        var entry = new TimelineEntry(entryDesc.getEffectClass(), this);
        entry.loadState(entryDesc);
        track.addEntry(entry);
      } catch (e) {
        // Probably the effect hasn't been found due to a developer
        // switching branches
        console.warn(e);
      }
    }
  }
  this.assertEmptyLastTrack(false);
  this.renderHtml();
  this.renderStyles();
  this.timeticks.setDuration(this.getTotalDuration());
};

Timeline.prototype.renderHtml = function renderHtml () {
    var this$1 = this;

  var rows = document.createDocumentFragment();
  var loop = function ( i ) {
    var track = this$1.trackList[i];
    track.renderHtml();
    var row = document.createElement('tr');
    var trackElms = track.getElements();
    trackElms.forEach(function (elm) { return row.appendChild(elm); });
    rows.appendChild(row);
  };

    for (var i = 0; i < this$1.trackList.length; i++) loop( i );
  clearChildNodes(this.trackListElm);
  this.trackListElm.appendChild(rows);
};
Timeline.prototype.renderStyles = function renderStyles () {
  for (var i = 0; i < this.trackList.length; i++) {
    var track = this.trackList[i];
    track.renderStyles();
  }
};
Timeline.prototype.forEachEntry = function forEachEntry (callback) {
  for (var i = 0; i < this.trackList.length; i++) {
    for (var j = 0; j < this.trackList[i].entryList.length; j++) {
      callback(this.trackList[i].entryList[j], this.trackList[i], j);
    }
  }
};
Timeline.prototype.getEffects = function getEffects () {
  var configs = [];
  for (var i = 0; i < this.trackList.length; i++) {
    var track = [];
    configs.push(track);
    for (var j = 0; j < this.trackList[i].entryList.length; j++) {
      track.push(this.trackList[i].entryList[j].getConfiguration());
    }
  }

  return configs;
};
Timeline.prototype.getTotalDuration = function getTotalDuration () {
  var maxEnd = 0;
  this.forEachEntry(function (entry) { return maxEnd = Math.max(maxEnd, entry.timeEnd); });
  return maxEnd;
};
Timeline.prototype.assertEmptyLastTrack = function assertEmptyLastTrack (render) {
    if ( render === void 0 ) render = true;

  var changed = false;
  var tracks = this.trackList;
  while (tracks.length > 1 &&
         tracks[tracks.length - 1].entryList.length === 0 &&
         tracks[tracks.length - 2].entryList.length === 0
  ) {
    tracks.splice(tracks.length - 1, 1);
    changed = true;
  }
  if (tracks.length === 0 || tracks[tracks.length - 1].entryList.length !== 0) {
    var track = new TimelineTrack(tracks.length + 1, this);
    tracks.push(track);
    changed = true;
  }
  if (changed && render) {
    // TODO probably inefficient
    this.renderHtml();
    this.renderStyles();
  }
};
Timeline.prototype.notifyChange = function notifyChange () {
  this.timeticks.setDuration(this.getTotalDuration());
  this.assertEmptyLastTrack();
  this.renderStyles();
  this.menu.notifyChange();
};
Timeline.prototype.deleteEntry = function deleteEntry (remove) {
  this.forEachEntry(function (entry, track, trackIndex) {
    if (entry === remove) {
      track.entryList.splice(trackIndex, 1);
    }
  });
};
Timeline.prototype.dropNewEffect = function dropNewEffect (effect, clientX, clientY, width, height) {
  for (var i = 0; i < this.trackList.length; i++) {
    if (this.trackList[i].dropNewEffect(effect, clientX, clientY, width, height)) {
      return true;
    }
  }
  return false;
};
Timeline.prototype.isLocked = function isLocked () {
  return this.locked;
};
Timeline.prototype.setLocked = function setLocked (locked) {
    if ( locked === void 0 ) locked = true;

  if (this.locked !== locked) {
    this.locked = locked;
    var lockedClass = 'locked';
    if (locked) {
      this.element.classList.add(lockedClass);
    } else {
      this.element.classList.remove(lockedClass);
    }
  }
};

/**
 * Base class of all controls participating in the main menu
 * This is rather for documenting the common interface than
 * offering concrete functionality for reuse.
 */
var Control = function Control(menu) {
  this.menu = menu;
};
// eslint-disable-next-line class-methods-use-this
Control.prototype.updateConfig = function updateConfig (/* config */) {
  throw new Error('Method not implemented');
};
// eslint-disable-next-line class-methods-use-this
Control.prototype.applyConfig = function applyConfig (/* config */) {
  throw new Error('Method not implemented');
};

function create() {
  return {
    "schemaVersion": 0,
    "backgroundColor": [
      0,
      0,
      0,
      1
    ],
    "xParticlesCount": 200,
    "yParticlesCount": 125,
    "defaultImageScaling": "crop-to-viewport",
    "defaultImageCropping": {
      "x": "crop-both",
      "y": "crop-both"
    },
    "particleScaling": 1,
    "particleShape": "circle",
    "particleFading": "none",
    "particleOverlap": "alpha blend",
    "effects": [
    ],
    "duration": 10000
  };
}

var schemaVersion = 0;
var backgroundColor = [
	0,
	0,
	0,
	1
];
var xParticlesCount = 200;
var yParticlesCount = 125;
var defaultImageScaling = "crop-to-viewport";
var defaultImageCropping = {
	x: "crop-both",
	y: "crop-both"
};
var particleScaling = 1;
var particleShape = "circle";
var particleFading = "none";
var particleOverlap = "alpha blend";
var effects = [
	[
		{
			id: "HueDisplaceEffect",
			timeBegin: 8592,
			timeEnd: 10613,
			repetitions: 1,
			config: {
				distance: 0.7319085067626532,
				scaleByValue: 0.4112831056504884,
				randomDirectionOffset: false,
				rotate: 0.6353214673534142
			}
		}
	],
	[
		{
			id: "ConvergePointEffect",
			timeBegin: 2189,
			timeEnd: 6844,
			repetitions: 1,
			config: {
			}
		}
	],
	[
		{
			id: "ConvergeCircleEffect",
			timeBegin: 9297,
			timeEnd: 13311,
			repetitions: 1,
			config: {
				rotationSpeed: 0.32695472212132115
			}
		}
	],
	[
		{
			id: "WaveEffect",
			timeBegin: 0,
			timeEnd: 2015,
			repetitions: 1,
			config: {
				multiplier: 0.3148697308748081,
				amplitude: 0.11115075915060912
			}
		}
	],
	[
		{
			id: "TrailsEffect",
			timeBegin: 7827,
			timeEnd: 14610,
			repetitions: 1,
			config: {
				fadein: 100,
				fadeout: 500
			}
		}
	],
	[
		{
			id: "SmoothTrailsEffect",
			timeBegin: 2845,
			timeEnd: 5692,
			repetitions: 1,
			config: {
				fadein: 100,
				fadeout: 500
			}
		}
	],
	[
		{
			id: "SmearEffect",
			timeBegin: 5041,
			timeEnd: 13056,
			repetitions: 1,
			config: {
				fadein: 100,
				fadeout: 500
			}
		}
	],
	[
		{
			id: "StandingWaveEffect",
			timeBegin: 9065,
			timeEnd: 13188,
			repetitions: 1,
			config: {
				maxAmplitude: 0.11655939598142143,
				waveCount: 12.072390651463863,
				timeInterpolation: "linear",
				waveFunction: "sine",
				dimension: "x"
			}
		}
	],
	[
		{
			id: "SparkleEffect",
			timeBegin: 4482,
			timeEnd: 10731,
			repetitions: 1,
			config: {
				scaleMin: 0.685,
				scaleMax: 2.563,
				ratio: 0.275,
				duration: 1485
			}
		}
	],
	[
		{
			id: "ParticleSpacingEffect",
			timeBegin: 5162,
			timeEnd: 13696,
			repetitions: 1,
			config: {
				xSpread: 0.5,
				ySpread: 1.5,
				easeInTime: 1000,
				easeOutTime: 1000,
				easeFunc: "sine"
			}
		}
	],
	[
		{
			id: "ParticleDisplaceEffect",
			timeBegin: 3543,
			timeEnd: 6774,
			repetitions: 1,
			config: {
				direction: 224.4457831353151,
				directionUnit: "degrees",
				distance: 0.023417750859263453,
				easeInTime: 1000,
				easeOutTime: 1000,
				easeFunc: "none"
			}
		}
	],
	[
		{
			id: "ParticleSizeByHueEffect",
			timeBegin: 1877,
			timeEnd: 11750,
			repetitions: 1,
			config: {
				scaling: 2.582142277304504,
				hueRotation: 4.761756559852353,
				easeInTime: 1000,
				easeOutTime: 1000,
				easeFunc: "linear"
			}
		}
	],
	[
		{
			id: "WebcamEffect",
			timeBegin: 0,
			timeEnd: 14610,
			repetitions: 1,
			config: {
				maxRetries: 3,
				retryTimeout: 1000,
				imageScaling: "crop-to-viewport",
				imageCropping: {
					x: "crop-both",
					y: "crop-both"
				}
			}
		}
	],
	[
	]
];
var duration = 14610;
var Preset1 = {
	schemaVersion: schemaVersion,
	backgroundColor: backgroundColor,
	xParticlesCount: xParticlesCount,
	yParticlesCount: yParticlesCount,
	defaultImageScaling: defaultImageScaling,
	defaultImageCropping: defaultImageCropping,
	particleScaling: particleScaling,
	particleShape: particleShape,
	particleFading: particleFading,
	particleOverlap: particleOverlap,
	effects: effects,
	duration: duration
};

var schemaVersion$1 = 0;
var backgroundColor$1 = [
	0,
	0,
	0,
	1
];
var xParticlesCount$1 = 200;
var yParticlesCount$1 = 125;
var defaultImageScaling$1 = "crop-to-viewport";
var defaultImageCropping$1 = {
	x: "crop-both",
	y: "crop-both"
};
var particleScaling$1 = 1;
var particleShape$1 = "circle";
var particleFading$1 = "none";
var particleOverlap$1 = "alpha blend";
var effects$1 = [
	[
		{
			id: "WebcamEffect",
			timeBegin: 0,
			timeEnd: 2152,
			repetitions: 1,
			config: {
				maxRetries: 3,
				retryTimeout: 1000,
				imageScaling: "crop-to-viewport",
				imageCropping: {
					x: "crop-both",
					y: "crop-both"
				}
			}
		}
	],
	[
		{
			id: "StandingWaveEffect",
			timeBegin: 0,
			timeEnd: 2143,
			repetitions: 1,
			config: {
				maxAmplitude: 0.05,
				waveCount: 20,
				timeInterpolation: "linear",
				waveFunction: "sine",
				dimension: "y"
			}
		}
	],
	[
	]
];
var duration$1 = 2152;
var Preset2 = {
	schemaVersion: schemaVersion$1,
	backgroundColor: backgroundColor$1,
	xParticlesCount: xParticlesCount$1,
	yParticlesCount: yParticlesCount$1,
	defaultImageScaling: defaultImageScaling$1,
	defaultImageCropping: defaultImageCropping$1,
	particleScaling: particleScaling$1,
	particleShape: particleShape$1,
	particleFading: particleFading$1,
	particleOverlap: particleOverlap$1,
	effects: effects$1,
	duration: duration$1
};

var LISTED_PRESETS_ID_BEGIN = 1000; // better safe than sorry

/// This class encapsulates all data that describes a preset
var Preset = function Preset(name, config, id) {
  this.name = name;
  this.config = config;
  this.id = id;
};

/// Shorthand for preset construction
function preset(name, config, id) {
  if ( id === void 0 ) id = -1;

  return new Preset(name, config, id);
}
var filePresets = [
  // Import built-in presets here
  preset('Webcam + Effects', Preset1),
  preset('Webcam + Standing wave', Preset2)
];

// Create the exported listedPresets dict
var listedPresets = {};
for (var i$1 = 0; i$1 < filePresets.length; i$1++) {
  var preset$1 = filePresets[i$1];
  preset$1.id = LISTED_PRESETS_ID_BEGIN + i$1;
  listedPresets[preset$1.id] = preset$1;
}

/// Helper function to create a preset only for one single effect
function makePresetFromEffect(effect) {
  var config = create();
  var timeline = config.effects;
  var track = [];
  timeline.push(track);
  track.push(new EffectConfig(effect.getId(), 0, 10000, 1, effect.getDefaultConfig()));
  return config;
}

// Create exported allPresets dict
var allPresets = Object.assign({}, listedPresets);
for (var i$1$1 = 0; i$1$1 < effectList.length; i$1$1++) {
  var effect = effectList[i$1$1];
  allPresets[i$1$1] = preset(effect.getId(), makePresetFromEffect(effect), i$1$1);
}

var MenuPresetSelectControl = function MenuPresetSelectControl(menu) {
  this.menu = menu;
  this.elm = document.querySelector('.menu-select-preset-control');
  var select = this.elm.querySelector('select');
  var IDs = Object.keys(listedPresets);
  var options = document.createDocumentFragment();
  for (var i = 0; i < IDs.length; i++) {
    var preset = listedPresets[IDs[i]];
    var option = document.createElement('option');
    option.value = preset.id;
    option.innerHTML = preset.name;
    options.appendChild(option);
  }
  select.appendChild(options);
  select.addEventListener('change', function (e) {
    menu.applyConfig(listedPresets[select.value].config);
    menu.notifyChange();
  });
  menu.addChangeListener(function () {
    select.value = '';
  });
};
// eslint-disable-next-line class-methods-use-this
MenuPresetSelectControl.prototype.updateConfig = function updateConfig (config) {
};
// eslint-disable-next-line class-methods-use-this
MenuPresetSelectControl.prototype.applyConfig = function applyConfig (config) {
};

/**
 *
 */
var BgColorPicker = /*@__PURE__*/(function (Control$$1) {
  function BgColorPicker(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-bg-color-control');
    this.input = this.elm.querySelector('input[type="color"]');

    this.input.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) BgColorPicker.__proto__ = Control$$1;
  BgColorPicker.prototype = Object.create( Control$$1 && Control$$1.prototype );
  BgColorPicker.prototype.constructor = BgColorPicker;

  BgColorPicker.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.backgroundColor = parseColor(this.input.value)
      .rgba.map(function (val, i) { return (i === 3 ? val : val / 255); });
  };

  BgColorPicker.prototype.applyConfig = function applyConfig (config) {
    var ref = config.backgroundColor.map(function (val, i) { return (i === 3 ? val : val * 255); });
    var r = ref[0];
    var g = ref[1];
    var b = ref[2];
    var a = ref[3];
    this.input.value = parseColor(("rgba(" + r + ", " + g + ", " + b + ", " + a + ")")).hex;
  };

  return BgColorPicker;
}(Control));

/**
 *
 */
var ParticleCountControl = /*@__PURE__*/(function (Control$$1) {
  function ParticleCountControl(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.xInput = document.getElementById('menu-particles-x');
    this.yInput = document.getElementById('menu-particles-y');

    this.xInput.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
    this.yInput.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) ParticleCountControl.__proto__ = Control$$1;
  ParticleCountControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ParticleCountControl.prototype.constructor = ParticleCountControl;

  ParticleCountControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.xParticlesCount = parseInt(this.xInput.value, 10);
    // eslint-disable-next-line no-param-reassign
    config.yParticlesCount = parseInt(this.yInput.value, 10);
  };

  ParticleCountControl.prototype.applyConfig = function applyConfig (config) {
    this.xInput.value = config.xParticlesCount;
    this.yInput.value = config.yParticlesCount;
  };

  return ParticleCountControl;
}(Control));

/**
 * This is an invisible menu item with the purpose of storing the default
 * image scaling parameters selected by the user
 */
var DefaultImageControl = /*@__PURE__*/(function (Control$$1) {
  function DefaultImageControl(menu) {
    Control$$1.call(this, menu);
    this.defaultImageScaling = 'crop-to-viewport';
    this.defaultImageCropping = {x: 'crop-both', y: 'crop-both'};
  }

  if ( Control$$1 ) DefaultImageControl.__proto__ = Control$$1;
  DefaultImageControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  DefaultImageControl.prototype.constructor = DefaultImageControl;

  DefaultImageControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.defaultImageScaling = this.defaultImageScaling;
    // eslint-disable-next-line no-param-reassign
    config.defaultImageCropping = this.defaultImageCropping;
  };

  DefaultImageControl.prototype.applyConfig = function applyConfig (config) {
    this.defaultImageScaling = config.defaultImageScaling || 'crop-to-viewport';
    this.defaultImageCropping = config.defaultImageCropping || {x: 'crop-both', y: 'crop-both'};
  };

  return DefaultImageControl;
}(Control));

/**
 *
 */
var ParticleSizeControl = /*@__PURE__*/(function (Control$$1) {
  function ParticleSizeControl(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-particle-size-control');
    this.input = this.elm.querySelector('input[type="number"]');

    this.input.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) ParticleSizeControl.__proto__ = Control$$1;
  ParticleSizeControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ParticleSizeControl.prototype.constructor = ParticleSizeControl;

  ParticleSizeControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.particleScaling = parseInt(this.input.value, 10) / 100;
  };

  ParticleSizeControl.prototype.applyConfig = function applyConfig (config) {
    this.input.value = config.particleScaling * 100;
  };

  return ParticleSizeControl;
}(Control));

/**
 *
 */
var ParticleShapeControl = /*@__PURE__*/(function (Control$$1) {
  function ParticleShapeControl(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-particle-shape-control');
    this.select = this.elm.querySelector('select');

    this.select.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) ParticleShapeControl.__proto__ = Control$$1;
  ParticleShapeControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ParticleShapeControl.prototype.constructor = ParticleShapeControl;

  ParticleShapeControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.particleShape = this.select.value || 'circle';
  };

  ParticleShapeControl.prototype.applyConfig = function applyConfig (config) {
    this.select.value = config.particleShape;
  };

  return ParticleShapeControl;
}(Control));

/**
 *
 */
var ParticleEdgeFadeControl = /*@__PURE__*/(function (Control$$1) {
  function ParticleEdgeFadeControl(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-particle-edge-fade-control');
    this.select = this.elm.querySelector('select');

    this.select.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) ParticleEdgeFadeControl.__proto__ = Control$$1;
  ParticleEdgeFadeControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ParticleEdgeFadeControl.prototype.constructor = ParticleEdgeFadeControl;

  ParticleEdgeFadeControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.particleFading = this.select.value;
  };

  ParticleEdgeFadeControl.prototype.applyConfig = function applyConfig (config) {
    this.select.value = config.particleFading || 'fade out';
  };

  return ParticleEdgeFadeControl;
}(Control));

/**
 *
 */
var ParticleOverlapControl = /*@__PURE__*/(function (Control$$1) {
  function ParticleOverlapControl(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-particle-overlap-control');
    this.select = this.elm.querySelector('select');

    this.select.addEventListener('change', function () {
      this$1.menu.notifyChange();
    });
  }

  if ( Control$$1 ) ParticleOverlapControl.__proto__ = Control$$1;
  ParticleOverlapControl.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ParticleOverlapControl.prototype.constructor = ParticleOverlapControl;

  ParticleOverlapControl.prototype.updateConfig = function updateConfig (config) {
    // eslint-disable-next-line no-param-reassign
    config.particleOverlap = this.select.value;
  };

  ParticleOverlapControl.prototype.applyConfig = function applyConfig (config) {
    this.select.value = config.particleOverlap;
  };

  return ParticleOverlapControl;
}(Control));

/**
 *
 */
var ExportAppstateButton = /*@__PURE__*/(function (Control$$1) {
  function ExportAppstateButton(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-btn-exportstate');
    this.elm.addEventListener('click', function () {
      var toExport = Object.assign({
        schemaVersion: Config.export_schema_version
      }, this$1.menu.submittedConfig);
      ExportAppstateButton.saveJson('particles.json', JSON.stringify(toExport, null, 2));
    });
  }

  if ( Control$$1 ) ExportAppstateButton.__proto__ = Control$$1;
  ExportAppstateButton.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ExportAppstateButton.prototype.constructor = ExportAppstateButton;
  ExportAppstateButton.saveJson = function saveJson (filename, data) {
    var blob = new Blob([data], { type: 'application/json' });
    if (navigator.msSaveOrOpenBlob) {
      navigator.msSaveBlob(blob, filename);
    } else {
      var elm = document.createElement('a');
      elm.href = URL.createObjectURL(blob);
      elm.download = filename;
      document.body.appendChild(elm);
      elm.click();
      document.body.removeChild(elm);
    }
  };
  // eslint-disable-next-line class-methods-use-this
  ExportAppstateButton.prototype.updateConfig = function updateConfig (/* config */) {};
  // eslint-disable-next-line class-methods-use-this
  ExportAppstateButton.prototype.applyConfig = function applyConfig (/* config */) {};

  return ExportAppstateButton;
}(Control));

/**
 *
 */
var ImportAppstateButton = /*@__PURE__*/(function (Control$$1) {
  function ImportAppstateButton(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.FR = new FileReader();
    this.elm = document.getElementById('menu-btn-importstate');
    this.input = this.elm.querySelector('input[type="file"]');
    this.input.addEventListener('change', function (evt) {
      var file = null;
      if (evt.target.files.length > 0) {
        file = evt.target.files[0];
      } else {
        return;
      }
      this$1.FR.onload = function () {
        var text = this$1.FR.result;
        var json = null;
        try {
          json = JSON.parse(text);
        } catch (e) {
          // TODO correct error handling
          console.error('Error reading user json file');
          console.error(e);

          return;
        }
        this$1.menu.applyConfig(json);
        this$1.menu.submit();
        this$1.input.value = null;
      };
      this$1.FR.readAsText(file);
    });
  }

  if ( Control$$1 ) ImportAppstateButton.__proto__ = Control$$1;
  ImportAppstateButton.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ImportAppstateButton.prototype.constructor = ImportAppstateButton;
  // eslint-disable-next-line class-methods-use-this
  ImportAppstateButton.prototype.updateConfig = function updateConfig (/* config */) {};
  // eslint-disable-next-line class-methods-use-this
  ImportAppstateButton.prototype.applyConfig = function applyConfig (/* config */) {};

  return ImportAppstateButton;
}(Control));

/**
 *
 */
var ResetAppstateButton = /*@__PURE__*/(function (Control$$1) {
  function ResetAppstateButton(menu) {
    var this$1 = this;

    Control$$1.call(this, menu);
    this.elm = document.getElementById('menu-btn-resetstate');
    this.elm.addEventListener('click', function () {
      this$1.menu.applyConfig(this$1.menu.defaultConfig);
      this$1.menu.submit();
    });
  }

  if ( Control$$1 ) ResetAppstateButton.__proto__ = Control$$1;
  ResetAppstateButton.prototype = Object.create( Control$$1 && Control$$1.prototype );
  ResetAppstateButton.prototype.constructor = ResetAppstateButton;
  // eslint-disable-next-line class-methods-use-this
  ResetAppstateButton.prototype.updateConfig = function updateConfig (/* config */) {};
  // eslint-disable-next-line class-methods-use-this
  ResetAppstateButton.prototype.applyConfig = function applyConfig (/* config */) {};

  return ResetAppstateButton;
}(Control));

var ControlsList = [
  BgColorPicker, ParticleCountControl, DefaultImageControl,
  ParticleSizeControl, ParticleShapeControl, ParticleEdgeFadeControl, ParticleOverlapControl,
  MenuPresetSelectControl,
  ExportAppstateButton, ImportAppstateButton, ResetAppstateButton
];

var EffectListItem = function EffectListItem(effect, timeline) {
  var this$1 = this;

  this.effect = effect;
  this.timeline = timeline;
  this.element = parseHtml(("\n      <li title=\"" + (effect.getDescription()) + "\">" + (effect.getDisplayName()) + "</li>\n    "));
  this.dragCopy = parseHtml(("\n      <div class=\"effect-list-item drag-drop-copy\">" + (effect.getDisplayName()) + "</div>\n    "));
    
  var dragCopy = this.dragCopy;
  var showDragCopy = function (x, y) {
    document.getElementById('modal-container').appendChild(dragCopy);
    dragCopy.style.width = (this$1.element.offsetWidth) + "px";
    dragCopy.style.height = (this$1.element.offsetHeight) + "px";
    dragCopy.style.left = (x - (this$1.element.offsetWidth / 2)) + "px";
    dragCopy.style.top = (y - (this$1.element.offsetHeight / 2)) + "px";
  };
  var updateDragCopy = function (x, y) {
    dragCopy.style.left = (x - (this$1.element.offsetWidth / 2)) + "px";
    dragCopy.style.top = (y - (this$1.element.offsetHeight / 2)) + "px";
  };
  var hideDragCopy = function () {
    if (dragCopy.parentNode) {
      dragCopy.parentNode.removeChild(dragCopy);
    }
  };

  this.element.addEventListener('mousedown', function (evt) {
    showDragCopy(evt.clientX, evt.clientY);
    var onDrag = function (evt) { return updateDragCopy(evt.clientX, evt.clientY); };
    var onDragend = function (evt) {
      document.documentElement.removeEventListener('mouseup', onDragend);
      document.documentElement.removeEventListener('mousemove', onDrag);
      hideDragCopy();
      this$1.timeline.dropNewEffect(
        this$1.effect, evt.clientX, evt.clientY, this$1.element.offsetWidth,
        this$1.element.offsetHeight
      );
    };
    document.documentElement.addEventListener('mouseup', onDragend);
    document.documentElement.addEventListener('mousemove', onDrag);
  });

  /**
   * Now for touch
   */
  var touchDragging = function (evt) {
    showDragCopy(evt.touches[0].clientX, evt.touches[0].clientY);
    var onDrag = function (evt) {
      if (evt.touches) {
        updateDragCopy(evt.touches[0].clientX, evt.touches[0].clientY);
      } else {
        updateDragCopy(evt.clientX, evt.clientY);
      }
    };
    var onDragend = function (evt) {
      document.documentElement.removeEventListener('touchend', onDragend);
      document.documentElement.removeEventListener('touchmove', onDrag);
      hideDragCopy();
      this$1.timeline.dropNewEffect(
        this$1.effect, evt.changedTouches[0].clientX, evt.changedTouches[0].clientY,
        this$1.element.offsetWidth, this$1.element.offsetHeight
      );
    };
    document.documentElement.addEventListener('touchend', onDragend);
    document.documentElement.addEventListener('touchmove', onDrag);
  };
  this.element.addEventListener('touchstart', function (evt) {
    touchDragging(evt);
  }, { passive: false });
  // Weird chrome behavior:
  // http://wilsonpage.co.uk/touch-events-in-chrome-android/
  // TODO this breaks scrolling - which is why I removed the timeout
  // (long press to drag) logic
  var preventCancel = function (evt) {
    if (evt.path[0] === this$1.element) {
      evt.preventDefault();
    }
  };
  document.documentElement.addEventListener('touchmove', preventCancel, { passive: false });
};
EffectListItem.prototype.getElement = function getElement () {
  return this.element;
};

var MainMenu = function MainMenu(clock) {
  var this$1 = this;

  this.menu = document.getElementById('menu-container');
  this.clock = clock;
  this.controls = [];
  this.changeListeners = [];
  this.defaultConfig = null; // defaults will be read later
  this.submittedConfig = null;

  this.menuContent = this.menu.querySelector('.menu-content');
  this.effectList = this.menu.querySelector('.menu-effect-list');
  this.toggle = document.getElementById('toggle-menu-visible');
  this.applyBtn = document.getElementById('menu-btn-apply');

  this.timeline = new Timeline(this);

  var menu = this.menu;
  var toggle = this.toggle;
  var applyBtn = this.applyBtn;

  // Close menu if clicked outside
  document.addEventListener('click', function (evt) {
    if (!menu.contains(evt.target) &&
        !document.getElementById('modal-container').contains(evt.target)
    ) {
      toggle.checked = false;
    }
  });
  applyBtn.addEventListener('click', function () {
    // Apply closes menu if covering full width
    if (this$1.isCoverFullWidth()) {
      this$1.toggle.checked = false;
    }
    this$1.submit();
    if (this$1.submittedConfig.duration > 0)
      { this$1.clock.setPaused(false); }
  });

  for (var i = 0; i < ControlsList.length; i++) {
    this.addControl(ControlsList[i]);
  }

  var effectListElms = document.createDocumentFragment();
  for (var i$1 = 0; i$1 < effectList.length; i$1++) {
    var elm = new EffectListItem(effectList[i$1], this.timeline).getElement();
    effectListElms.appendChild(elm);
  }
  this.effectList.appendChild(effectListElms);

  this.defaultConfig = this.readConfig();

  // now populate the initial config (NOT defaultConfig) with some effects
  var effectLen = 2500;
  var tracks = [];
  for (var i$2 = 0; i$2 < effectList.length; i$2++) {
    tracks.push([
      new EffectConfig(
        effectList[i$2].getId(),
        i$2 * effectLen,
        i$2 * effectLen + effectLen,
        1,
        effectList[i$2].getDefaultConfig()
      )
    ]);
  }
  this.timeline.loadTimeline(tracks);

  this.submittedConfig = this.readConfig();
};

MainMenu.prototype.applyConfig = function applyConfig (config) {
  for (var i = 0; i < this.controls.length; i++) {
    this.controls[i].applyConfig(config);
  }
  this.timeline.loadTimeline(config.effects);
};

MainMenu.prototype.readConfig = function readConfig () {
  var config = {};
  for (var i = 0; i < this.controls.length; i++) {
    this.controls[i].updateConfig(config);
  }
  config.effects = this.timeline.getEffects();
  config.duration = this.timeline.getTotalDuration();

  return config;
};

MainMenu.prototype.submit = function submit () {
  this.applyBtn.disabled = true;
  var config = this.readConfig();
  for (var i = 0; i < this.changeListeners.length; i++) {
    this.changeListeners[i](config);
  }
  this.submittedConfig = config;
};

MainMenu.prototype.addControl = function addControl (CtrlClass) {
  var ctrl = new CtrlClass(this);
  this.controls.push(ctrl);
};
MainMenu.prototype.addChangeListener = function addChangeListener (listener) {
  this.changeListeners.push(listener);
};

MainMenu.prototype.isCoverFullWidth = function isCoverFullWidth () {
  var menuWidth = document.defaultView.getComputedStyle(this.menuContent).width;
  // Remove "px"
  menuWidth = menuWidth.substring(0, menuWidth.length);

  return parseInt(menuWidth, 10) === window.innerWidth;
};

MainMenu.prototype.notifyChange = function notifyChange () {
  this.applyBtn.disabled = false;
};

MainMenu.prototype.isVisible = function isVisible () {
  return this.toggle.checked;
};

var regl = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	module.exports = factory();
}(commonjsGlobal, (function () { var isTypedArray = function (x) {
  return (
    x instanceof Uint8Array ||
    x instanceof Uint16Array ||
    x instanceof Uint32Array ||
    x instanceof Int8Array ||
    x instanceof Int16Array ||
    x instanceof Int32Array ||
    x instanceof Float32Array ||
    x instanceof Float64Array ||
    x instanceof Uint8ClampedArray
  )
};

var extend = function (base, opts) {
  var keys = Object.keys(opts);
  for (var i = 0; i < keys.length; ++i) {
    base[keys[i]] = opts[keys[i]];
  }
  return base
};

// Error checking and parameter validation.
//
// Statements for the form `check.someProcedure(...)` get removed by
// a browserify transform for optimized/minified bundles.
//
/* globals atob */
var endl = '\n';

// only used for extracting shader names.  if atob not present, then errors
// will be slightly crappier
function decodeB64 (str) {
  if (typeof atob !== 'undefined') {
    return atob(str)
  }
  return 'base64:' + str
}

function raise (message) {
  var error = new Error('(regl) ' + message);
  console.error(error);
  throw error
}

function check (pred, message) {
  if (!pred) {
    raise(message);
  }
}

function encolon (message) {
  if (message) {
    return ': ' + message
  }
  return ''
}

function checkParameter (param, possibilities, message) {
  if (!(param in possibilities)) {
    raise('unknown parameter (' + param + ')' + encolon(message) +
          '. possible values: ' + Object.keys(possibilities).join());
  }
}

function checkIsTypedArray (data, message) {
  if (!isTypedArray(data)) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. must be a typed array');
  }
}

function checkTypeOf (value, type, message) {
  if (typeof value !== type) {
    raise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value));
  }
}

function checkNonNegativeInt (value, message) {
  if (!((value >= 0) &&
        ((value | 0) === value))) {
    raise('invalid parameter type, (' + value + ')' + encolon(message) +
          '. must be a nonnegative integer');
  }
}

function checkOneOf (value, list, message) {
  if (list.indexOf(value) < 0) {
    raise('invalid value' + encolon(message) + '. must be one of: ' + list);
  }
}

var constructorKeys = [
  'gl',
  'canvas',
  'container',
  'attributes',
  'pixelRatio',
  'extensions',
  'optionalExtensions',
  'profile',
  'onDone'
];

function checkConstructor (obj) {
  Object.keys(obj).forEach(function (key) {
    if (constructorKeys.indexOf(key) < 0) {
      raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
    }
  });
}

function leftPad (str, n) {
  str = str + '';
  while (str.length < n) {
    str = ' ' + str;
  }
  return str
}

function ShaderFile () {
  this.name = 'unknown';
  this.lines = [];
  this.index = {};
  this.hasErrors = false;
}

function ShaderLine (number, line) {
  this.number = number;
  this.line = line;
  this.errors = [];
}

function ShaderError (fileNumber, lineNumber, message) {
  this.file = fileNumber;
  this.line = lineNumber;
  this.message = message;
}

function guessCommand () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function guessCallSite () {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1]
  }
  var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
  if (pat2) {
    return pat2[1]
  }
  return 'unknown'
}

function parseSource (source, command) {
  var lines = source.split('\n');
  var lineNumber = 1;
  var fileNumber = 0;
  var files = {
    unknown: new ShaderFile(),
    0: new ShaderFile()
  };
  files.unknown.name = files[0].name = command || guessCommand();
  files.unknown.lines.push(new ShaderLine(0, ''));
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    var parts = /^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(line);
    if (parts) {
      switch (parts[1]) {
        case 'line':
          var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
          if (lineNumberInfo) {
            lineNumber = lineNumberInfo[1] | 0;
            if (lineNumberInfo[2]) {
              fileNumber = lineNumberInfo[2] | 0;
              if (!(fileNumber in files)) {
                files[fileNumber] = new ShaderFile();
              }
            }
          }
          break
        case 'define':
          var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
          if (nameInfo) {
            files[fileNumber].name = (nameInfo[1]
                ? decodeB64(nameInfo[2])
                : nameInfo[2]);
          }
          break
      }
    }
    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));
  }
  Object.keys(files).forEach(function (fileNumber) {
    var file = files[fileNumber];
    file.lines.forEach(function (line) {
      file.index[line.number] = line;
    });
  });
  return files
}

function parseErrorLog (errLog) {
  var result = [];
  errLog.split('\n').forEach(function (errMsg) {
    if (errMsg.length < 5) {
      return
    }
    var parts = /^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(errMsg);
    if (parts) {
      result.push(new ShaderError(
        parts[1] | 0,
        parts[2] | 0,
        parts[3].trim()));
    } else if (errMsg.length > 0) {
      result.push(new ShaderError('unknown', 0, errMsg));
    }
  });
  return result
}

function annotateFiles (files, errors) {
  errors.forEach(function (error) {
    var file = files[error.file];
    if (file) {
      var line = file.index[error.line];
      if (line) {
        line.errors.push(error);
        file.hasErrors = true;
        return
      }
    }
    files.unknown.hasErrors = true;
    files.unknown.lines[0].errors.push(error);
  });
}

function checkShaderError (gl, shader, source, type, command) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(shader);
    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);
    var files = parseSource(source, command);
    var errors = parseErrorLog(errLog);
    annotateFiles(files, errors);

    Object.keys(files).forEach(function (fileNumber) {
      var file = files[fileNumber];
      if (!file.hasErrors) {
        return
      }

      var strings = [''];
      var styles = [''];

      function push (str, style) {
        strings.push(str);
        styles.push(style || '');
      }

      push('file number ' + fileNumber + ': ' + file.name + '\n', 'color:red;text-decoration:underline;font-weight:bold');

      file.lines.forEach(function (line) {
        if (line.errors.length > 0) {
          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');
          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');

          // try to guess token
          var offset = 0;
          line.errors.forEach(function (error) {
            var message = error.message;
            var token = /^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(message);
            if (token) {
              var tokenPat = token[1];
              message = token[2];
              switch (tokenPat) {
                case 'assign':
                  tokenPat = '=';
                  break
              }
              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);
            } else {
              offset = 0;
            }

            push(leftPad('| ', 6));
            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');
            push(leftPad('| ', 6));
            push(message + endl, 'font-weight:bold');
          });
          push(leftPad('| ', 6) + endl);
        } else {
          push(leftPad(line.number, 4) + '|  ');
          push(line.line + endl, 'color:red');
        }
      });
      if (typeof document !== 'undefined' && !window.chrome) {
        styles[0] = strings.join('%c');
        console.log.apply(console, styles);
      } else {
        console.log(strings.join(''));
      }
    });

    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);
  }
}

function checkLinkError (gl, program, fragShader, vertShader, command) {
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program);
    var fragParse = parseSource(fragShader, command);
    var vertParse = parseSource(vertShader, command);

    var header = 'Error linking program with vertex shader, "' +
      vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';

    if (typeof document !== 'undefined') {
      console.log('%c' + header + endl + '%c' + errLog,
        'color:red;text-decoration:underline;font-weight:bold',
        'color:red');
    } else {
      console.log(header + endl + errLog);
    }
    check.raise(header);
  }
}

function saveCommandRef (object) {
  object._commandRef = guessCommand();
}

function saveDrawCommandInfo (opts, uniforms, attributes, stringStore) {
  saveCommandRef(opts);

  function id (str) {
    if (str) {
      return stringStore.id(str)
    }
    return 0
  }
  opts._fragId = id(opts.static.frag);
  opts._vertId = id(opts.static.vert);

  function addProps (dict, set) {
    Object.keys(set).forEach(function (u) {
      dict[stringStore.id(u)] = true;
    });
  }

  var uniformSet = opts._uniformSet = {};
  addProps(uniformSet, uniforms.static);
  addProps(uniformSet, uniforms.dynamic);

  var attributeSet = opts._attributeSet = {};
  addProps(attributeSet, attributes.static);
  addProps(attributeSet, attributes.dynamic);

  opts._hasCount = (
    'count' in opts.static ||
    'count' in opts.dynamic ||
    'elements' in opts.static ||
    'elements' in opts.dynamic);
}

function commandRaise (message, command) {
  var callSite = guessCallSite();
  raise(message +
    ' in command ' + (command || guessCommand()) +
    (callSite === 'unknown' ? '' : ' called from ' + callSite));
}

function checkCommand (pred, message, command) {
  if (!pred) {
    commandRaise(message, command || guessCommand());
  }
}

function checkParameterCommand (param, possibilities, message, command) {
  if (!(param in possibilities)) {
    commandRaise(
      'unknown parameter (' + param + ')' + encolon(message) +
      '. possible values: ' + Object.keys(possibilities).join(),
      command || guessCommand());
  }
}

function checkCommandType (value, type, message, command) {
  if (typeof value !== type) {
    commandRaise(
      'invalid parameter type' + encolon(message) +
      '. expected ' + type + ', got ' + (typeof value),
      command || guessCommand());
  }
}

function checkOptional (block) {
  block();
}

function checkFramebufferFormat (attachment, texFormats, rbFormats) {
  if (attachment.texture) {
    checkOneOf(
      attachment.texture._texture.internalformat,
      texFormats,
      'unsupported texture format for attachment');
  } else {
    checkOneOf(
      attachment.renderbuffer._renderbuffer.format,
      rbFormats,
      'unsupported renderbuffer format for attachment');
  }
}

var GL_CLAMP_TO_EDGE = 0x812F;

var GL_NEAREST = 0x2600;
var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR = 0x2703;

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;
var GL_FLOAT = 5126;

var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;

var GL_HALF_FLOAT_OES = 0x8D61;

var TYPE_SIZE = {};

TYPE_SIZE[GL_BYTE] =
TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;

TYPE_SIZE[GL_SHORT] =
TYPE_SIZE[GL_UNSIGNED_SHORT] =
TYPE_SIZE[GL_HALF_FLOAT_OES] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] =
TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] =
TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;

TYPE_SIZE[GL_INT] =
TYPE_SIZE[GL_UNSIGNED_INT] =
TYPE_SIZE[GL_FLOAT] =
TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;

function pixelSize (type, channels) {
  if (type === GL_UNSIGNED_SHORT_5_5_5_1 ||
      type === GL_UNSIGNED_SHORT_4_4_4_4 ||
      type === GL_UNSIGNED_SHORT_5_6_5) {
    return 2
  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
    return 4
  } else {
    return TYPE_SIZE[type] * channels
  }
}

function isPow2 (v) {
  return !(v & (v - 1)) && (!!v)
}

function checkTexture2D (info, mipData, limits) {
  var i;
  var w = mipData.width;
  var h = mipData.height;
  var c = mipData.channels;

  // Check texture shape
  check(w > 0 && w <= limits.maxTextureSize &&
        h > 0 && h <= limits.maxTextureSize,
        'invalid texture shape');

  // check wrap mode
  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
    check(isPow2(w) && isPow2(h),
      'incompatible wrap mode for texture, both width and height must be power of 2');
  }

  if (mipData.mipmask === 1) {
    if (w !== 1 && h !== 1) {
      check(
        info.minFilter !== GL_NEAREST_MIPMAP_NEAREST &&
        info.minFilter !== GL_NEAREST_MIPMAP_LINEAR &&
        info.minFilter !== GL_LINEAR_MIPMAP_NEAREST &&
        info.minFilter !== GL_LINEAR_MIPMAP_LINEAR,
        'min filter requires mipmap');
    }
  } else {
    // texture must be power of 2
    check(isPow2(w) && isPow2(h),
      'texture must be a square power of 2 to support mipmapping');
    check(mipData.mipmask === (w << 1) - 1,
      'missing or incomplete mipmap data');
  }

  if (mipData.type === GL_FLOAT) {
    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {
      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST,
        'filter not supported, must enable oes_texture_float_linear');
    }
    check(!info.genMipmaps,
      'mipmap generation not supported with float textures');
  }

  // check image complete
  var mipimages = mipData.images;
  for (i = 0; i < 16; ++i) {
    if (mipimages[i]) {
      var mw = w >> i;
      var mh = h >> i;
      check(mipData.mipmask & (1 << i), 'missing mipmap data');

      var img = mipimages[i];

      check(
        img.width === mw &&
        img.height === mh,
        'invalid shape for mip images');

      check(
        img.format === mipData.format &&
        img.internalformat === mipData.internalformat &&
        img.type === mipData.type,
        'incompatible type for mip image');

      if (img.compressed) {
        // TODO: check size for compressed images
      } else if (img.data) {
        // check(img.data.byteLength === mw * mh *
        // Math.max(pixelSize(img.type, c), img.unpackAlignment),
        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;
        check(img.data.byteLength === rowSize * mh,
          'invalid data for image, buffer size is inconsistent with image format');
      } else if (img.element) {
        // TODO: check element can be loaded
      } else if (img.copy) {
        // TODO: check compatible format and type
      }
    } else if (!info.genMipmaps) {
      check((mipData.mipmask & (1 << i)) === 0, 'extra mipmap data');
    }
  }

  if (mipData.compressed) {
    check(!info.genMipmaps,
      'mipmap generation for compressed images not supported');
  }
}

function checkTextureCube (texture, info, faces, limits) {
  var w = texture.width;
  var h = texture.height;
  var c = texture.channels;

  // Check texture shape
  check(
    w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize,
    'invalid texture shape');
  check(
    w === h,
    'cube map must be square');
  check(
    info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE,
    'wrap mode not supported by cube map');

  for (var i = 0; i < faces.length; ++i) {
    var face = faces[i];
    check(
      face.width === w && face.height === h,
      'inconsistent cube map face shape');

    if (info.genMipmaps) {
      check(!face.compressed,
        'can not generate mipmap for compressed textures');
      check(face.mipmask === 1,
        'can not specify mipmaps and generate mipmaps');
    } else {
      // TODO: check mip and filter mode
    }

    var mipmaps = face.images;
    for (var j = 0; j < 16; ++j) {
      var img = mipmaps[j];
      if (img) {
        var mw = w >> j;
        var mh = h >> j;
        check(face.mipmask & (1 << j), 'missing mipmap data');
        check(
          img.width === mw &&
          img.height === mh,
          'invalid shape for mip images');
        check(
          img.format === texture.format &&
          img.internalformat === texture.internalformat &&
          img.type === texture.type,
          'incompatible type for mip image');

        if (img.compressed) {
          // TODO: check size for compressed images
        } else if (img.data) {
          check(img.data.byteLength === mw * mh *
            Math.max(pixelSize(img.type, c), img.unpackAlignment),
            'invalid data for image, buffer size is inconsistent with image format');
        } else if (img.element) {
          // TODO: check element can be loaded
        } else if (img.copy) {
          // TODO: check compatible format and type
        }
      }
    }
  }
}

var check$1 = extend(check, {
  optional: checkOptional,
  raise: raise,
  commandRaise: commandRaise,
  command: checkCommand,
  parameter: checkParameter,
  commandParameter: checkParameterCommand,
  constructor: checkConstructor,
  type: checkTypeOf,
  commandType: checkCommandType,
  isTypedArray: checkIsTypedArray,
  nni: checkNonNegativeInt,
  oneOf: checkOneOf,
  shaderError: checkShaderError,
  linkError: checkLinkError,
  callSite: guessCallSite,
  saveCommandRef: saveCommandRef,
  saveDrawInfo: saveDrawCommandInfo,
  framebufferFormat: checkFramebufferFormat,
  guessCommand: guessCommand,
  texture2D: checkTexture2D,
  textureCube: checkTextureCube
});

var VARIABLE_COUNTER = 0;

var DYN_FUNC = 0;

function DynamicVariable (type, data) {
  this.id = (VARIABLE_COUNTER++);
  this.type = type;
  this.data = data;
}

function escapeStr (str) {
  return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"')
}

function splitParts (str) {
  if (str.length === 0) {
    return []
  }

  var firstChar = str.charAt(0);
  var lastChar = str.charAt(str.length - 1);

  if (str.length > 1 &&
      firstChar === lastChar &&
      (firstChar === '"' || firstChar === "'")) {
    return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"']
  }

  var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);
  if (parts) {
    return (
      splitParts(str.substr(0, parts.index))
      .concat(splitParts(parts[1]))
      .concat(splitParts(str.substr(parts.index + parts[0].length)))
    )
  }

  var subparts = str.split('.');
  if (subparts.length === 1) {
    return ['"' + escapeStr(str) + '"']
  }

  var result = [];
  for (var i = 0; i < subparts.length; ++i) {
    result = result.concat(splitParts(subparts[i]));
  }
  return result
}

function toAccessorString (str) {
  return '[' + splitParts(str).join('][') + ']'
}

function defineDynamic (type, data) {
  return new DynamicVariable(type, toAccessorString(data + ''))
}

function isDynamic (x) {
  return (typeof x === 'function' && !x._reglType) ||
         x instanceof DynamicVariable
}

function unbox (x, path) {
  if (typeof x === 'function') {
    return new DynamicVariable(DYN_FUNC, x)
  }
  return x
}

var dynamic = {
  DynamicVariable: DynamicVariable,
  define: defineDynamic,
  isDynamic: isDynamic,
  unbox: unbox,
  accessor: toAccessorString
};

/* globals requestAnimationFrame, cancelAnimationFrame */
var raf = {
  next: typeof requestAnimationFrame === 'function'
    ? function (cb) { return requestAnimationFrame(cb) }
    : function (cb) { return setTimeout(cb, 16) },
  cancel: typeof cancelAnimationFrame === 'function'
    ? function (raf) { return cancelAnimationFrame(raf) }
    : clearTimeout
};

/* globals performance */
var clock = (typeof performance !== 'undefined' && performance.now)
  ? function () { return performance.now() }
  : function () { return +(new Date()) };

function createStringStore () {
  var stringIds = {'': 0};
  var stringValues = [''];
  return {
    id: function (str) {
      var result = stringIds[str];
      if (result) {
        return result
      }
      result = stringIds[str] = stringValues.length;
      stringValues.push(str);
      return result
    },

    str: function (id) {
      return stringValues[id]
    }
  }
}

// Context and canvas creation helper functions
function createCanvas (element, onDone, pixelRatio) {
  var canvas = document.createElement('canvas');
  extend(canvas.style, {
    border: 0,
    margin: 0,
    padding: 0,
    top: 0,
    left: 0
  });
  element.appendChild(canvas);

  if (element === document.body) {
    canvas.style.position = 'absolute';
    extend(element.style, {
      margin: 0,
      padding: 0
    });
  }

  function resize () {
    var w = window.innerWidth;
    var h = window.innerHeight;
    if (element !== document.body) {
      var bounds = element.getBoundingClientRect();
      w = bounds.right - bounds.left;
      h = bounds.bottom - bounds.top;
    }
    canvas.width = pixelRatio * w;
    canvas.height = pixelRatio * h;
    extend(canvas.style, {
      width: w + 'px',
      height: h + 'px'
    });
  }

  window.addEventListener('resize', resize, false);

  function onDestroy () {
    window.removeEventListener('resize', resize);
    element.removeChild(canvas);
  }

  resize();

  return {
    canvas: canvas,
    onDestroy: onDestroy
  }
}

function createContext (canvas, contextAttributes) {
  function get (name) {
    try {
      return canvas.getContext(name, contextAttributes)
    } catch (e) {
      return null
    }
  }
  return (
    get('webgl') ||
    get('experimental-webgl') ||
    get('webgl-experimental')
  )
}

function isHTMLElement (obj) {
  return (
    typeof obj.nodeName === 'string' &&
    typeof obj.appendChild === 'function' &&
    typeof obj.getBoundingClientRect === 'function'
  )
}

function isWebGLContext (obj) {
  return (
    typeof obj.drawArrays === 'function' ||
    typeof obj.drawElements === 'function'
  )
}

function parseExtensions (input) {
  if (typeof input === 'string') {
    return input.split()
  }
  check$1(Array.isArray(input), 'invalid extension array');
  return input
}

function getElement (desc) {
  if (typeof desc === 'string') {
    check$1(typeof document !== 'undefined', 'not supported outside of DOM');
    return document.querySelector(desc)
  }
  return desc
}

function parseArgs (args_) {
  var args = args_ || {};
  var element, container, canvas, gl;
  var contextAttributes = {};
  var extensions = [];
  var optionalExtensions = [];
  var pixelRatio = (typeof window === 'undefined' ? 1 : window.devicePixelRatio);
  var profile = false;
  var onDone = function (err) {
    if (err) {
      check$1.raise(err);
    }
  };
  var onDestroy = function () {};
  if (typeof args === 'string') {
    check$1(
      typeof document !== 'undefined',
      'selector queries only supported in DOM enviroments');
    element = document.querySelector(args);
    check$1(element, 'invalid query string for element');
  } else if (typeof args === 'object') {
    if (isHTMLElement(args)) {
      element = args;
    } else if (isWebGLContext(args)) {
      gl = args;
      canvas = gl.canvas;
    } else {
      check$1.constructor(args);
      if ('gl' in args) {
        gl = args.gl;
      } else if ('canvas' in args) {
        canvas = getElement(args.canvas);
      } else if ('container' in args) {
        container = getElement(args.container);
      }
      if ('attributes' in args) {
        contextAttributes = args.attributes;
        check$1.type(contextAttributes, 'object', 'invalid context attributes');
      }
      if ('extensions' in args) {
        extensions = parseExtensions(args.extensions);
      }
      if ('optionalExtensions' in args) {
        optionalExtensions = parseExtensions(args.optionalExtensions);
      }
      if ('onDone' in args) {
        check$1.type(
          args.onDone, 'function',
          'invalid or missing onDone callback');
        onDone = args.onDone;
      }
      if ('profile' in args) {
        profile = !!args.profile;
      }
      if ('pixelRatio' in args) {
        pixelRatio = +args.pixelRatio;
        check$1(pixelRatio > 0, 'invalid pixel ratio');
      }
    }
  } else {
    check$1.raise('invalid arguments to regl');
  }

  if (element) {
    if (element.nodeName.toLowerCase() === 'canvas') {
      canvas = element;
    } else {
      container = element;
    }
  }

  if (!gl) {
    if (!canvas) {
      check$1(
        typeof document !== 'undefined',
        'must manually specify webgl context outside of DOM environments');
      var result = createCanvas(container || document.body, onDone, pixelRatio);
      if (!result) {
        return null
      }
      canvas = result.canvas;
      onDestroy = result.onDestroy;
    }
    gl = createContext(canvas, contextAttributes);
  }

  if (!gl) {
    onDestroy();
    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');
    return null
  }

  return {
    gl: gl,
    canvas: canvas,
    container: container,
    extensions: extensions,
    optionalExtensions: optionalExtensions,
    pixelRatio: pixelRatio,
    profile: profile,
    onDone: onDone,
    onDestroy: onDestroy
  }
}

function createExtensionCache (gl, config) {
  var extensions = {};

  function tryLoadExtension (name_) {
    check$1.type(name_, 'string', 'extension name must be string');
    var name = name_.toLowerCase();
    var ext;
    try {
      ext = extensions[name] = gl.getExtension(name);
    } catch (e) {}
    return !!ext
  }

  for (var i = 0; i < config.extensions.length; ++i) {
    var name = config.extensions[i];
    if (!tryLoadExtension(name)) {
      config.onDestroy();
      config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
      return null
    }
  }

  config.optionalExtensions.forEach(tryLoadExtension);

  return {
    extensions: extensions,
    restore: function () {
      Object.keys(extensions).forEach(function (name) {
        if (extensions[name] && !tryLoadExtension(name)) {
          throw new Error('(regl): error restoring extension ' + name)
        }
      });
    }
  }
}

function loop (n, f) {
  var result = Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = f(i);
  }
  return result
}

var GL_BYTE$1 = 5120;
var GL_UNSIGNED_BYTE$2 = 5121;
var GL_SHORT$1 = 5122;
var GL_UNSIGNED_SHORT$1 = 5123;
var GL_INT$1 = 5124;
var GL_UNSIGNED_INT$1 = 5125;
var GL_FLOAT$2 = 5126;

function nextPow16 (v) {
  for (var i = 16; i <= (1 << 28); i *= 16) {
    if (v <= i) {
      return i
    }
  }
  return 0
}

function log2 (v) {
  var r, shift;
  r = (v > 0xFFFF) << 4;
  v >>>= r;
  shift = (v > 0xFF) << 3;
  v >>>= shift; r |= shift;
  shift = (v > 0xF) << 2;
  v >>>= shift; r |= shift;
  shift = (v > 0x3) << 1;
  v >>>= shift; r |= shift;
  return r | (v >> 1)
}

function createPool () {
  var bufferPool = loop(8, function () {
    return []
  });

  function alloc (n) {
    var sz = nextPow16(n);
    var bin = bufferPool[log2(sz) >> 2];
    if (bin.length > 0) {
      return bin.pop()
    }
    return new ArrayBuffer(sz)
  }

  function free (buf) {
    bufferPool[log2(buf.byteLength) >> 2].push(buf);
  }

  function allocType (type, n) {
    var result = null;
    switch (type) {
      case GL_BYTE$1:
        result = new Int8Array(alloc(n), 0, n);
        break
      case GL_UNSIGNED_BYTE$2:
        result = new Uint8Array(alloc(n), 0, n);
        break
      case GL_SHORT$1:
        result = new Int16Array(alloc(2 * n), 0, n);
        break
      case GL_UNSIGNED_SHORT$1:
        result = new Uint16Array(alloc(2 * n), 0, n);
        break
      case GL_INT$1:
        result = new Int32Array(alloc(4 * n), 0, n);
        break
      case GL_UNSIGNED_INT$1:
        result = new Uint32Array(alloc(4 * n), 0, n);
        break
      case GL_FLOAT$2:
        result = new Float32Array(alloc(4 * n), 0, n);
        break
      default:
        return null
    }
    if (result.length !== n) {
      return result.subarray(0, n)
    }
    return result
  }

  function freeType (array) {
    free(array.buffer);
  }

  return {
    alloc: alloc,
    free: free,
    allocType: allocType,
    freeType: freeType
  }
}

var pool = createPool();

// zero pool for initial zero data
pool.zero = createPool();

var GL_SUBPIXEL_BITS = 0x0D50;
var GL_RED_BITS = 0x0D52;
var GL_GREEN_BITS = 0x0D53;
var GL_BLUE_BITS = 0x0D54;
var GL_ALPHA_BITS = 0x0D55;
var GL_DEPTH_BITS = 0x0D56;
var GL_STENCIL_BITS = 0x0D57;

var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;

var GL_MAX_TEXTURE_SIZE = 0x0D33;
var GL_MAX_VIEWPORT_DIMS = 0x0D3A;
var GL_MAX_VERTEX_ATTRIBS = 0x8869;
var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
var GL_MAX_VARYING_VECTORS = 0x8DFC;
var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;

var GL_VENDOR = 0x1F00;
var GL_RENDERER = 0x1F01;
var GL_VERSION = 0x1F02;
var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;

var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
var GL_TEXTURE0 = 0x84C0;
var GL_RGBA = 0x1908;
var GL_FLOAT$1 = 0x1406;
var GL_UNSIGNED_BYTE$1 = 0x1401;
var GL_FRAMEBUFFER = 0x8D40;
var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_COLOR_BUFFER_BIT$1 = 0x4000;

var wrapLimits = function (gl, extensions) {
  var maxAnisotropic = 1;
  if (extensions.ext_texture_filter_anisotropic) {
    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
  }

  var maxDrawbuffers = 1;
  var maxColorAttachments = 1;
  if (extensions.webgl_draw_buffers) {
    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
  }

  // detect if reading float textures is available (Safari doesn't support)
  var readFloat = !!extensions.oes_texture_float;
  if (readFloat) {
    var readFloatTexture = gl.createTexture();
    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);

    var fbo = gl.createFramebuffer();
    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
    gl.bindTexture(GL_TEXTURE_2D, null);

    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) { readFloat = false; }

    else {
      gl.viewport(0, 0, 1, 1);
      gl.clearColor(1.0, 0.0, 0.0, 1.0);
      gl.clear(GL_COLOR_BUFFER_BIT$1);
      var pixels = pool.allocType(GL_FLOAT$1, 4);
      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);

      if (gl.getError()) { readFloat = false; }
      else {
        gl.deleteFramebuffer(fbo);
        gl.deleteTexture(readFloatTexture);

        readFloat = pixels[0] === 1.0;
      }

      pool.freeType(pixels);
    }
  }

  // detect non power of two cube textures support (IE doesn't support)
  var npotTextureCube = true;
  var cubeTexture = gl.createTexture();
  var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
  gl.activeTexture(GL_TEXTURE0);
  gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
  gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);
  pool.freeType(data);
  gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
  gl.deleteTexture(cubeTexture);
  npotTextureCube = !gl.getError();

  return {
    // drawing buffer bit depth
    colorBits: [
      gl.getParameter(GL_RED_BITS),
      gl.getParameter(GL_GREEN_BITS),
      gl.getParameter(GL_BLUE_BITS),
      gl.getParameter(GL_ALPHA_BITS)
    ],
    depthBits: gl.getParameter(GL_DEPTH_BITS),
    stencilBits: gl.getParameter(GL_STENCIL_BITS),
    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),

    // supported extensions
    extensions: Object.keys(extensions).filter(function (ext) {
      return !!extensions[ext]
    }),

    // max aniso samples
    maxAnisotropic: maxAnisotropic,

    // max draw buffers
    maxDrawbuffers: maxDrawbuffers,
    maxColorAttachments: maxColorAttachments,

    // point and line size ranges
    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),

    // vendor info
    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
    renderer: gl.getParameter(GL_RENDERER),
    vendor: gl.getParameter(GL_VENDOR),
    version: gl.getParameter(GL_VERSION),

    // quirks
    readFloat: readFloat,
    npotTextureCube: npotTextureCube
  }
};

function isNDArrayLike (obj) {
  return (
    !!obj &&
    typeof obj === 'object' &&
    Array.isArray(obj.shape) &&
    Array.isArray(obj.stride) &&
    typeof obj.offset === 'number' &&
    obj.shape.length === obj.stride.length &&
    (Array.isArray(obj.data) ||
      isTypedArray(obj.data)))
}

var values = function (obj) {
  return Object.keys(obj).map(function (key) { return obj[key] })
};

var flattenUtils = {
  shape: arrayShape$1,
  flatten: flattenArray
};

function flatten1D (array, nx, out) {
  for (var i = 0; i < nx; ++i) {
    out[i] = array[i];
  }
}

function flatten2D (array, nx, ny, out) {
  var ptr = 0;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      out[ptr++] = row[j];
    }
  }
}

function flatten3D (array, nx, ny, nz, out, ptr_) {
  var ptr = ptr_;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      var col = row[j];
      for (var k = 0; k < nz; ++k) {
        out[ptr++] = col[k];
      }
    }
  }
}

function flattenRec (array, shape, level, out, ptr) {
  var stride = 1;
  for (var i = level + 1; i < shape.length; ++i) {
    stride *= shape[i];
  }
  var n = shape[level];
  if (shape.length - level === 4) {
    var nx = shape[level + 1];
    var ny = shape[level + 2];
    var nz = shape[level + 3];
    for (i = 0; i < n; ++i) {
      flatten3D(array[i], nx, ny, nz, out, ptr);
      ptr += stride;
    }
  } else {
    for (i = 0; i < n; ++i) {
      flattenRec(array[i], shape, level + 1, out, ptr);
      ptr += stride;
    }
  }
}

function flattenArray (array, shape, type, out_) {
  var sz = 1;
  if (shape.length) {
    for (var i = 0; i < shape.length; ++i) {
      sz *= shape[i];
    }
  } else {
    sz = 0;
  }
  var out = out_ || pool.allocType(type, sz);
  switch (shape.length) {
    case 0:
      break
    case 1:
      flatten1D(array, shape[0], out);
      break
    case 2:
      flatten2D(array, shape[0], shape[1], out);
      break
    case 3:
      flatten3D(array, shape[0], shape[1], shape[2], out, 0);
      break
    default:
      flattenRec(array, shape, 0, out, 0);
  }
  return out
}

function arrayShape$1 (array_) {
  var shape = [];
  for (var array = array_; array.length; array = array[0]) {
    shape.push(array.length);
  }
  return shape
}

var arrayTypes = {
	"[object Int8Array]": 5120,
	"[object Int16Array]": 5122,
	"[object Int32Array]": 5124,
	"[object Uint8Array]": 5121,
	"[object Uint8ClampedArray]": 5121,
	"[object Uint16Array]": 5123,
	"[object Uint32Array]": 5125,
	"[object Float32Array]": 5126,
	"[object Float64Array]": 5121,
	"[object ArrayBuffer]": 5121
};

var int8 = 5120;
var int16 = 5122;
var int32 = 5124;
var uint8 = 5121;
var uint16 = 5123;
var uint32 = 5125;
var float = 5126;
var float32 = 5126;
var glTypes = {
	int8: int8,
	int16: int16,
	int32: int32,
	uint8: uint8,
	uint16: uint16,
	uint32: uint32,
	float: float,
	float32: float32
};

var dynamic$1 = 35048;
var stream = 35040;
var usageTypes = {
	dynamic: dynamic$1,
	stream: stream,
	"static": 35044
};

var arrayFlatten = flattenUtils.flatten;
var arrayShape = flattenUtils.shape;

var GL_STATIC_DRAW = 0x88E4;
var GL_STREAM_DRAW = 0x88E0;

var GL_UNSIGNED_BYTE$3 = 5121;
var GL_FLOAT$3 = 5126;

var DTYPES_SIZES = [];
DTYPES_SIZES[5120] = 1; // int8
DTYPES_SIZES[5122] = 2; // int16
DTYPES_SIZES[5124] = 4; // int32
DTYPES_SIZES[5121] = 1; // uint8
DTYPES_SIZES[5123] = 2; // uint16
DTYPES_SIZES[5125] = 4; // uint32
DTYPES_SIZES[5126] = 4; // float32

function typedArrayCode (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function copyArray (out, inp) {
  for (var i = 0; i < inp.length; ++i) {
    out[i] = inp[i];
  }
}

function transpose (
  result, data, shapeX, shapeY, strideX, strideY, offset) {
  var ptr = 0;
  for (var i = 0; i < shapeX; ++i) {
    for (var j = 0; j < shapeY; ++j) {
      result[ptr++] = data[strideX * i + strideY * j + offset];
    }
  }
}

function wrapBufferState (gl, stats, config, attributeState) {
  var bufferCount = 0;
  var bufferSet = {};

  function REGLBuffer (type) {
    this.id = bufferCount++;
    this.buffer = gl.createBuffer();
    this.type = type;
    this.usage = GL_STATIC_DRAW;
    this.byteLength = 0;
    this.dimension = 1;
    this.dtype = GL_UNSIGNED_BYTE$3;

    this.persistentData = null;

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  REGLBuffer.prototype.bind = function () {
    gl.bindBuffer(this.type, this.buffer);
  };

  REGLBuffer.prototype.destroy = function () {
    destroy(this);
  };

  var streamPool = [];

  function createStream (type, data) {
    var buffer = streamPool.pop();
    if (!buffer) {
      buffer = new REGLBuffer(type);
    }
    buffer.bind();
    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
    return buffer
  }

  function destroyStream (stream$$1) {
    streamPool.push(stream$$1);
  }

  function initBufferFromTypedArray (buffer, data, usage) {
    buffer.byteLength = data.byteLength;
    gl.bufferData(buffer.type, data, usage);
  }

  function initBufferFromData (buffer, data, usage, dtype, dimension, persist) {
    var shape;
    buffer.usage = usage;
    if (Array.isArray(data)) {
      buffer.dtype = dtype || GL_FLOAT$3;
      if (data.length > 0) {
        var flatData;
        if (Array.isArray(data[0])) {
          shape = arrayShape(data);
          var dim = 1;
          for (var i = 1; i < shape.length; ++i) {
            dim *= shape[i];
          }
          buffer.dimension = dim;
          flatData = arrayFlatten(data, shape, buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else if (typeof data[0] === 'number') {
          buffer.dimension = dimension;
          var typedData = pool.allocType(buffer.dtype, data.length);
          copyArray(typedData, data);
          initBufferFromTypedArray(buffer, typedData, usage);
          if (persist) {
            buffer.persistentData = typedData;
          } else {
            pool.freeType(typedData);
          }
        } else if (isTypedArray(data[0])) {
          buffer.dimension = data[0].length;
          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;
          flatData = arrayFlatten(
            data,
            [data.length, data[0].length],
            buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else {
          check$1.raise('invalid buffer data');
        }
      }
    } else if (isTypedArray(data)) {
      buffer.dtype = dtype || typedArrayCode(data);
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
      }
    } else if (isNDArrayLike(data)) {
      shape = data.shape;
      var stride = data.stride;
      var offset = data.offset;

      var shapeX = 0;
      var shapeY = 0;
      var strideX = 0;
      var strideY = 0;
      if (shape.length === 1) {
        shapeX = shape[0];
        shapeY = 1;
        strideX = stride[0];
        strideY = 0;
      } else if (shape.length === 2) {
        shapeX = shape[0];
        shapeY = shape[1];
        strideX = stride[0];
        strideY = stride[1];
      } else {
        check$1.raise('invalid shape');
      }

      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;
      buffer.dimension = shapeY;

      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);
      transpose(transposeData,
        data.data,
        shapeX, shapeY,
        strideX, strideY,
        offset);
      initBufferFromTypedArray(buffer, transposeData, usage);
      if (persist) {
        buffer.persistentData = transposeData;
      } else {
        pool.freeType(transposeData);
      }
    } else {
      check$1.raise('invalid buffer data');
    }
  }

  function destroy (buffer) {
    stats.bufferCount--;

    for (var i = 0; i < attributeState.state.length; ++i) {
      var record = attributeState.state[i];
      if (record.buffer === buffer) {
        gl.disableVertexAttribArray(i);
        record.buffer = null;
      }
    }

    var handle = buffer.buffer;
    check$1(handle, 'buffer must not be deleted already');
    gl.deleteBuffer(handle);
    buffer.buffer = null;
    delete bufferSet[buffer.id];
  }

  function createBuffer (options, type, deferInit, persistent) {
    stats.bufferCount++;

    var buffer = new REGLBuffer(type);
    bufferSet[buffer.id] = buffer;

    function reglBuffer (options) {
      var usage = GL_STATIC_DRAW;
      var data = null;
      var byteLength = 0;
      var dtype = 0;
      var dimension = 1;
      if (Array.isArray(options) ||
          isTypedArray(options) ||
          isNDArrayLike(options)) {
        data = options;
      } else if (typeof options === 'number') {
        byteLength = options | 0;
      } else if (options) {
        check$1.type(
          options, 'object',
          'buffer arguments must be an object, a number or an array');

        if ('data' in options) {
          check$1(
            data === null ||
            Array.isArray(data) ||
            isTypedArray(data) ||
            isNDArrayLike(data),
            'invalid data for buffer');
          data = options.data;
        }

        if ('usage' in options) {
          check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');
          usage = usageTypes[options.usage];
        }

        if ('type' in options) {
          check$1.parameter(options.type, glTypes, 'invalid buffer type');
          dtype = glTypes[options.type];
        }

        if ('dimension' in options) {
          check$1.type(options.dimension, 'number', 'invalid dimension');
          dimension = options.dimension | 0;
        }

        if ('length' in options) {
          check$1.nni(byteLength, 'buffer length must be a nonnegative integer');
          byteLength = options.length | 0;
        }
      }

      buffer.bind();
      if (!data) {
        // #475
        if (byteLength) { gl.bufferData(buffer.type, byteLength, usage); }
        buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
        buffer.usage = usage;
        buffer.dimension = dimension;
        buffer.byteLength = byteLength;
      } else {
        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
      }

      if (config.profile) {
        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
      }

      return reglBuffer
    }

    function setSubData (data, offset) {
      check$1(offset + data.byteLength <= buffer.byteLength,
        'invalid buffer subdata call, buffer is too small. ' + ' Can\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);

      gl.bufferSubData(buffer.type, offset, data);
    }

    function subdata (data, offset_) {
      var offset = (offset_ || 0) | 0;
      var shape;
      buffer.bind();
      if (isTypedArray(data)) {
        setSubData(data, offset);
      } else if (Array.isArray(data)) {
        if (data.length > 0) {
          if (typeof data[0] === 'number') {
            var converted = pool.allocType(buffer.dtype, data.length);
            copyArray(converted, data);
            setSubData(converted, offset);
            pool.freeType(converted);
          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
            shape = arrayShape(data);
            var flatData = arrayFlatten(data, shape, buffer.dtype);
            setSubData(flatData, offset);
            pool.freeType(flatData);
          } else {
            check$1.raise('invalid buffer data');
          }
        }
      } else if (isNDArrayLike(data)) {
        shape = data.shape;
        var stride = data.stride;

        var shapeX = 0;
        var shapeY = 0;
        var strideX = 0;
        var strideY = 0;
        if (shape.length === 1) {
          shapeX = shape[0];
          shapeY = 1;
          strideX = stride[0];
          strideY = 0;
        } else if (shape.length === 2) {
          shapeX = shape[0];
          shapeY = shape[1];
          strideX = stride[0];
          strideY = stride[1];
        } else {
          check$1.raise('invalid shape');
        }
        var dtype = Array.isArray(data.data)
          ? buffer.dtype
          : typedArrayCode(data.data);

        var transposeData = pool.allocType(dtype, shapeX * shapeY);
        transpose(transposeData,
          data.data,
          shapeX, shapeY,
          strideX, strideY,
          data.offset);
        setSubData(transposeData, offset);
        pool.freeType(transposeData);
      } else {
        check$1.raise('invalid data for buffer subdata');
      }
      return reglBuffer
    }

    if (!deferInit) {
      reglBuffer(options);
    }

    reglBuffer._reglType = 'buffer';
    reglBuffer._buffer = buffer;
    reglBuffer.subdata = subdata;
    if (config.profile) {
      reglBuffer.stats = buffer.stats;
    }
    reglBuffer.destroy = function () { destroy(buffer); };

    return reglBuffer
  }

  function restoreBuffers () {
    values(bufferSet).forEach(function (buffer) {
      buffer.buffer = gl.createBuffer();
      gl.bindBuffer(buffer.type, buffer.buffer);
      gl.bufferData(
        buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);
    });
  }

  if (config.profile) {
    stats.getTotalBufferSize = function () {
      var total = 0;
      // TODO: Right now, the streams are not part of the total count.
      Object.keys(bufferSet).forEach(function (key) {
        total += bufferSet[key].stats.size;
      });
      return total
    };
  }

  return {
    create: createBuffer,

    createStream: createStream,
    destroyStream: destroyStream,

    clear: function () {
      values(bufferSet).forEach(destroy);
      streamPool.forEach(destroy);
    },

    getBuffer: function (wrapper) {
      if (wrapper && wrapper._buffer instanceof REGLBuffer) {
        return wrapper._buffer
      }
      return null
    },

    restore: restoreBuffers,

    _initBuffer: initBufferFromData
  }
}

var points = 0;
var point = 0;
var lines = 1;
var line = 1;
var triangles = 4;
var triangle = 4;
var primTypes = {
	points: points,
	point: point,
	lines: lines,
	line: line,
	triangles: triangles,
	triangle: triangle,
	"line loop": 2,
	"line strip": 3,
	"triangle strip": 5,
	"triangle fan": 6
};

var GL_POINTS = 0;
var GL_LINES = 1;
var GL_TRIANGLES = 4;

var GL_BYTE$2 = 5120;
var GL_UNSIGNED_BYTE$4 = 5121;
var GL_SHORT$2 = 5122;
var GL_UNSIGNED_SHORT$2 = 5123;
var GL_INT$2 = 5124;
var GL_UNSIGNED_INT$2 = 5125;

var GL_ELEMENT_ARRAY_BUFFER = 34963;

var GL_STREAM_DRAW$1 = 0x88E0;
var GL_STATIC_DRAW$1 = 0x88E4;

function wrapElementsState (gl, extensions, bufferState, stats) {
  var elementSet = {};
  var elementCount = 0;

  var elementTypes = {
    'uint8': GL_UNSIGNED_BYTE$4,
    'uint16': GL_UNSIGNED_SHORT$2
  };

  if (extensions.oes_element_index_uint) {
    elementTypes.uint32 = GL_UNSIGNED_INT$2;
  }

  function REGLElementBuffer (buffer) {
    this.id = elementCount++;
    elementSet[this.id] = this;
    this.buffer = buffer;
    this.primType = GL_TRIANGLES;
    this.vertCount = 0;
    this.type = 0;
  }

  REGLElementBuffer.prototype.bind = function () {
    this.buffer.bind();
  };

  var bufferPool = [];

  function createElementStream (data) {
    var result = bufferPool.pop();
    if (!result) {
      result = new REGLElementBuffer(bufferState.create(
        null,
        GL_ELEMENT_ARRAY_BUFFER,
        true,
        false)._buffer);
    }
    initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
    return result
  }

  function destroyElementStream (elements) {
    bufferPool.push(elements);
  }

  function initElements (
    elements,
    data,
    usage,
    prim,
    count,
    byteLength,
    type) {
    elements.buffer.bind();
    if (data) {
      var predictedType = type;
      if (!type && (
          !isTypedArray(data) ||
         (isNDArrayLike(data) && !isTypedArray(data.data)))) {
        predictedType = extensions.oes_element_index_uint
          ? GL_UNSIGNED_INT$2
          : GL_UNSIGNED_SHORT$2;
      }
      bufferState._initBuffer(
        elements.buffer,
        data,
        usage,
        predictedType,
        3);
    } else {
      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
      elements.buffer.usage = usage;
      elements.buffer.dimension = 3;
      elements.buffer.byteLength = byteLength;
    }

    var dtype = type;
    if (!type) {
      switch (elements.buffer.dtype) {
        case GL_UNSIGNED_BYTE$4:
        case GL_BYTE$2:
          dtype = GL_UNSIGNED_BYTE$4;
          break

        case GL_UNSIGNED_SHORT$2:
        case GL_SHORT$2:
          dtype = GL_UNSIGNED_SHORT$2;
          break

        case GL_UNSIGNED_INT$2:
        case GL_INT$2:
          dtype = GL_UNSIGNED_INT$2;
          break

        default:
          check$1.raise('unsupported type for element array');
      }
      elements.buffer.dtype = dtype;
    }
    elements.type = dtype;

    // Check oes_element_index_uint extension
    check$1(
      dtype !== GL_UNSIGNED_INT$2 ||
      !!extensions.oes_element_index_uint,
      '32 bit element buffers not supported, enable oes_element_index_uint first');

    // try to guess default primitive type and arguments
    var vertCount = count;
    if (vertCount < 0) {
      vertCount = elements.buffer.byteLength;
      if (dtype === GL_UNSIGNED_SHORT$2) {
        vertCount >>= 1;
      } else if (dtype === GL_UNSIGNED_INT$2) {
        vertCount >>= 2;
      }
    }
    elements.vertCount = vertCount;

    // try to guess primitive type from cell dimension
    var primType = prim;
    if (prim < 0) {
      primType = GL_TRIANGLES;
      var dimension = elements.buffer.dimension;
      if (dimension === 1) { primType = GL_POINTS; }
      if (dimension === 2) { primType = GL_LINES; }
      if (dimension === 3) { primType = GL_TRIANGLES; }
    }
    elements.primType = primType;
  }

  function destroyElements (elements) {
    stats.elementsCount--;

    check$1(elements.buffer !== null, 'must not double destroy elements');
    delete elementSet[elements.id];
    elements.buffer.destroy();
    elements.buffer = null;
  }

  function createElements (options, persistent) {
    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
    var elements = new REGLElementBuffer(buffer._buffer);
    stats.elementsCount++;

    function reglElements (options) {
      if (!options) {
        buffer();
        elements.primType = GL_TRIANGLES;
        elements.vertCount = 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else if (typeof options === 'number') {
        buffer(options);
        elements.primType = GL_TRIANGLES;
        elements.vertCount = options | 0;
        elements.type = GL_UNSIGNED_BYTE$4;
      } else {
        var data = null;
        var usage = GL_STATIC_DRAW$1;
        var primType = -1;
        var vertCount = -1;
        var byteLength = 0;
        var dtype = 0;
        if (Array.isArray(options) ||
            isTypedArray(options) ||
            isNDArrayLike(options)) {
          data = options;
        } else {
          check$1.type(options, 'object', 'invalid arguments for elements');
          if ('data' in options) {
            data = options.data;
            check$1(
                Array.isArray(data) ||
                isTypedArray(data) ||
                isNDArrayLike(data),
                'invalid data for element buffer');
          }
          if ('usage' in options) {
            check$1.parameter(
              options.usage,
              usageTypes,
              'invalid element buffer usage');
            usage = usageTypes[options.usage];
          }
          if ('primitive' in options) {
            check$1.parameter(
              options.primitive,
              primTypes,
              'invalid element buffer primitive');
            primType = primTypes[options.primitive];
          }
          if ('count' in options) {
            check$1(
              typeof options.count === 'number' && options.count >= 0,
              'invalid vertex count for elements');
            vertCount = options.count | 0;
          }
          if ('type' in options) {
            check$1.parameter(
              options.type,
              elementTypes,
              'invalid buffer type');
            dtype = elementTypes[options.type];
          }
          if ('length' in options) {
            byteLength = options.length | 0;
          } else {
            byteLength = vertCount;
            if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
              byteLength *= 2;
            } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
              byteLength *= 4;
            }
          }
        }
        initElements(
          elements,
          data,
          usage,
          primType,
          vertCount,
          byteLength,
          dtype);
      }

      return reglElements
    }

    reglElements(options);

    reglElements._reglType = 'elements';
    reglElements._elements = elements;
    reglElements.subdata = function (data, offset) {
      buffer.subdata(data, offset);
      return reglElements
    };
    reglElements.destroy = function () {
      destroyElements(elements);
    };

    return reglElements
  }

  return {
    create: createElements,
    createStream: createElementStream,
    destroyStream: destroyElementStream,
    getElements: function (elements) {
      if (typeof elements === 'function' &&
          elements._elements instanceof REGLElementBuffer) {
        return elements._elements
      }
      return null
    },
    clear: function () {
      values(elementSet).forEach(destroyElements);
    }
  }
}

var FLOAT = new Float32Array(1);
var INT = new Uint32Array(FLOAT.buffer);

var GL_UNSIGNED_SHORT$4 = 5123;

function convertToHalfFloat (array) {
  var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);

  for (var i = 0; i < array.length; ++i) {
    if (isNaN(array[i])) {
      ushorts[i] = 0xffff;
    } else if (array[i] === Infinity) {
      ushorts[i] = 0x7c00;
    } else if (array[i] === -Infinity) {
      ushorts[i] = 0xfc00;
    } else {
      FLOAT[0] = array[i];
      var x = INT[0];

      var sgn = (x >>> 31) << 15;
      var exp = ((x << 1) >>> 24) - 127;
      var frac = (x >> 13) & ((1 << 10) - 1);

      if (exp < -24) {
        // round non-representable denormals to 0
        ushorts[i] = sgn;
      } else if (exp < -14) {
        // handle denormals
        var s = -14 - exp;
        ushorts[i] = sgn + ((frac + (1 << 10)) >> s);
      } else if (exp > 15) {
        // round overflow to +/- Infinity
        ushorts[i] = sgn + 0x7c00;
      } else {
        // otherwise convert directly
        ushorts[i] = sgn + ((exp + 15) << 10) + frac;
      }
    }
  }

  return ushorts
}

function isArrayLike (s) {
  return Array.isArray(s) || isTypedArray(s)
}

var isPow2$1 = function (v) {
  return !(v & (v - 1)) && (!!v)
};

var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;

var GL_TEXTURE_2D$1 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$1 = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;

var GL_RGBA$1 = 0x1908;
var GL_ALPHA = 0x1906;
var GL_RGB = 0x1907;
var GL_LUMINANCE = 0x1909;
var GL_LUMINANCE_ALPHA = 0x190A;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;

var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;

var GL_DEPTH_COMPONENT = 0x1902;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB_EXT = 0x8C40;
var GL_SRGB_ALPHA_EXT = 0x8C42;

var GL_HALF_FLOAT_OES$1 = 0x8D61;

var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;

var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;

var GL_UNSIGNED_BYTE$5 = 0x1401;
var GL_UNSIGNED_SHORT$3 = 0x1403;
var GL_UNSIGNED_INT$3 = 0x1405;
var GL_FLOAT$4 = 0x1406;

var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;

var GL_REPEAT = 0x2901;
var GL_CLAMP_TO_EDGE$1 = 0x812F;
var GL_MIRRORED_REPEAT = 0x8370;

var GL_TEXTURE_MAG_FILTER = 0x2800;
var GL_TEXTURE_MIN_FILTER = 0x2801;

var GL_NEAREST$1 = 0x2600;
var GL_LINEAR = 0x2601;
var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;

var GL_GENERATE_MIPMAP_HINT = 0x8192;
var GL_DONT_CARE = 0x1100;
var GL_FASTEST = 0x1101;
var GL_NICEST = 0x1102;

var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;

var GL_UNPACK_ALIGNMENT = 0x0CF5;
var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;

var GL_BROWSER_DEFAULT_WEBGL = 0x9244;

var GL_TEXTURE0$1 = 0x84C0;

var MIPMAP_FILTERS = [
  GL_NEAREST_MIPMAP_NEAREST$1,
  GL_NEAREST_MIPMAP_LINEAR$1,
  GL_LINEAR_MIPMAP_NEAREST$1,
  GL_LINEAR_MIPMAP_LINEAR$1
];

var CHANNELS_FORMAT = [
  0,
  GL_LUMINANCE,
  GL_LUMINANCE_ALPHA,
  GL_RGB,
  GL_RGBA$1
];

var FORMAT_CHANNELS = {};
FORMAT_CHANNELS[GL_LUMINANCE] =
FORMAT_CHANNELS[GL_ALPHA] =
FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
FORMAT_CHANNELS[GL_DEPTH_STENCIL] =
FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
FORMAT_CHANNELS[GL_RGB] =
FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
FORMAT_CHANNELS[GL_RGBA$1] =
FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;

function objectName (str) {
  return '[object ' + str + ']'
}

var CANVAS_CLASS = objectName('HTMLCanvasElement');
var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');
var BITMAP_CLASS = objectName('ImageBitmap');
var IMAGE_CLASS = objectName('HTMLImageElement');
var VIDEO_CLASS = objectName('HTMLVideoElement');

var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
  CANVAS_CLASS,
  CONTEXT2D_CLASS,
  BITMAP_CLASS,
  IMAGE_CLASS,
  VIDEO_CLASS
]);

// for every texture type, store
// the size in bytes.
var TYPE_SIZES = [];
TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
TYPE_SIZES[GL_FLOAT$4] = 4;
TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;

TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;

var FORMAT_SIZES_SPECIAL = [];
FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;

function isNumericArray (arr) {
  return (
    Array.isArray(arr) &&
    (arr.length === 0 ||
    typeof arr[0] === 'number'))
}

function isRectArray (arr) {
  if (!Array.isArray(arr)) {
    return false
  }
  var width = arr.length;
  if (width === 0 || !isArrayLike(arr[0])) {
    return false
  }
  return true
}

function classString (x) {
  return Object.prototype.toString.call(x)
}

function isCanvasElement (object) {
  return classString(object) === CANVAS_CLASS
}

function isContext2D (object) {
  return classString(object) === CONTEXT2D_CLASS
}

function isBitmap (object) {
  return classString(object) === BITMAP_CLASS
}

function isImageElement (object) {
  return classString(object) === IMAGE_CLASS
}

function isVideoElement (object) {
  return classString(object) === VIDEO_CLASS
}

function isPixelData (object) {
  if (!object) {
    return false
  }
  var className = classString(object);
  if (PIXEL_CLASSES.indexOf(className) >= 0) {
    return true
  }
  return (
    isNumericArray(object) ||
    isRectArray(object) ||
    isNDArrayLike(object))
}

function typedArrayCode$1 (data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0
}

function convertData (result, data) {
  var n = data.length;
  switch (result.type) {
    case GL_UNSIGNED_BYTE$5:
    case GL_UNSIGNED_SHORT$3:
    case GL_UNSIGNED_INT$3:
    case GL_FLOAT$4:
      var converted = pool.allocType(result.type, n);
      converted.set(data);
      result.data = converted;
      break

    case GL_HALF_FLOAT_OES$1:
      result.data = convertToHalfFloat(data);
      break

    default:
      check$1.raise('unsupported texture type, must specify a typed array');
  }
}

function preConvert (image, n) {
  return pool.allocType(
    image.type === GL_HALF_FLOAT_OES$1
      ? GL_FLOAT$4
      : image.type, n)
}

function postConvert (image, data) {
  if (image.type === GL_HALF_FLOAT_OES$1) {
    image.data = convertToHalfFloat(data);
    pool.freeType(data);
  } else {
    image.data = data;
  }
}

function transposeData (image, array, strideX, strideY, strideC, offset) {
  var w = image.width;
  var h = image.height;
  var c = image.channels;
  var n = w * h * c;
  var data = preConvert(image, n);

  var p = 0;
  for (var i = 0; i < h; ++i) {
    for (var j = 0; j < w; ++j) {
      for (var k = 0; k < c; ++k) {
        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
      }
    }
  }

  postConvert(image, data);
}

function getTextureSize (format, type, width, height, isMipmap, isCube) {
  var s;
  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {
    // we have a special array for dealing with weird color formats such as RGB5A1
    s = FORMAT_SIZES_SPECIAL[format];
  } else {
    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
  }

  if (isCube) {
    s *= 6;
  }

  if (isMipmap) {
    // compute the total size of all the mipmaps.
    var total = 0;

    var w = width;
    while (w >= 1) {
      // we can only use mipmaps on a square image,
      // so we can simply use the width and ignore the height:
      total += s * w * w;
      w /= 2;
    }
    return total
  } else {
    return s * width * height
  }
}

function createTextureSet (
  gl, extensions, limits, reglPoll, contextState, stats, config) {
  // -------------------------------------------------------
  // Initialize constants and parameter tables here
  // -------------------------------------------------------
  var mipmapHint = {
    "don't care": GL_DONT_CARE,
    'dont care': GL_DONT_CARE,
    'nice': GL_NICEST,
    'fast': GL_FASTEST
  };

  var wrapModes = {
    'repeat': GL_REPEAT,
    'clamp': GL_CLAMP_TO_EDGE$1,
    'mirror': GL_MIRRORED_REPEAT
  };

  var magFilters = {
    'nearest': GL_NEAREST$1,
    'linear': GL_LINEAR
  };

  var minFilters = extend({
    'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,
    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,
    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,
    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,
    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1
  }, magFilters);

  var colorSpace = {
    'none': 0,
    'browser': GL_BROWSER_DEFAULT_WEBGL
  };

  var textureTypes = {
    'uint8': GL_UNSIGNED_BYTE$5,
    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,
    'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,
    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1
  };

  var textureFormats = {
    'alpha': GL_ALPHA,
    'luminance': GL_LUMINANCE,
    'luminance alpha': GL_LUMINANCE_ALPHA,
    'rgb': GL_RGB,
    'rgba': GL_RGBA$1,
    'rgba4': GL_RGBA4,
    'rgb5 a1': GL_RGB5_A1,
    'rgb565': GL_RGB565
  };

  var compressedTextureFormats = {};

  if (extensions.ext_srgb) {
    textureFormats.srgb = GL_SRGB_EXT;
    textureFormats.srgba = GL_SRGB_ALPHA_EXT;
  }

  if (extensions.oes_texture_float) {
    textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
  }

  if (extensions.oes_texture_half_float) {
    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;
  }

  if (extensions.webgl_depth_texture) {
    extend(textureFormats, {
      'depth': GL_DEPTH_COMPONENT,
      'depth stencil': GL_DEPTH_STENCIL
    });

    extend(textureTypes, {
      'uint16': GL_UNSIGNED_SHORT$3,
      'uint32': GL_UNSIGNED_INT$3,
      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1
    });
  }

  if (extensions.webgl_compressed_texture_s3tc) {
    extend(compressedTextureFormats, {
      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
    });
  }

  if (extensions.webgl_compressed_texture_atc) {
    extend(compressedTextureFormats, {
      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,
      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
    });
  }

  if (extensions.webgl_compressed_texture_pvrtc) {
    extend(compressedTextureFormats, {
      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    });
  }

  if (extensions.webgl_compressed_texture_etc1) {
    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;
  }

  // Copy over all texture formats
  var supportedCompressedFormats = Array.prototype.slice.call(
    gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
  Object.keys(compressedTextureFormats).forEach(function (name) {
    var format = compressedTextureFormats[name];
    if (supportedCompressedFormats.indexOf(format) >= 0) {
      textureFormats[name] = format;
    }
  });

  var supportedFormats = Object.keys(textureFormats);
  limits.textureFormats = supportedFormats;

  // associate with every format string its
  // corresponding GL-value.
  var textureFormatsInvert = [];
  Object.keys(textureFormats).forEach(function (key) {
    var val = textureFormats[key];
    textureFormatsInvert[val] = key;
  });

  // associate with every type string its
  // corresponding GL-value.
  var textureTypesInvert = [];
  Object.keys(textureTypes).forEach(function (key) {
    var val = textureTypes[key];
    textureTypesInvert[val] = key;
  });

  var magFiltersInvert = [];
  Object.keys(magFilters).forEach(function (key) {
    var val = magFilters[key];
    magFiltersInvert[val] = key;
  });

  var minFiltersInvert = [];
  Object.keys(minFilters).forEach(function (key) {
    var val = minFilters[key];
    minFiltersInvert[val] = key;
  });

  var wrapModesInvert = [];
  Object.keys(wrapModes).forEach(function (key) {
    var val = wrapModes[key];
    wrapModesInvert[val] = key;
  });

  // colorFormats[] gives the format (channels) associated to an
  // internalformat
  var colorFormats = supportedFormats.reduce(function (color, key) {
    var glenum = textureFormats[key];
    if (glenum === GL_LUMINANCE ||
        glenum === GL_ALPHA ||
        glenum === GL_LUMINANCE ||
        glenum === GL_LUMINANCE_ALPHA ||
        glenum === GL_DEPTH_COMPONENT ||
        glenum === GL_DEPTH_STENCIL) {
      color[glenum] = glenum;
    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {
      color[glenum] = GL_RGBA$1;
    } else {
      color[glenum] = GL_RGB;
    }
    return color
  }, {});

  function TexFlags () {
    // format info
    this.internalformat = GL_RGBA$1;
    this.format = GL_RGBA$1;
    this.type = GL_UNSIGNED_BYTE$5;
    this.compressed = false;

    // pixel storage
    this.premultiplyAlpha = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;

    // shape info
    this.width = 0;
    this.height = 0;
    this.channels = 0;
  }

  function copyFlags (result, other) {
    result.internalformat = other.internalformat;
    result.format = other.format;
    result.type = other.type;
    result.compressed = other.compressed;

    result.premultiplyAlpha = other.premultiplyAlpha;
    result.flipY = other.flipY;
    result.unpackAlignment = other.unpackAlignment;
    result.colorSpace = other.colorSpace;

    result.width = other.width;
    result.height = other.height;
    result.channels = other.channels;
  }

  function parseFlags (flags, options) {
    if (typeof options !== 'object' || !options) {
      return
    }

    if ('premultiplyAlpha' in options) {
      check$1.type(options.premultiplyAlpha, 'boolean',
        'invalid premultiplyAlpha');
      flags.premultiplyAlpha = options.premultiplyAlpha;
    }

    if ('flipY' in options) {
      check$1.type(options.flipY, 'boolean',
        'invalid texture flip');
      flags.flipY = options.flipY;
    }

    if ('alignment' in options) {
      check$1.oneOf(options.alignment, [1, 2, 4, 8],
        'invalid texture unpack alignment');
      flags.unpackAlignment = options.alignment;
    }

    if ('colorSpace' in options) {
      check$1.parameter(options.colorSpace, colorSpace,
        'invalid colorSpace');
      flags.colorSpace = colorSpace[options.colorSpace];
    }

    if ('type' in options) {
      var type = options.type;
      check$1(extensions.oes_texture_float ||
        !(type === 'float' || type === 'float32'),
        'you must enable the OES_texture_float extension in order to use floating point textures.');
      check$1(extensions.oes_texture_half_float ||
        !(type === 'half float' || type === 'float16'),
        'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');
      check$1(extensions.webgl_depth_texture ||
        !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'),
        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(type, textureTypes,
        'invalid texture type');
      flags.type = textureTypes[type];
    }

    var w = flags.width;
    var h = flags.height;
    var c = flags.channels;
    var hasChannels = false;
    if ('shape' in options) {
      check$1(Array.isArray(options.shape) && options.shape.length >= 2,
        'shape must be an array');
      w = options.shape[0];
      h = options.shape[1];
      if (options.shape.length === 3) {
        c = options.shape[2];
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
      check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
    } else {
      if ('radius' in options) {
        w = h = options.radius;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');
      }
      if ('width' in options) {
        w = options.width;
        check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      }
      if ('height' in options) {
        h = options.height;
        check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
      }
      if ('channels' in options) {
        c = options.channels;
        check$1(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
    }
    flags.width = w | 0;
    flags.height = h | 0;
    flags.channels = c | 0;

    var hasFormat = false;
    if ('format' in options) {
      var formatStr = options.format;
      check$1(extensions.webgl_depth_texture ||
        !(formatStr === 'depth' || formatStr === 'depth stencil'),
        'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check$1.parameter(formatStr, textureFormats,
        'invalid texture format');
      var internalformat = flags.internalformat = textureFormats[formatStr];
      flags.format = colorFormats[internalformat];
      if (formatStr in textureTypes) {
        if (!('type' in options)) {
          flags.type = textureTypes[formatStr];
        }
      }
      if (formatStr in compressedTextureFormats) {
        flags.compressed = true;
      }
      hasFormat = true;
    }

    // Reconcile channels and format
    if (!hasChannels && hasFormat) {
      flags.channels = FORMAT_CHANNELS[flags.format];
    } else if (hasChannels && !hasFormat) {
      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
      }
    } else if (hasFormat && hasChannels) {
      check$1(
        flags.channels === FORMAT_CHANNELS[flags.format],
        'number of channels inconsistent with specified format');
    }
  }

  function setFlags (flags) {
    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
  }

  // -------------------------------------------------------
  // Tex image data
  // -------------------------------------------------------
  function TexImage () {
    TexFlags.call(this);

    this.xOffset = 0;
    this.yOffset = 0;

    // data
    this.data = null;
    this.needsFree = false;

    // html element
    this.element = null;

    // copyTexImage info
    this.needsCopy = false;
  }

  function parseImage (image, options) {
    var data = null;
    if (isPixelData(options)) {
      data = options;
    } else if (options) {
      check$1.type(options, 'object', 'invalid pixel data type');
      parseFlags(image, options);
      if ('x' in options) {
        image.xOffset = options.x | 0;
      }
      if ('y' in options) {
        image.yOffset = options.y | 0;
      }
      if (isPixelData(options.data)) {
        data = options.data;
      }
    }

    check$1(
      !image.compressed ||
      data instanceof Uint8Array,
      'compressed texture data must be stored in a uint8array');

    if (options.copy) {
      check$1(!data, 'can not specify copy and data field for the same texture');
      var viewW = contextState.viewportWidth;
      var viewH = contextState.viewportHeight;
      image.width = image.width || (viewW - image.xOffset);
      image.height = image.height || (viewH - image.yOffset);
      image.needsCopy = true;
      check$1(image.xOffset >= 0 && image.xOffset < viewW &&
            image.yOffset >= 0 && image.yOffset < viewH &&
            image.width > 0 && image.width <= viewW &&
            image.height > 0 && image.height <= viewH,
            'copy texture read out of bounds');
    } else if (!data) {
      image.width = image.width || 1;
      image.height = image.height || 1;
      image.channels = image.channels || 4;
    } else if (isTypedArray(data)) {
      image.channels = image.channels || 4;
      image.data = data;
      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(data);
      }
    } else if (isNumericArray(data)) {
      image.channels = image.channels || 4;
      convertData(image, data);
      image.alignment = 1;
      image.needsFree = true;
    } else if (isNDArrayLike(data)) {
      var array = data.data;
      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {
        image.type = typedArrayCode$1(array);
      }
      var shape = data.shape;
      var stride = data.stride;
      var shapeX, shapeY, shapeC, strideX, strideY, strideC;
      if (shape.length === 3) {
        shapeC = shape[2];
        strideC = stride[2];
      } else {
        check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');
        shapeC = 1;
        strideC = 1;
      }
      shapeX = shape[0];
      shapeY = shape[1];
      strideX = stride[0];
      strideY = stride[1];
      image.alignment = 1;
      image.width = shapeX;
      image.height = shapeY;
      image.channels = shapeC;
      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
      image.needsFree = true;
      transposeData(image, array, strideX, strideY, strideC, data.offset);
    } else if (isCanvasElement(data) || isContext2D(data)) {
      if (isCanvasElement(data)) {
        image.element = data;
      } else {
        image.element = data.canvas;
      }
      image.width = image.element.width;
      image.height = image.element.height;
      image.channels = 4;
    } else if (isBitmap(data)) {
      image.element = data;
      image.width = data.width;
      image.height = data.height;
      image.channels = 4;
    } else if (isImageElement(data)) {
      image.element = data;
      image.width = data.naturalWidth;
      image.height = data.naturalHeight;
      image.channels = 4;
    } else if (isVideoElement(data)) {
      image.element = data;
      image.width = data.videoWidth;
      image.height = data.videoHeight;
      image.channels = 4;
    } else if (isRectArray(data)) {
      var w = image.width || data[0].length;
      var h = image.height || data.length;
      var c = image.channels;
      if (isArrayLike(data[0][0])) {
        c = c || data[0][0].length;
      } else {
        c = c || 1;
      }
      var arrayShape = flattenUtils.shape(data);
      var n = 1;
      for (var dd = 0; dd < arrayShape.length; ++dd) {
        n *= arrayShape[dd];
      }
      var allocData = preConvert(image, n);
      flattenUtils.flatten(data, arrayShape, '', allocData);
      postConvert(image, allocData);
      image.alignment = 1;
      image.width = w;
      image.height = h;
      image.channels = c;
      image.format = image.internalformat = CHANNELS_FORMAT[c];
      image.needsFree = true;
    }

    if (image.type === GL_FLOAT$4) {
      check$1(limits.extensions.indexOf('oes_texture_float') >= 0,
        'oes_texture_float extension not enabled');
    } else if (image.type === GL_HALF_FLOAT_OES$1) {
      check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0,
        'oes_texture_half_float extension not enabled');
    }

    // do compressed texture  validation here.
  }

  function setImage (info, target, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;
    var channels = info.channels;

    setFlags(info);

    if (element) {
      gl.texImage2D(target, miplevel, format, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexImage2D(
        target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);
    } else {
      var nullData = !data;
      if (nullData) {
        data = pool.zero.allocType(type, width * height * channels);
      }

      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);

      if (nullData && data) {
        pool.zero.freeType(data);
      }
    }
  }

  function setSubImage (info, target, x, y, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texSubImage2D(
        target, miplevel, x, y, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexSubImage2D(
        target, miplevel, x, y, internalformat, width, height, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexSubImage2D(
        target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
    } else {
      gl.texSubImage2D(
        target, miplevel, x, y, width, height, format, type, data);
    }
  }

  // texImage pool
  var imagePool = [];

  function allocImage () {
    return imagePool.pop() || new TexImage()
  }

  function freeImage (image) {
    if (image.needsFree) {
      pool.freeType(image.data);
    }
    TexImage.call(image);
    imagePool.push(image);
  }

  // -------------------------------------------------------
  // Mip map
  // -------------------------------------------------------
  function MipMap () {
    TexFlags.call(this);

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
    this.mipmask = 0;
    this.images = Array(16);
  }

  function parseMipMapFromShape (mipmap, width, height) {
    var img = mipmap.images[0] = allocImage();
    mipmap.mipmask = 1;
    img.width = mipmap.width = width;
    img.height = mipmap.height = height;
    img.channels = mipmap.channels = 4;
  }

  function parseMipMapFromObject (mipmap, options) {
    var imgData = null;
    if (isPixelData(options)) {
      imgData = mipmap.images[0] = allocImage();
      copyFlags(imgData, mipmap);
      parseImage(imgData, options);
      mipmap.mipmask = 1;
    } else {
      parseFlags(mipmap, options);
      if (Array.isArray(options.mipmap)) {
        var mipData = options.mipmap;
        for (var i = 0; i < mipData.length; ++i) {
          imgData = mipmap.images[i] = allocImage();
          copyFlags(imgData, mipmap);
          imgData.width >>= i;
          imgData.height >>= i;
          parseImage(imgData, mipData[i]);
          mipmap.mipmask |= (1 << i);
        }
      } else {
        imgData = mipmap.images[0] = allocImage();
        copyFlags(imgData, mipmap);
        parseImage(imgData, options);
        mipmap.mipmask = 1;
      }
    }
    copyFlags(mipmap, mipmap.images[0]);

    // For textures of the compressed format WEBGL_compressed_texture_s3tc
    // we must have that
    //
    // "When level equals zero width and height must be a multiple of 4.
    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. "
    //
    // but we do not yet support having multiple mipmap levels for compressed textures,
    // so we only test for level zero.

    if (mipmap.compressed &&
        (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT) ||
        (mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
      check$1(mipmap.width % 4 === 0 &&
            mipmap.height % 4 === 0,
            'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');
    }
  }

  function setMipMap (mipmap, target) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (!images[i]) {
        return
      }
      setImage(images[i], target, i);
    }
  }

  var mipPool = [];

  function allocMipMap () {
    var result = mipPool.pop() || new MipMap();
    TexFlags.call(result);
    result.mipmask = 0;
    for (var i = 0; i < 16; ++i) {
      result.images[i] = null;
    }
    return result
  }

  function freeMipMap (mipmap) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (images[i]) {
        freeImage(images[i]);
      }
      images[i] = null;
    }
    mipPool.push(mipmap);
  }

  // -------------------------------------------------------
  // Tex info
  // -------------------------------------------------------
  function TexInfo () {
    this.minFilter = GL_NEAREST$1;
    this.magFilter = GL_NEAREST$1;

    this.wrapS = GL_CLAMP_TO_EDGE$1;
    this.wrapT = GL_CLAMP_TO_EDGE$1;

    this.anisotropic = 1;

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
  }

  function parseTexInfo (info, options) {
    if ('min' in options) {
      var minFilter = options.min;
      check$1.parameter(minFilter, minFilters);
      info.minFilter = minFilters[minFilter];
      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {
        info.genMipmaps = true;
      }
    }

    if ('mag' in options) {
      var magFilter = options.mag;
      check$1.parameter(magFilter, magFilters);
      info.magFilter = magFilters[magFilter];
    }

    var wrapS = info.wrapS;
    var wrapT = info.wrapT;
    if ('wrap' in options) {
      var wrap = options.wrap;
      if (typeof wrap === 'string') {
        check$1.parameter(wrap, wrapModes);
        wrapS = wrapT = wrapModes[wrap];
      } else if (Array.isArray(wrap)) {
        check$1.parameter(wrap[0], wrapModes);
        check$1.parameter(wrap[1], wrapModes);
        wrapS = wrapModes[wrap[0]];
        wrapT = wrapModes[wrap[1]];
      }
    } else {
      if ('wrapS' in options) {
        var optWrapS = options.wrapS;
        check$1.parameter(optWrapS, wrapModes);
        wrapS = wrapModes[optWrapS];
      }
      if ('wrapT' in options) {
        var optWrapT = options.wrapT;
        check$1.parameter(optWrapT, wrapModes);
        wrapT = wrapModes[optWrapT];
      }
    }
    info.wrapS = wrapS;
    info.wrapT = wrapT;

    if ('anisotropic' in options) {
      var anisotropic = options.anisotropic;
      check$1(typeof anisotropic === 'number' &&
         anisotropic >= 1 && anisotropic <= limits.maxAnisotropic,
        'aniso samples must be between 1 and ');
      info.anisotropic = options.anisotropic;
    }

    if ('mipmap' in options) {
      var hasMipMap = false;
      switch (typeof options.mipmap) {
        case 'string':
          check$1.parameter(options.mipmap, mipmapHint,
            'invalid mipmap hint');
          info.mipmapHint = mipmapHint[options.mipmap];
          info.genMipmaps = true;
          hasMipMap = true;
          break

        case 'boolean':
          hasMipMap = info.genMipmaps = options.mipmap;
          break

        case 'object':
          check$1(Array.isArray(options.mipmap), 'invalid mipmap type');
          info.genMipmaps = false;
          hasMipMap = true;
          break

        default:
          check$1.raise('invalid mipmap type');
      }
      if (hasMipMap && !('min' in options)) {
        info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
      }
    }
  }

  function setTexInfo (info, target) {
    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
    if (extensions.ext_texture_filter_anisotropic) {
      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
    }
    if (info.genMipmaps) {
      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
      gl.generateMipmap(target);
    }
  }

  // -------------------------------------------------------
  // Full texture object
  // -------------------------------------------------------
  var textureCount = 0;
  var textureSet = {};
  var numTexUnits = limits.maxTextureUnits;
  var textureUnits = Array(numTexUnits).map(function () {
    return null
  });

  function REGLTexture (target) {
    TexFlags.call(this);
    this.mipmask = 0;
    this.internalformat = GL_RGBA$1;

    this.id = textureCount++;

    this.refCount = 1;

    this.target = target;
    this.texture = gl.createTexture();

    this.unit = -1;
    this.bindCount = 0;

    this.texInfo = new TexInfo();

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  function tempBind (texture) {
    gl.activeTexture(GL_TEXTURE0$1);
    gl.bindTexture(texture.target, texture.texture);
  }

  function tempRestore () {
    var prev = textureUnits[0];
    if (prev) {
      gl.bindTexture(prev.target, prev.texture);
    } else {
      gl.bindTexture(GL_TEXTURE_2D$1, null);
    }
  }

  function destroy (texture) {
    var handle = texture.texture;
    check$1(handle, 'must not double destroy texture');
    var unit = texture.unit;
    var target = texture.target;
    if (unit >= 0) {
      gl.activeTexture(GL_TEXTURE0$1 + unit);
      gl.bindTexture(target, null);
      textureUnits[unit] = null;
    }
    gl.deleteTexture(handle);
    texture.texture = null;
    texture.params = null;
    texture.pixels = null;
    texture.refCount = 0;
    delete textureSet[texture.id];
    stats.textureCount--;
  }

  extend(REGLTexture.prototype, {
    bind: function () {
      var texture = this;
      texture.bindCount += 1;
      var unit = texture.unit;
      if (unit < 0) {
        for (var i = 0; i < numTexUnits; ++i) {
          var other = textureUnits[i];
          if (other) {
            if (other.bindCount > 0) {
              continue
            }
            other.unit = -1;
          }
          textureUnits[i] = texture;
          unit = i;
          break
        }
        if (unit >= numTexUnits) {
          check$1.raise('insufficient number of texture units');
        }
        if (config.profile && stats.maxTextureUnits < (unit + 1)) {
          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based
        }
        texture.unit = unit;
        gl.activeTexture(GL_TEXTURE0$1 + unit);
        gl.bindTexture(texture.target, texture.texture);
      }
      return unit
    },

    unbind: function () {
      this.bindCount -= 1;
    },

    decRef: function () {
      if (--this.refCount <= 0) {
        destroy(this);
      }
    }
  });

  function createTexture2D (a, b) {
    var texture = new REGLTexture(GL_TEXTURE_2D$1);
    textureSet[texture.id] = texture;
    stats.textureCount++;

    function reglTexture2D (a, b) {
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      var mipData = allocMipMap();

      if (typeof a === 'number') {
        if (typeof b === 'number') {
          parseMipMapFromShape(mipData, a | 0, b | 0);
        } else {
          parseMipMapFromShape(mipData, a | 0, a | 0);
        }
      } else if (a) {
        check$1.type(a, 'object', 'invalid arguments to regl.texture');
        parseTexInfo(texInfo, a);
        parseMipMapFromObject(mipData, a);
      } else {
        // empty textures get assigned a default shape of 1x1
        parseMipMapFromShape(mipData, 1, 1);
      }

      if (texInfo.genMipmaps) {
        mipData.mipmask = (mipData.width << 1) - 1;
      }
      texture.mipmask = mipData.mipmask;

      copyFlags(texture, mipData);

      check$1.texture2D(texInfo, mipData, limits);
      texture.internalformat = mipData.internalformat;

      reglTexture2D.width = mipData.width;
      reglTexture2D.height = mipData.height;

      tempBind(texture);
      setMipMap(mipData, GL_TEXTURE_2D$1);
      setTexInfo(texInfo, GL_TEXTURE_2D$1);
      tempRestore();

      freeMipMap(mipData);

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          mipData.width,
          mipData.height,
          texInfo.genMipmaps,
          false);
      }
      reglTexture2D.format = textureFormatsInvert[texture.internalformat];
      reglTexture2D.type = textureTypesInvert[texture.type];

      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];

      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];

      return reglTexture2D
    }

    function subimage (image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTexture2D
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;
      if (w === texture.width && h === texture.height) {
        return reglTexture2D
      }

      reglTexture2D.width = texture.width = w;
      reglTexture2D.height = texture.height = h;

      tempBind(texture);

      var data;
      var channels = texture.channels;
      var type = texture.type;

      for (var i = 0; texture.mipmask >> i; ++i) {
        var _w = w >> i;
        var _h = h >> i;
        if (!_w || !_h) { break }
        data = pool.zero.allocType(type, _w * _h * channels);
        gl.texImage2D(
          GL_TEXTURE_2D$1,
          i,
          texture.format,
          _w,
          _h,
          0,
          texture.format,
          texture.type,
          data);
        if (data) { pool.zero.freeType(data); }
      }
      tempRestore();

      // also, recompute the texture size.
      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          w,
          h,
          false,
          false);
      }

      return reglTexture2D
    }

    reglTexture2D(a, b);

    reglTexture2D.subimage = subimage;
    reglTexture2D.resize = resize;
    reglTexture2D._reglType = 'texture2d';
    reglTexture2D._texture = texture;
    if (config.profile) {
      reglTexture2D.stats = texture.stats;
    }
    reglTexture2D.destroy = function () {
      texture.decRef();
    };

    return reglTexture2D
  }

  function createTextureCube (a0, a1, a2, a3, a4, a5) {
    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
    textureSet[texture.id] = texture;
    stats.cubeCount++;

    var faces = new Array(6);

    function reglTextureCube (a0, a1, a2, a3, a4, a5) {
      var i;
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      for (i = 0; i < 6; ++i) {
        faces[i] = allocMipMap();
      }

      if (typeof a0 === 'number' || !a0) {
        var s = (a0 | 0) || 1;
        for (i = 0; i < 6; ++i) {
          parseMipMapFromShape(faces[i], s, s);
        }
      } else if (typeof a0 === 'object') {
        if (a1) {
          parseMipMapFromObject(faces[0], a0);
          parseMipMapFromObject(faces[1], a1);
          parseMipMapFromObject(faces[2], a2);
          parseMipMapFromObject(faces[3], a3);
          parseMipMapFromObject(faces[4], a4);
          parseMipMapFromObject(faces[5], a5);
        } else {
          parseTexInfo(texInfo, a0);
          parseFlags(texture, a0);
          if ('faces' in a0) {
            var face_input = a0.faces;
            check$1(Array.isArray(face_input) && face_input.length === 6,
              'cube faces must be a length 6 array');
            for (i = 0; i < 6; ++i) {
              check$1(typeof face_input[i] === 'object' && !!face_input[i],
                'invalid input for cube map face');
              copyFlags(faces[i], texture);
              parseMipMapFromObject(faces[i], face_input[i]);
            }
          } else {
            for (i = 0; i < 6; ++i) {
              parseMipMapFromObject(faces[i], a0);
            }
          }
        }
      } else {
        check$1.raise('invalid arguments to cube map');
      }

      copyFlags(texture, faces[0]);

      if (!limits.npotTextureCube) {
        check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');
      }

      if (texInfo.genMipmaps) {
        texture.mipmask = (faces[0].width << 1) - 1;
      } else {
        texture.mipmask = faces[0].mipmask;
      }

      check$1.textureCube(texture, texInfo, faces, limits);
      texture.internalformat = faces[0].internalformat;

      reglTextureCube.width = faces[0].width;
      reglTextureCube.height = faces[0].height;

      tempBind(texture);
      for (i = 0; i < 6; ++i) {
        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
      }
      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          texInfo.genMipmaps,
          true);
      }

      reglTextureCube.format = textureFormatsInvert[texture.internalformat];
      reglTextureCube.type = textureTypesInvert[texture.type];

      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];

      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];

      for (i = 0; i < 6; ++i) {
        freeMipMap(faces[i]);
      }

      return reglTextureCube
    }

    function subimage (face, image, x_, y_, level_) {
      check$1(!!image, 'must specify image data');
      check$1(typeof face === 'number' && face === (face | 0) &&
        face >= 0 && face < 6, 'invalid face');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || ((texture.width >> level) - x);
      imageData.height = imageData.height || ((texture.height >> level) - y);

      check$1(
        texture.type === imageData.type &&
        texture.format === imageData.format &&
        texture.internalformat === imageData.internalformat,
        'incompatible format for texture.subimage');
      check$1(
        x >= 0 && y >= 0 &&
        x + imageData.width <= texture.width &&
        y + imageData.height <= texture.height,
        'texture.subimage write out of bounds');
      check$1(
        texture.mipmask & (1 << level),
        'missing mipmap data');
      check$1(
        imageData.data || imageData.element || imageData.needsCopy,
        'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTextureCube
    }

    function resize (radius_) {
      var radius = radius_ | 0;
      if (radius === texture.width) {
        return
      }

      reglTextureCube.width = texture.width = radius;
      reglTextureCube.height = texture.height = radius;

      tempBind(texture);
      for (var i = 0; i < 6; ++i) {
        for (var j = 0; texture.mipmask >> j; ++j) {
          gl.texImage2D(
            GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,
            j,
            texture.format,
            radius >> j,
            radius >> j,
            0,
            texture.format,
            texture.type,
            null);
        }
      }
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(
          texture.internalformat,
          texture.type,
          reglTextureCube.width,
          reglTextureCube.height,
          false,
          true);
      }

      return reglTextureCube
    }

    reglTextureCube(a0, a1, a2, a3, a4, a5);

    reglTextureCube.subimage = subimage;
    reglTextureCube.resize = resize;
    reglTextureCube._reglType = 'textureCube';
    reglTextureCube._texture = texture;
    if (config.profile) {
      reglTextureCube.stats = texture.stats;
    }
    reglTextureCube.destroy = function () {
      texture.decRef();
    };

    return reglTextureCube
  }

  // Called when regl is destroyed
  function destroyTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      gl.activeTexture(GL_TEXTURE0$1 + i);
      gl.bindTexture(GL_TEXTURE_2D$1, null);
      textureUnits[i] = null;
    }
    values(textureSet).forEach(destroy);

    stats.cubeCount = 0;
    stats.textureCount = 0;
  }

  if (config.profile) {
    stats.getTotalTextureSize = function () {
      var total = 0;
      Object.keys(textureSet).forEach(function (key) {
        total += textureSet[key].stats.size;
      });
      return total
    };
  }

  function restoreTextures () {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
    }
    
    values(textureSet).forEach(function (texture) {
      texture.texture = gl.createTexture();
      gl.bindTexture(texture.target, texture.texture);
      for (var i = 0; i < 32; ++i) {
        if ((texture.mipmask & (1 << i)) === 0) {
          continue
        }
        if (texture.target === GL_TEXTURE_2D$1) {
          gl.texImage2D(GL_TEXTURE_2D$1,
            i,
            texture.internalformat,
            texture.width >> i,
            texture.height >> i,
            0,
            texture.internalformat,
            texture.type,
            null);
        } else {
          for (var j = 0; j < 6; ++j) {
            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,
              i,
              texture.internalformat,
              texture.width >> i,
              texture.height >> i,
              0,
              texture.internalformat,
              texture.type,
              null);
          }
        }
      }
      setTexInfo(texture.texInfo, texture.target);
    });
  }

  return {
    create2D: createTexture2D,
    createCube: createTextureCube,
    clear: destroyTextures,
    getTexture: function (wrapper) {
      return null
    },
    restore: restoreTextures
  }
}

var GL_RENDERBUFFER = 0x8D41;

var GL_RGBA4$1 = 0x8056;
var GL_RGB5_A1$1 = 0x8057;
var GL_RGB565$1 = 0x8D62;
var GL_DEPTH_COMPONENT16 = 0x81A5;
var GL_STENCIL_INDEX8 = 0x8D48;
var GL_DEPTH_STENCIL$1 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT = 0x8C43;

var GL_RGBA32F_EXT = 0x8814;

var GL_RGBA16F_EXT = 0x881A;
var GL_RGB16F_EXT = 0x881B;

var FORMAT_SIZES = [];

FORMAT_SIZES[GL_RGBA4$1] = 2;
FORMAT_SIZES[GL_RGB5_A1$1] = 2;
FORMAT_SIZES[GL_RGB565$1] = 2;

FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;

FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
FORMAT_SIZES[GL_RGB16F_EXT] = 6;

function getRenderbufferSize (format, width, height) {
  return FORMAT_SIZES[format] * width * height
}

var wrapRenderbuffers = function (gl, extensions, limits, stats, config) {
  var formatTypes = {
    'rgba4': GL_RGBA4$1,
    'rgb565': GL_RGB565$1,
    'rgb5 a1': GL_RGB5_A1$1,
    'depth': GL_DEPTH_COMPONENT16,
    'stencil': GL_STENCIL_INDEX8,
    'depth stencil': GL_DEPTH_STENCIL$1
  };

  if (extensions.ext_srgb) {
    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;
  }

  if (extensions.ext_color_buffer_half_float) {
    formatTypes['rgba16f'] = GL_RGBA16F_EXT;
    formatTypes['rgb16f'] = GL_RGB16F_EXT;
  }

  if (extensions.webgl_color_buffer_float) {
    formatTypes['rgba32f'] = GL_RGBA32F_EXT;
  }

  var formatTypesInvert = [];
  Object.keys(formatTypes).forEach(function (key) {
    var val = formatTypes[key];
    formatTypesInvert[val] = key;
  });

  var renderbufferCount = 0;
  var renderbufferSet = {};

  function REGLRenderbuffer (renderbuffer) {
    this.id = renderbufferCount++;
    this.refCount = 1;

    this.renderbuffer = renderbuffer;

    this.format = GL_RGBA4$1;
    this.width = 0;
    this.height = 0;

    if (config.profile) {
      this.stats = {size: 0};
    }
  }

  REGLRenderbuffer.prototype.decRef = function () {
    if (--this.refCount <= 0) {
      destroy(this);
    }
  };

  function destroy (rb) {
    var handle = rb.renderbuffer;
    check$1(handle, 'must not double destroy renderbuffer');
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
    gl.deleteRenderbuffer(handle);
    rb.renderbuffer = null;
    rb.refCount = 0;
    delete renderbufferSet[rb.id];
    stats.renderbufferCount--;
  }

  function createRenderbuffer (a, b) {
    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
    renderbufferSet[renderbuffer.id] = renderbuffer;
    stats.renderbufferCount++;

    function reglRenderbuffer (a, b) {
      var w = 0;
      var h = 0;
      var format = GL_RGBA4$1;

      if (typeof a === 'object' && a) {
        var options = a;
        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid renderbuffer shape');
          w = shape[0] | 0;
          h = shape[1] | 0;
        } else {
          if ('radius' in options) {
            w = h = options.radius | 0;
          }
          if ('width' in options) {
            w = options.width | 0;
          }
          if ('height' in options) {
            h = options.height | 0;
          }
        }
        if ('format' in options) {
          check$1.parameter(options.format, formatTypes,
            'invalid renderbuffer format');
          format = formatTypes[options.format];
        }
      } else if (typeof a === 'number') {
        w = a | 0;
        if (typeof b === 'number') {
          h = b | 0;
        } else {
          h = w;
        }
      } else if (!a) {
        w = h = 1;
      } else {
        check$1.raise('invalid arguments to renderbuffer constructor');
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      if (w === renderbuffer.width &&
          h === renderbuffer.height &&
          format === renderbuffer.format) {
        return
      }

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;
      renderbuffer.format = format;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }
      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];

      return reglRenderbuffer
    }

    function resize (w_, h_) {
      var w = w_ | 0;
      var h = (h_ | 0) || w;

      if (w === renderbuffer.width && h === renderbuffer.height) {
        return reglRenderbuffer
      }

      // check shape
      check$1(
        w > 0 && h > 0 &&
        w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize,
        'invalid renderbuffer size');

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);

      check$1(
        gl.getError() === 0,
        'invalid render buffer format');

      // also, recompute size.
      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(
          renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }

      return reglRenderbuffer
    }

    reglRenderbuffer(a, b);

    reglRenderbuffer.resize = resize;
    reglRenderbuffer._reglType = 'renderbuffer';
    reglRenderbuffer._renderbuffer = renderbuffer;
    if (config.profile) {
      reglRenderbuffer.stats = renderbuffer.stats;
    }
    reglRenderbuffer.destroy = function () {
      renderbuffer.decRef();
    };

    return reglRenderbuffer
  }

  if (config.profile) {
    stats.getTotalRenderbufferSize = function () {
      var total = 0;
      Object.keys(renderbufferSet).forEach(function (key) {
        total += renderbufferSet[key].stats.size;
      });
      return total
    };
  }

  function restoreRenderbuffers () {
    values(renderbufferSet).forEach(function (rb) {
      rb.renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
    });
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
  }

  return {
    create: createRenderbuffer,
    clear: function () {
      values(renderbufferSet).forEach(destroy);
    },
    restore: restoreRenderbuffers
  }
};

// We store these constants so that the minifier can inline them
var GL_FRAMEBUFFER$1 = 0x8D40;
var GL_RENDERBUFFER$1 = 0x8D41;

var GL_TEXTURE_2D$2 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;

var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;
var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;

var GL_HALF_FLOAT_OES$2 = 0x8D61;
var GL_UNSIGNED_BYTE$6 = 0x1401;
var GL_FLOAT$5 = 0x1406;

var GL_RGB$1 = 0x1907;
var GL_RGBA$2 = 0x1908;

var GL_DEPTH_COMPONENT$1 = 0x1902;

var colorTextureFormatEnums = [
  GL_RGB$1,
  GL_RGBA$2
];

// for every texture format, store
// the number of channels
var textureFormatChannels = [];
textureFormatChannels[GL_RGBA$2] = 4;
textureFormatChannels[GL_RGB$1] = 3;

// for every texture type, store
// the size in bytes.
var textureTypeSizes = [];
textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
textureTypeSizes[GL_FLOAT$5] = 4;
textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;

var GL_RGBA4$2 = 0x8056;
var GL_RGB5_A1$2 = 0x8057;
var GL_RGB565$2 = 0x8D62;
var GL_DEPTH_COMPONENT16$1 = 0x81A5;
var GL_STENCIL_INDEX8$1 = 0x8D48;
var GL_DEPTH_STENCIL$2 = 0x84F9;

var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;

var GL_RGBA32F_EXT$1 = 0x8814;

var GL_RGBA16F_EXT$1 = 0x881A;
var GL_RGB16F_EXT$1 = 0x881B;

var colorRenderbufferFormatEnums = [
  GL_RGBA4$2,
  GL_RGB5_A1$2,
  GL_RGB565$2,
  GL_SRGB8_ALPHA8_EXT$1,
  GL_RGBA16F_EXT$1,
  GL_RGB16F_EXT$1,
  GL_RGBA32F_EXT$1
];

var statusCode = {};
statusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';
statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';

function wrapFBOState (
  gl,
  extensions,
  limits,
  textureState,
  renderbufferState,
  stats) {
  var framebufferState = {
    cur: null,
    next: null,
    dirty: false,
    setFBO: null
  };

  var colorTextureFormats = ['rgba'];
  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];

  if (extensions.ext_srgb) {
    colorRenderbufferFormats.push('srgba');
  }

  if (extensions.ext_color_buffer_half_float) {
    colorRenderbufferFormats.push('rgba16f', 'rgb16f');
  }

  if (extensions.webgl_color_buffer_float) {
    colorRenderbufferFormats.push('rgba32f');
  }

  var colorTypes = ['uint8'];
  if (extensions.oes_texture_half_float) {
    colorTypes.push('half float', 'float16');
  }
  if (extensions.oes_texture_float) {
    colorTypes.push('float', 'float32');
  }

  function FramebufferAttachment (target, texture, renderbuffer) {
    this.target = target;
    this.texture = texture;
    this.renderbuffer = renderbuffer;

    var w = 0;
    var h = 0;
    if (texture) {
      w = texture.width;
      h = texture.height;
    } else if (renderbuffer) {
      w = renderbuffer.width;
      h = renderbuffer.height;
    }
    this.width = w;
    this.height = h;
  }

  function decRef (attachment) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture._texture.decRef();
      }
      if (attachment.renderbuffer) {
        attachment.renderbuffer._renderbuffer.decRef();
      }
    }
  }

  function incRefAndCheckShape (attachment, width, height) {
    if (!attachment) {
      return
    }
    if (attachment.texture) {
      var texture = attachment.texture._texture;
      var tw = Math.max(1, texture.width);
      var th = Math.max(1, texture.height);
      check$1(tw === width && th === height,
        'inconsistent width/height for supplied texture');
      texture.refCount += 1;
    } else {
      var renderbuffer = attachment.renderbuffer._renderbuffer;
      check$1(
        renderbuffer.width === width && renderbuffer.height === height,
        'inconsistent width/height for renderbuffer');
      renderbuffer.refCount += 1;
    }
  }

  function attach (location, attachment) {
    if (attachment) {
      if (attachment.texture) {
        gl.framebufferTexture2D(
          GL_FRAMEBUFFER$1,
          location,
          attachment.target,
          attachment.texture._texture.texture,
          0);
      } else {
        gl.framebufferRenderbuffer(
          GL_FRAMEBUFFER$1,
          location,
          GL_RENDERBUFFER$1,
          attachment.renderbuffer._renderbuffer.renderbuffer);
      }
    }
  }

  function parseAttachment (attachment) {
    var target = GL_TEXTURE_2D$2;
    var texture = null;
    var renderbuffer = null;

    var data = attachment;
    if (typeof attachment === 'object') {
      data = attachment.data;
      if ('target' in attachment) {
        target = attachment.target | 0;
      }
    }

    check$1.type(data, 'function', 'invalid attachment data');

    var type = data._reglType;
    if (type === 'texture2d') {
      texture = data;
      check$1(target === GL_TEXTURE_2D$2);
    } else if (type === 'textureCube') {
      texture = data;
      check$1(
        target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 &&
        target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6,
        'invalid cube map target');
    } else if (type === 'renderbuffer') {
      renderbuffer = data;
      target = GL_RENDERBUFFER$1;
    } else {
      check$1.raise('invalid regl object for attachment');
    }

    return new FramebufferAttachment(target, texture, renderbuffer)
  }

  function allocAttachment (
    width,
    height,
    isTexture,
    format,
    type) {
    if (isTexture) {
      var texture = textureState.create2D({
        width: width,
        height: height,
        format: format,
        type: type
      });
      texture._texture.refCount = 0;
      return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null)
    } else {
      var rb = renderbufferState.create({
        width: width,
        height: height,
        format: format
      });
      rb._renderbuffer.refCount = 0;
      return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb)
    }
  }

  function unwrapAttachment (attachment) {
    return attachment && (attachment.texture || attachment.renderbuffer)
  }

  function resizeAttachment (attachment, w, h) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture.resize(w, h);
      } else if (attachment.renderbuffer) {
        attachment.renderbuffer.resize(w, h);
      }
      attachment.width = w;
      attachment.height = h;
    }
  }

  var framebufferCount = 0;
  var framebufferSet = {};

  function REGLFramebuffer () {
    this.id = framebufferCount++;
    framebufferSet[this.id] = this;

    this.framebuffer = gl.createFramebuffer();
    this.width = 0;
    this.height = 0;

    this.colorAttachments = [];
    this.depthAttachment = null;
    this.stencilAttachment = null;
    this.depthStencilAttachment = null;
  }

  function decFBORefs (framebuffer) {
    framebuffer.colorAttachments.forEach(decRef);
    decRef(framebuffer.depthAttachment);
    decRef(framebuffer.stencilAttachment);
    decRef(framebuffer.depthStencilAttachment);
  }

  function destroy (framebuffer) {
    var handle = framebuffer.framebuffer;
    check$1(handle, 'must not double destroy framebuffer');
    gl.deleteFramebuffer(handle);
    framebuffer.framebuffer = null;
    stats.framebufferCount--;
    delete framebufferSet[framebuffer.id];
  }

  function updateFramebuffer (framebuffer) {
    var i;

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
    var colorAttachments = framebuffer.colorAttachments;
    for (i = 0; i < colorAttachments.length; ++i) {
      attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
    }
    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
      gl.framebufferTexture2D(
        GL_FRAMEBUFFER$1,
        GL_COLOR_ATTACHMENT0$1 + i,
        GL_TEXTURE_2D$2,
        null,
        0);
    }

    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_DEPTH_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);
    gl.framebufferTexture2D(
      GL_FRAMEBUFFER$1,
      GL_STENCIL_ATTACHMENT,
      GL_TEXTURE_2D$2,
      null,
      0);

    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);

    // Check status code
    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
      check$1.raise('framebuffer configuration not supported, status = ' +
        statusCode[status]);
    }

    gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
    framebufferState.cur = framebufferState.next;

    // FIXME: Clear error code here.  This is a work around for a bug in
    // headless-gl
    gl.getError();
  }

  function createFBO (a0, a1) {
    var framebuffer = new REGLFramebuffer();
    stats.framebufferCount++;

    function reglFramebuffer (a, b) {
      var i;

      check$1(framebufferState.next !== framebuffer,
        'can not update framebuffer which is currently in use');

      var width = 0;
      var height = 0;

      var needsDepth = true;
      var needsStencil = true;

      var colorBuffer = null;
      var colorTexture = true;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      var depthBuffer = null;
      var stencilBuffer = null;
      var depthStencilBuffer = null;
      var depthStencilTexture = false;

      if (typeof a === 'number') {
        width = a | 0;
        height = (b | 0) || width;
      } else if (!a) {
        width = height = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          width = shape[0];
          height = shape[1];
        } else {
          if ('radius' in options) {
            width = height = options.radius;
          }
          if ('width' in options) {
            width = options.width;
          }
          if ('height' in options) {
            height = options.height;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorTexture' in options) {
            colorTexture = !!options.colorTexture;
            colorFormat = 'rgba4';
          }

          if ('colorType' in options) {
            colorType = options.colorType;
            if (!colorTexture) {
              if (colorType === 'half float' || colorType === 'float16') {
                check$1(extensions.ext_color_buffer_half_float,
                  'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');
                colorFormat = 'rgba16f';
              } else if (colorType === 'float' || colorType === 'float32') {
                check$1(extensions.webgl_color_buffer_float,
                  'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');
                colorFormat = 'rgba32f';
              }
            } else {
              check$1(extensions.oes_texture_float ||
                !(colorType === 'float' || colorType === 'float32'),
                'you must enable OES_texture_float in order to use floating point framebuffer objects');
              check$1(extensions.oes_texture_half_float ||
                !(colorType === 'half float' || colorType === 'float16'),
                'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');
            }
            check$1.oneOf(colorType, colorTypes, 'invalid color type');
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            if (colorTextureFormats.indexOf(colorFormat) >= 0) {
              colorTexture = true;
            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
              colorTexture = false;
            } else {
              if (colorTexture) {
                check$1.oneOf(
                  options.colorFormat, colorTextureFormats,
                  'invalid color format for texture');
              } else {
                check$1.oneOf(
                  options.colorFormat, colorRenderbufferFormats,
                  'invalid color format for renderbuffer');
              }
            }
          }
        }

        if ('depthTexture' in options || 'depthStencilTexture' in options) {
          depthStencilTexture = !!(options.depthTexture ||
            options.depthStencilTexture);
          check$1(!depthStencilTexture || extensions.webgl_depth_texture,
            'webgl_depth_texture extension not supported');
        }

        if ('depth' in options) {
          if (typeof options.depth === 'boolean') {
            needsDepth = options.depth;
          } else {
            depthBuffer = options.depth;
            needsStencil = false;
          }
        }

        if ('stencil' in options) {
          if (typeof options.stencil === 'boolean') {
            needsStencil = options.stencil;
          } else {
            stencilBuffer = options.stencil;
            needsDepth = false;
          }
        }

        if ('depthStencil' in options) {
          if (typeof options.depthStencil === 'boolean') {
            needsDepth = needsStencil = options.depthStencil;
          } else {
            depthStencilBuffer = options.depthStencil;
            needsDepth = false;
            needsStencil = false;
          }
        }
      }

      // parse attachments
      var colorAttachments = null;
      var depthAttachment = null;
      var stencilAttachment = null;
      var depthStencilAttachment = null;

      // Set up color attachments
      if (Array.isArray(colorBuffer)) {
        colorAttachments = colorBuffer.map(parseAttachment);
      } else if (colorBuffer) {
        colorAttachments = [parseAttachment(colorBuffer)];
      } else {
        colorAttachments = new Array(colorCount);
        for (i = 0; i < colorCount; ++i) {
          colorAttachments[i] = allocAttachment(
            width,
            height,
            colorTexture,
            colorFormat,
            colorType);
        }
      }

      check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1,
        'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');
      check$1(colorAttachments.length <= limits.maxColorAttachments,
        'too many color attachments, not supported');

      width = width || colorAttachments[0].width;
      height = height || colorAttachments[0].height;

      if (depthBuffer) {
        depthAttachment = parseAttachment(depthBuffer);
      } else if (needsDepth && !needsStencil) {
        depthAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth',
          'uint32');
      }

      if (stencilBuffer) {
        stencilAttachment = parseAttachment(stencilBuffer);
      } else if (needsStencil && !needsDepth) {
        stencilAttachment = allocAttachment(
          width,
          height,
          false,
          'stencil',
          'uint8');
      }

      if (depthStencilBuffer) {
        depthStencilAttachment = parseAttachment(depthStencilBuffer);
      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
        depthStencilAttachment = allocAttachment(
          width,
          height,
          depthStencilTexture,
          'depth stencil',
          'depth stencil');
      }

      check$1(
        (!!depthBuffer) + (!!stencilBuffer) + (!!depthStencilBuffer) <= 1,
        'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');

      var commonColorAttachmentSize = null;

      for (i = 0; i < colorAttachments.length; ++i) {
        incRefAndCheckShape(colorAttachments[i], width, height);
        check$1(!colorAttachments[i] ||
          (colorAttachments[i].texture &&
            colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0) ||
          (colorAttachments[i].renderbuffer &&
            colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0),
          'framebuffer color attachment ' + i + ' is invalid');

        if (colorAttachments[i] && colorAttachments[i].texture) {
          var colorAttachmentSize =
              textureFormatChannels[colorAttachments[i].texture._texture.format] *
              textureTypeSizes[colorAttachments[i].texture._texture.type];

          if (commonColorAttachmentSize === null) {
            commonColorAttachmentSize = colorAttachmentSize;
          } else {
            // We need to make sure that all color attachments have the same number of bitplanes
            // (that is, the same numer of bits per pixel)
            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.
            check$1(commonColorAttachmentSize === colorAttachmentSize,
                  'all color attachments much have the same number of bits per pixel.');
          }
        }
      }
      incRefAndCheckShape(depthAttachment, width, height);
      check$1(!depthAttachment ||
        (depthAttachment.texture &&
          depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1) ||
        (depthAttachment.renderbuffer &&
          depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1),
        'invalid depth attachment for framebuffer object');
      incRefAndCheckShape(stencilAttachment, width, height);
      check$1(!stencilAttachment ||
        (stencilAttachment.renderbuffer &&
          stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1),
        'invalid stencil attachment for framebuffer object');
      incRefAndCheckShape(depthStencilAttachment, width, height);
      check$1(!depthStencilAttachment ||
        (depthStencilAttachment.texture &&
          depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2) ||
        (depthStencilAttachment.renderbuffer &&
          depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2),
        'invalid depth-stencil attachment for framebuffer object');

      // decrement references
      decFBORefs(framebuffer);

      framebuffer.width = width;
      framebuffer.height = height;

      framebuffer.colorAttachments = colorAttachments;
      framebuffer.depthAttachment = depthAttachment;
      framebuffer.stencilAttachment = stencilAttachment;
      framebuffer.depthStencilAttachment = depthStencilAttachment;

      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
      reglFramebuffer.depth = unwrapAttachment(depthAttachment);
      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);

      reglFramebuffer.width = framebuffer.width;
      reglFramebuffer.height = framebuffer.height;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    function resize (w_, h_) {
      check$1(framebufferState.next !== framebuffer,
        'can not resize a framebuffer which is currently in use');

      var w = Math.max(w_ | 0, 1);
      var h = Math.max((h_ | 0) || w, 1);
      if (w === framebuffer.width && h === framebuffer.height) {
        return reglFramebuffer
      }

      // resize all buffers
      var colorAttachments = framebuffer.colorAttachments;
      for (var i = 0; i < colorAttachments.length; ++i) {
        resizeAttachment(colorAttachments[i], w, h);
      }
      resizeAttachment(framebuffer.depthAttachment, w, h);
      resizeAttachment(framebuffer.stencilAttachment, w, h);
      resizeAttachment(framebuffer.depthStencilAttachment, w, h);

      framebuffer.width = reglFramebuffer.width = w;
      framebuffer.height = reglFramebuffer.height = h;

      updateFramebuffer(framebuffer);

      return reglFramebuffer
    }

    reglFramebuffer(a0, a1);

    return extend(reglFramebuffer, {
      resize: resize,
      _reglType: 'framebuffer',
      _framebuffer: framebuffer,
      destroy: function () {
        destroy(framebuffer);
        decFBORefs(framebuffer);
      },
      use: function (block) {
        framebufferState.setFBO({
          framebuffer: reglFramebuffer
        }, block);
      }
    })
  }

  function createCubeFBO (options) {
    var faces = Array(6);

    function reglFramebufferCube (a) {
      var i;

      check$1(faces.indexOf(framebufferState.next) < 0,
        'can not update framebuffer which is currently in use');

      var params = {
        color: null
      };

      var radius = 0;

      var colorBuffer = null;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      if (typeof a === 'number') {
        radius = a | 0;
      } else if (!a) {
        radius = 1;
      } else {
        check$1.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check$1(
            Array.isArray(shape) && shape.length >= 2,
            'invalid shape for framebuffer');
          check$1(
            shape[0] === shape[1],
            'cube framebuffer must be square');
          radius = shape[0];
        } else {
          if ('radius' in options) {
            radius = options.radius | 0;
          }
          if ('width' in options) {
            radius = options.width | 0;
            if ('height' in options) {
              check$1(options.height === radius, 'must be square');
            }
          } else if ('height' in options) {
            radius = options.height | 0;
          }
        }

        if ('color' in options ||
            'colors' in options) {
          colorBuffer =
            options.color ||
            options.colors;
          if (Array.isArray(colorBuffer)) {
            check$1(
              colorBuffer.length === 1 || extensions.webgl_draw_buffers,
              'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check$1(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorType' in options) {
            check$1.oneOf(
              options.colorType, colorTypes,
              'invalid color type');
            colorType = options.colorType;
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            check$1.oneOf(
              options.colorFormat, colorTextureFormats,
              'invalid color format for texture');
          }
        }

        if ('depth' in options) {
          params.depth = options.depth;
        }

        if ('stencil' in options) {
          params.stencil = options.stencil;
        }

        if ('depthStencil' in options) {
          params.depthStencil = options.depthStencil;
        }
      }

      var colorCubes;
      if (colorBuffer) {
        if (Array.isArray(colorBuffer)) {
          colorCubes = [];
          for (i = 0; i < colorBuffer.length; ++i) {
            colorCubes[i] = colorBuffer[i];
          }
        } else {
          colorCubes = [ colorBuffer ];
        }
      } else {
        colorCubes = Array(colorCount);
        var cubeMapParams = {
          radius: radius,
          format: colorFormat,
          type: colorType
        };
        for (i = 0; i < colorCount; ++i) {
          colorCubes[i] = textureState.createCube(cubeMapParams);
        }
      }

      // Check color cubes
      params.color = Array(colorCubes.length);
      for (i = 0; i < colorCubes.length; ++i) {
        var cube = colorCubes[i];
        check$1(
          typeof cube === 'function' && cube._reglType === 'textureCube',
          'invalid cube map');
        radius = radius || cube.width;
        check$1(
          cube.width === radius && cube.height === radius,
          'invalid cube map shape');
        params.color[i] = {
          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
          data: colorCubes[i]
        };
      }

      for (i = 0; i < 6; ++i) {
        for (var j = 0; j < colorCubes.length; ++j) {
          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
        }
        // reuse depth-stencil attachments across all cube maps
        if (i > 0) {
          params.depth = faces[0].depth;
          params.stencil = faces[0].stencil;
          params.depthStencil = faces[0].depthStencil;
        }
        if (faces[i]) {
          (faces[i])(params);
        } else {
          faces[i] = createFBO(params);
        }
      }

      return extend(reglFramebufferCube, {
        width: radius,
        height: radius,
        color: colorCubes
      })
    }

    function resize (radius_) {
      var i;
      var radius = radius_ | 0;
      check$1(radius > 0 && radius <= limits.maxCubeMapSize,
        'invalid radius for cube fbo');

      if (radius === reglFramebufferCube.width) {
        return reglFramebufferCube
      }

      var colors = reglFramebufferCube.color;
      for (i = 0; i < colors.length; ++i) {
        colors[i].resize(radius);
      }

      for (i = 0; i < 6; ++i) {
        faces[i].resize(radius);
      }

      reglFramebufferCube.width = reglFramebufferCube.height = radius;

      return reglFramebufferCube
    }

    reglFramebufferCube(options);

    return extend(reglFramebufferCube, {
      faces: faces,
      resize: resize,
      _reglType: 'framebufferCube',
      destroy: function () {
        faces.forEach(function (f) {
          f.destroy();
        });
      }
    })
  }

  function restoreFramebuffers () {
    framebufferState.cur = null;
    framebufferState.next = null;
    framebufferState.dirty = true;
    values(framebufferSet).forEach(function (fb) {
      fb.framebuffer = gl.createFramebuffer();
      updateFramebuffer(fb);
    });
  }

  return extend(framebufferState, {
    getFramebuffer: function (object) {
      if (typeof object === 'function' && object._reglType === 'framebuffer') {
        var fbo = object._framebuffer;
        if (fbo instanceof REGLFramebuffer) {
          return fbo
        }
      }
      return null
    },
    create: createFBO,
    createCube: createCubeFBO,
    clear: function () {
      values(framebufferSet).forEach(destroy);
    },
    restore: restoreFramebuffers
  })
}

var GL_FLOAT$6 = 5126;

function AttributeRecord () {
  this.state = 0;

  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.w = 0.0;

  this.buffer = null;
  this.size = 0;
  this.normalized = false;
  this.type = GL_FLOAT$6;
  this.offset = 0;
  this.stride = 0;
  this.divisor = 0;
}

function wrapAttributeState (
  gl,
  extensions,
  limits,
  stringStore) {
  var NUM_ATTRIBUTES = limits.maxAttributes;
  var attributeBindings = new Array(NUM_ATTRIBUTES);
  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
    attributeBindings[i] = new AttributeRecord();
  }

  return {
    Record: AttributeRecord,
    scope: {},
    state: attributeBindings
  }
}

var GL_FRAGMENT_SHADER = 35632;
var GL_VERTEX_SHADER = 35633;

var GL_ACTIVE_UNIFORMS = 0x8B86;
var GL_ACTIVE_ATTRIBUTES = 0x8B89;

function wrapShaderState (gl, stringStore, stats, config) {
  // ===================================================
  // glsl compilation and linking
  // ===================================================
  var fragShaders = {};
  var vertShaders = {};

  function ActiveInfo (name, id, location, info) {
    this.name = name;
    this.id = id;
    this.location = location;
    this.info = info;
  }

  function insertActiveInfo (list, info) {
    for (var i = 0; i < list.length; ++i) {
      if (list[i].id === info.id) {
        list[i].location = info.location;
        return
      }
    }
    list.push(info);
  }

  function getShader (type, id, command) {
    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
    var shader = cache[id];

    if (!shader) {
      var source = stringStore.str(id);
      shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      check$1.shaderError(gl, shader, source, type, command);
      cache[id] = shader;
    }

    return shader
  }

  // ===================================================
  // program linking
  // ===================================================
  var programCache = {};
  var programList = [];

  var PROGRAM_COUNTER = 0;

  function REGLProgram (fragId, vertId) {
    this.id = PROGRAM_COUNTER++;
    this.fragId = fragId;
    this.vertId = vertId;
    this.program = null;
    this.uniforms = [];
    this.attributes = [];

    if (config.profile) {
      this.stats = {
        uniformsCount: 0,
        attributesCount: 0
      };
    }
  }

  function linkProgram (desc, command) {
    var i, info;

    // -------------------------------
    // compile & link
    // -------------------------------
    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);

    var program = desc.program = gl.createProgram();
    gl.attachShader(program, fragShader);
    gl.attachShader(program, vertShader);
    gl.linkProgram(program);
    check$1.linkError(
      gl,
      program,
      stringStore.str(desc.fragId),
      stringStore.str(desc.vertId),
      command);

    // -------------------------------
    // grab uniforms
    // -------------------------------
    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
    if (config.profile) {
      desc.stats.uniformsCount = numUniforms;
    }
    var uniforms = desc.uniforms;
    for (i = 0; i < numUniforms; ++i) {
      info = gl.getActiveUniform(program, i);
      if (info) {
        if (info.size > 1) {
          for (var j = 0; j < info.size; ++j) {
            var name = info.name.replace('[0]', '[' + j + ']');
            insertActiveInfo(uniforms, new ActiveInfo(
              name,
              stringStore.id(name),
              gl.getUniformLocation(program, name),
              info));
          }
        } else {
          insertActiveInfo(uniforms, new ActiveInfo(
            info.name,
            stringStore.id(info.name),
            gl.getUniformLocation(program, info.name),
            info));
        }
      }
    }

    // -------------------------------
    // grab attributes
    // -------------------------------
    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
    if (config.profile) {
      desc.stats.attributesCount = numAttributes;
    }

    var attributes = desc.attributes;
    for (i = 0; i < numAttributes; ++i) {
      info = gl.getActiveAttrib(program, i);
      if (info) {
        insertActiveInfo(attributes, new ActiveInfo(
          info.name,
          stringStore.id(info.name),
          gl.getAttribLocation(program, info.name),
          info));
      }
    }
  }

  if (config.profile) {
    stats.getMaxUniformsCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.uniformsCount > m) {
          m = desc.stats.uniformsCount;
        }
      });
      return m
    };

    stats.getMaxAttributesCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.attributesCount > m) {
          m = desc.stats.attributesCount;
        }
      });
      return m
    };
  }

  function restoreShaders () {
    fragShaders = {};
    vertShaders = {};
    for (var i = 0; i < programList.length; ++i) {
      linkProgram(programList[i]);
    }
  }

  return {
    clear: function () {
      var deleteShader = gl.deleteShader.bind(gl);
      values(fragShaders).forEach(deleteShader);
      fragShaders = {};
      values(vertShaders).forEach(deleteShader);
      vertShaders = {};

      programList.forEach(function (desc) {
        gl.deleteProgram(desc.program);
      });
      programList.length = 0;
      programCache = {};

      stats.shaderCount = 0;
    },

    program: function (vertId, fragId, command) {
      check$1.command(vertId >= 0, 'missing vertex shader', command);
      check$1.command(fragId >= 0, 'missing fragment shader', command);

      var cache = programCache[fragId];
      if (!cache) {
        cache = programCache[fragId] = {};
      }
      var program = cache[vertId];
      if (!program) {
        program = new REGLProgram(fragId, vertId);
        stats.shaderCount++;

        linkProgram(program, command);
        cache[vertId] = program;
        programList.push(program);
      }
      return program
    },

    restore: restoreShaders,

    shader: getShader,

    frag: -1,
    vert: -1
  }
}

var GL_RGBA$3 = 6408;
var GL_UNSIGNED_BYTE$7 = 5121;
var GL_PACK_ALIGNMENT = 0x0D05;
var GL_FLOAT$7 = 0x1406; // 5126

function wrapReadPixels (
  gl,
  framebufferState,
  reglPoll,
  context,
  glAttributes,
  extensions,
  limits) {
  function readPixelsImpl (input) {
    var type;
    if (framebufferState.next === null) {
      check$1(
        glAttributes.preserveDrawingBuffer,
        'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
      type = GL_UNSIGNED_BYTE$7;
    } else {
      check$1(
        framebufferState.next.colorAttachments[0].texture !== null,
          'You cannot read from a renderbuffer');
      type = framebufferState.next.colorAttachments[0].texture._texture.type;

      if (extensions.oes_texture_float) {
        check$1(
          type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7,
          'Reading from a framebuffer is only allowed for the types \'uint8\' and \'float\'');

        if (type === GL_FLOAT$7) {
          check$1(limits.readFloat, 'Reading \'float\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');
        }
      } else {
        check$1(
          type === GL_UNSIGNED_BYTE$7,
          'Reading from a framebuffer is only allowed for the type \'uint8\'');
      }
    }

    var x = 0;
    var y = 0;
    var width = context.framebufferWidth;
    var height = context.framebufferHeight;
    var data = null;

    if (isTypedArray(input)) {
      data = input;
    } else if (input) {
      check$1.type(input, 'object', 'invalid arguments to regl.read()');
      x = input.x | 0;
      y = input.y | 0;
      check$1(
        x >= 0 && x < context.framebufferWidth,
        'invalid x offset for regl.read');
      check$1(
        y >= 0 && y < context.framebufferHeight,
        'invalid y offset for regl.read');
      width = (input.width || (context.framebufferWidth - x)) | 0;
      height = (input.height || (context.framebufferHeight - y)) | 0;
      data = input.data || null;
    }

    // sanity check input.data
    if (data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        check$1(
          data instanceof Uint8Array,
          'buffer must be \'Uint8Array\' when reading from a framebuffer of type \'uint8\'');
      } else if (type === GL_FLOAT$7) {
        check$1(
          data instanceof Float32Array,
          'buffer must be \'Float32Array\' when reading from a framebuffer of type \'float\'');
      }
    }

    check$1(
      width > 0 && width + x <= context.framebufferWidth,
      'invalid width for read pixels');
    check$1(
      height > 0 && height + y <= context.framebufferHeight,
      'invalid height for read pixels');

    // Update WebGL state
    reglPoll();

    // Compute size
    var size = width * height * 4;

    // Allocate data
    if (!data) {
      if (type === GL_UNSIGNED_BYTE$7) {
        data = new Uint8Array(size);
      } else if (type === GL_FLOAT$7) {
        data = data || new Float32Array(size);
      }
    }

    // Type check
    check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');
    check$1(data.byteLength >= size, 'data buffer for regl.read() too small');

    // Run read pixels
    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
    gl.readPixels(x, y, width, height, GL_RGBA$3,
                  type,
                  data);

    return data
  }

  function readPixelsFBO (options) {
    var result;
    framebufferState.setFBO({
      framebuffer: options.framebuffer
    }, function () {
      result = readPixelsImpl(options);
    });
    return result
  }

  function readPixels (options) {
    if (!options || !('framebuffer' in options)) {
      return readPixelsImpl(options)
    } else {
      return readPixelsFBO(options)
    }
  }

  return readPixels
}

function slice (x) {
  return Array.prototype.slice.call(x)
}

function join (x) {
  return slice(x).join('')
}

function createEnvironment () {
  // Unique variable id counter
  var varCounter = 0;

  // Linked values are passed from this scope into the generated code block
  // Calling link() passes a value into the generated scope and returns
  // the variable name which it is bound to
  var linkedNames = [];
  var linkedValues = [];
  function link (value) {
    for (var i = 0; i < linkedValues.length; ++i) {
      if (linkedValues[i] === value) {
        return linkedNames[i]
      }
    }

    var name = 'g' + (varCounter++);
    linkedNames.push(name);
    linkedValues.push(value);
    return name
  }

  // create a code block
  function block () {
    var code = [];
    function push () {
      code.push.apply(code, slice(arguments));
    }

    var vars = [];
    function def () {
      var name = 'v' + (varCounter++);
      vars.push(name);

      if (arguments.length > 0) {
        code.push(name, '=');
        code.push.apply(code, slice(arguments));
        code.push(';');
      }

      return name
    }

    return extend(push, {
      def: def,
      toString: function () {
        return join([
          (vars.length > 0 ? 'var ' + vars + ';' : ''),
          join(code)
        ])
      }
    })
  }

  function scope () {
    var entry = block();
    var exit = block();

    var entryToString = entry.toString;
    var exitToString = exit.toString;

    function save (object, prop) {
      exit(object, prop, '=', entry.def(object, prop), ';');
    }

    return extend(function () {
      entry.apply(entry, slice(arguments));
    }, {
      def: entry.def,
      entry: entry,
      exit: exit,
      save: save,
      set: function (object, prop, value) {
        save(object, prop);
        entry(object, prop, '=', value, ';');
      },
      toString: function () {
        return entryToString() + exitToString()
      }
    })
  }

  function conditional () {
    var pred = join(arguments);
    var thenBlock = scope();
    var elseBlock = scope();

    var thenToString = thenBlock.toString;
    var elseToString = elseBlock.toString;

    return extend(thenBlock, {
      then: function () {
        thenBlock.apply(thenBlock, slice(arguments));
        return this
      },
      else: function () {
        elseBlock.apply(elseBlock, slice(arguments));
        return this
      },
      toString: function () {
        var elseClause = elseToString();
        if (elseClause) {
          elseClause = 'else{' + elseClause + '}';
        }
        return join([
          'if(', pred, '){',
          thenToString(),
          '}', elseClause
        ])
      }
    })
  }

  // procedure list
  var globalBlock = block();
  var procedures = {};
  function proc (name, count) {
    var args = [];
    function arg () {
      var name = 'a' + args.length;
      args.push(name);
      return name
    }

    count = count || 0;
    for (var i = 0; i < count; ++i) {
      arg();
    }

    var body = scope();
    var bodyToString = body.toString;

    var result = procedures[name] = extend(body, {
      arg: arg,
      toString: function () {
        return join([
          'function(', args.join(), '){',
          bodyToString(),
          '}'
        ])
      }
    });

    return result
  }

  function compile () {
    var code = ['"use strict";',
      globalBlock,
      'return {'];
    Object.keys(procedures).forEach(function (name) {
      code.push('"', name, '":', procedures[name].toString(), ',');
    });
    code.push('}');
    var src = join(code)
      .replace(/;/g, ';\n')
      .replace(/}/g, '}\n')
      .replace(/{/g, '{\n');
    var proc = Function.apply(null, linkedNames.concat(src));
    return proc.apply(null, linkedValues)
  }

  return {
    global: globalBlock,
    link: link,
    block: block,
    proc: proc,
    scope: scope,
    cond: conditional,
    compile: compile
  }
}

// "cute" names for vector components
var CUTE_COMPONENTS = 'xyzw'.split('');

var GL_UNSIGNED_BYTE$8 = 5121;

var ATTRIB_STATE_POINTER = 1;
var ATTRIB_STATE_CONSTANT = 2;

var DYN_FUNC$1 = 0;
var DYN_PROP$1 = 1;
var DYN_CONTEXT$1 = 2;
var DYN_STATE$1 = 3;
var DYN_THUNK = 4;

var S_DITHER = 'dither';
var S_BLEND_ENABLE = 'blend.enable';
var S_BLEND_COLOR = 'blend.color';
var S_BLEND_EQUATION = 'blend.equation';
var S_BLEND_FUNC = 'blend.func';
var S_DEPTH_ENABLE = 'depth.enable';
var S_DEPTH_FUNC = 'depth.func';
var S_DEPTH_RANGE = 'depth.range';
var S_DEPTH_MASK = 'depth.mask';
var S_COLOR_MASK = 'colorMask';
var S_CULL_ENABLE = 'cull.enable';
var S_CULL_FACE = 'cull.face';
var S_FRONT_FACE = 'frontFace';
var S_LINE_WIDTH = 'lineWidth';
var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';
var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';
var S_SAMPLE_ALPHA = 'sample.alpha';
var S_SAMPLE_ENABLE = 'sample.enable';
var S_SAMPLE_COVERAGE = 'sample.coverage';
var S_STENCIL_ENABLE = 'stencil.enable';
var S_STENCIL_MASK = 'stencil.mask';
var S_STENCIL_FUNC = 'stencil.func';
var S_STENCIL_OPFRONT = 'stencil.opFront';
var S_STENCIL_OPBACK = 'stencil.opBack';
var S_SCISSOR_ENABLE = 'scissor.enable';
var S_SCISSOR_BOX = 'scissor.box';
var S_VIEWPORT = 'viewport';

var S_PROFILE = 'profile';

var S_FRAMEBUFFER = 'framebuffer';
var S_VERT = 'vert';
var S_FRAG = 'frag';
var S_ELEMENTS = 'elements';
var S_PRIMITIVE = 'primitive';
var S_COUNT = 'count';
var S_OFFSET = 'offset';
var S_INSTANCES = 'instances';

var SUFFIX_WIDTH = 'Width';
var SUFFIX_HEIGHT = 'Height';

var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
var S_DRAWINGBUFFER = 'drawingBuffer';
var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;

var NESTED_OPTIONS = [
  S_BLEND_FUNC,
  S_BLEND_EQUATION,
  S_STENCIL_FUNC,
  S_STENCIL_OPFRONT,
  S_STENCIL_OPBACK,
  S_SAMPLE_COVERAGE,
  S_VIEWPORT,
  S_SCISSOR_BOX,
  S_POLYGON_OFFSET_OFFSET
];

var GL_ARRAY_BUFFER$1 = 34962;
var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;

var GL_FRAGMENT_SHADER$1 = 35632;
var GL_VERTEX_SHADER$1 = 35633;

var GL_TEXTURE_2D$3 = 0x0DE1;
var GL_TEXTURE_CUBE_MAP$2 = 0x8513;

var GL_CULL_FACE = 0x0B44;
var GL_BLEND = 0x0BE2;
var GL_DITHER = 0x0BD0;
var GL_STENCIL_TEST = 0x0B90;
var GL_DEPTH_TEST = 0x0B71;
var GL_SCISSOR_TEST = 0x0C11;
var GL_POLYGON_OFFSET_FILL = 0x8037;
var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
var GL_SAMPLE_COVERAGE = 0x80A0;

var GL_FLOAT$8 = 5126;
var GL_FLOAT_VEC2 = 35664;
var GL_FLOAT_VEC3 = 35665;
var GL_FLOAT_VEC4 = 35666;
var GL_INT$3 = 5124;
var GL_INT_VEC2 = 35667;
var GL_INT_VEC3 = 35668;
var GL_INT_VEC4 = 35669;
var GL_BOOL = 35670;
var GL_BOOL_VEC2 = 35671;
var GL_BOOL_VEC3 = 35672;
var GL_BOOL_VEC4 = 35673;
var GL_FLOAT_MAT2 = 35674;
var GL_FLOAT_MAT3 = 35675;
var GL_FLOAT_MAT4 = 35676;
var GL_SAMPLER_2D = 35678;
var GL_SAMPLER_CUBE = 35680;

var GL_TRIANGLES$1 = 4;

var GL_FRONT = 1028;
var GL_BACK = 1029;
var GL_CW = 0x0900;
var GL_CCW = 0x0901;
var GL_MIN_EXT = 0x8007;
var GL_MAX_EXT = 0x8008;
var GL_ALWAYS = 519;
var GL_KEEP = 7680;
var GL_ZERO = 0;
var GL_ONE = 1;
var GL_FUNC_ADD = 0x8006;
var GL_LESS = 513;

var GL_FRAMEBUFFER$2 = 0x8D40;
var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;

var blendFuncs = {
  '0': 0,
  '1': 1,
  'zero': 0,
  'one': 1,
  'src color': 768,
  'one minus src color': 769,
  'src alpha': 770,
  'one minus src alpha': 771,
  'dst color': 774,
  'one minus dst color': 775,
  'dst alpha': 772,
  'one minus dst alpha': 773,
  'constant color': 32769,
  'one minus constant color': 32770,
  'constant alpha': 32771,
  'one minus constant alpha': 32772,
  'src alpha saturate': 776
};

// There are invalid values for srcRGB and dstRGB. See:
// https://www.khronos.org/registry/webgl/specs/1.0/#6.13
// https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56
var invalidBlendCombinations = [
  'constant color, constant alpha',
  'one minus constant color, constant alpha',
  'constant color, one minus constant alpha',
  'one minus constant color, one minus constant alpha',
  'constant alpha, constant color',
  'constant alpha, one minus constant color',
  'one minus constant alpha, constant color',
  'one minus constant alpha, one minus constant color'
];

var compareFuncs = {
  'never': 512,
  'less': 513,
  '<': 513,
  'equal': 514,
  '=': 514,
  '==': 514,
  '===': 514,
  'lequal': 515,
  '<=': 515,
  'greater': 516,
  '>': 516,
  'notequal': 517,
  '!=': 517,
  '!==': 517,
  'gequal': 518,
  '>=': 518,
  'always': 519
};

var stencilOps = {
  '0': 0,
  'zero': 0,
  'keep': 7680,
  'replace': 7681,
  'increment': 7682,
  'decrement': 7683,
  'increment wrap': 34055,
  'decrement wrap': 34056,
  'invert': 5386
};

var shaderType = {
  'frag': GL_FRAGMENT_SHADER$1,
  'vert': GL_VERTEX_SHADER$1
};

var orientationType = {
  'cw': GL_CW,
  'ccw': GL_CCW
};

function isBufferArgs (x) {
  return Array.isArray(x) ||
    isTypedArray(x) ||
    isNDArrayLike(x)
}

// Make sure viewport is processed first
function sortState (state) {
  return state.sort(function (a, b) {
    if (a === S_VIEWPORT) {
      return -1
    } else if (b === S_VIEWPORT) {
      return 1
    }
    return (a < b) ? -1 : 1
  })
}

function Declaration (thisDep, contextDep, propDep, append) {
  this.thisDep = thisDep;
  this.contextDep = contextDep;
  this.propDep = propDep;
  this.append = append;
}

function isStatic (decl) {
  return decl && !(decl.thisDep || decl.contextDep || decl.propDep)
}

function createStaticDecl (append) {
  return new Declaration(false, false, false, append)
}

function createDynamicDecl (dyn, append) {
  var type = dyn.type;
  if (type === DYN_FUNC$1) {
    var numArgs = dyn.data.length;
    return new Declaration(
      true,
      numArgs >= 1,
      numArgs >= 2,
      append)
  } else if (type === DYN_THUNK) {
    var data = dyn.data;
    return new Declaration(
      data.thisDep,
      data.contextDep,
      data.propDep,
      append)
  } else {
    return new Declaration(
      type === DYN_STATE$1,
      type === DYN_CONTEXT$1,
      type === DYN_PROP$1,
      append)
  }
}

var SCOPE_DECL = new Declaration(false, false, false, function () {});

function reglCore (
  gl,
  stringStore,
  extensions,
  limits,
  bufferState,
  elementState,
  textureState,
  framebufferState,
  uniformState,
  attributeState,
  shaderState,
  drawState,
  contextState,
  timer,
  config) {
  var AttributeRecord = attributeState.Record;

  var blendEquations = {
    'add': 32774,
    'subtract': 32778,
    'reverse subtract': 32779
  };
  if (extensions.ext_blend_minmax) {
    blendEquations.min = GL_MIN_EXT;
    blendEquations.max = GL_MAX_EXT;
  }

  var extInstancing = extensions.angle_instanced_arrays;
  var extDrawBuffers = extensions.webgl_draw_buffers;

  // ===================================================
  // ===================================================
  // WEBGL STATE
  // ===================================================
  // ===================================================
  var currentState = {
    dirty: true,
    profile: config.profile
  };
  var nextState = {};
  var GL_STATE_NAMES = [];
  var GL_FLAGS = {};
  var GL_VARIABLES = {};

  function propName (name) {
    return name.replace('.', '_')
  }

  function stateFlag (sname, cap, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    nextState[name] = currentState[name] = !!init;
    GL_FLAGS[name] = cap;
  }

  function stateVariable (sname, func, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    if (Array.isArray(init)) {
      currentState[name] = init.slice();
      nextState[name] = init.slice();
    } else {
      currentState[name] = nextState[name] = init;
    }
    GL_VARIABLES[name] = func;
  }

  // Dithering
  stateFlag(S_DITHER, GL_DITHER);

  // Blending
  stateFlag(S_BLEND_ENABLE, GL_BLEND);
  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);
  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate',
    [GL_FUNC_ADD, GL_FUNC_ADD]);
  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate',
    [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);

  // Depth
  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);
  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);
  stateVariable(S_DEPTH_MASK, 'depthMask', true);

  // Color mask
  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);

  // Face culling
  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);

  // Front face orientation
  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);

  // Line width
  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);

  // Polygon offset
  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);

  // Sample coverage
  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);

  // Stencil
  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);
  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);
  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate',
    [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate',
    [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);

  // Scissor
  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
  stateVariable(S_SCISSOR_BOX, 'scissor',
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // Viewport
  stateVariable(S_VIEWPORT, S_VIEWPORT,
    [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // ===================================================
  // ===================================================
  // ENVIRONMENT
  // ===================================================
  // ===================================================
  var sharedState = {
    gl: gl,
    context: contextState,
    strings: stringStore,
    next: nextState,
    current: currentState,
    draw: drawState,
    elements: elementState,
    buffer: bufferState,
    shader: shaderState,
    attributes: attributeState.state,
    uniforms: uniformState,
    framebuffer: framebufferState,
    extensions: extensions,

    timer: timer,
    isBufferArgs: isBufferArgs
  };

  var sharedConstants = {
    primTypes: primTypes,
    compareFuncs: compareFuncs,
    blendFuncs: blendFuncs,
    blendEquations: blendEquations,
    stencilOps: stencilOps,
    glTypes: glTypes,
    orientationType: orientationType
  };

  check$1.optional(function () {
    sharedState.isArrayLike = isArrayLike;
  });

  if (extDrawBuffers) {
    sharedConstants.backBuffer = [GL_BACK];
    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {
      if (i === 0) {
        return [0]
      }
      return loop(i, function (j) {
        return GL_COLOR_ATTACHMENT0$2 + j
      })
    });
  }

  var drawCallCounter = 0;
  function createREGLEnvironment () {
    var env = createEnvironment();
    var link = env.link;
    var global = env.global;
    env.id = drawCallCounter++;

    env.batchId = '0';

    // link shared state
    var SHARED = link(sharedState);
    var shared = env.shared = {
      props: 'a0'
    };
    Object.keys(sharedState).forEach(function (prop) {
      shared[prop] = global.def(SHARED, '.', prop);
    });

    // Inject runtime assertion stuff for debug builds
    check$1.optional(function () {
      env.CHECK = link(check$1);
      env.commandStr = check$1.guessCommand();
      env.command = link(env.commandStr);
      env.assert = function (block, pred, message) {
        block(
          'if(!(', pred, '))',
          this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');
      };

      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
    });

    // Copy GL state variables over
    var nextVars = env.next = {};
    var currentVars = env.current = {};
    Object.keys(GL_VARIABLES).forEach(function (variable) {
      if (Array.isArray(currentState[variable])) {
        nextVars[variable] = global.def(shared.next, '.', variable);
        currentVars[variable] = global.def(shared.current, '.', variable);
      }
    });

    // Initialize shared constants
    var constants = env.constants = {};
    Object.keys(sharedConstants).forEach(function (name) {
      constants[name] = global.def(JSON.stringify(sharedConstants[name]));
    });

    // Helper function for calling a block
    env.invoke = function (block, x) {
      switch (x.type) {
        case DYN_FUNC$1:
          var argList = [
            'this',
            shared.context,
            shared.props,
            env.batchId
          ];
          return block.def(
            link(x.data), '.call(',
              argList.slice(0, Math.max(x.data.length + 1, 4)),
             ')')
        case DYN_PROP$1:
          return block.def(shared.props, x.data)
        case DYN_CONTEXT$1:
          return block.def(shared.context, x.data)
        case DYN_STATE$1:
          return block.def('this', x.data)
        case DYN_THUNK:
          x.data.append(env, block);
          return x.data.ref
      }
    };

    env.attribCache = {};

    var scopeAttribs = {};
    env.scopeAttrib = function (name) {
      var id = stringStore.id(name);
      if (id in scopeAttribs) {
        return scopeAttribs[id]
      }
      var binding = attributeState.scope[id];
      if (!binding) {
        binding = attributeState.scope[id] = new AttributeRecord();
      }
      var result = scopeAttribs[id] = link(binding);
      return result
    };

    return env
  }

  // ===================================================
  // ===================================================
  // PARSING
  // ===================================================
  // ===================================================
  function parseProfile (options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var profileEnable;
    if (S_PROFILE in staticOptions) {
      var value = !!staticOptions[S_PROFILE];
      profileEnable = createStaticDecl(function (env, scope) {
        return value
      });
      profileEnable.enable = value;
    } else if (S_PROFILE in dynamicOptions) {
      var dyn = dynamicOptions[S_PROFILE];
      profileEnable = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    }

    return profileEnable
  }

  function parseFramebuffer (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    if (S_FRAMEBUFFER in staticOptions) {
      var framebuffer = staticOptions[S_FRAMEBUFFER];
      if (framebuffer) {
        framebuffer = framebufferState.getFramebuffer(framebuffer);
        check$1.command(framebuffer, 'invalid framebuffer object');
        return createStaticDecl(function (env, block) {
          var FRAMEBUFFER = env.link(framebuffer);
          var shared = env.shared;
          block.set(
            shared.framebuffer,
            '.next',
            FRAMEBUFFER);
          var CONTEXT = shared.context;
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            FRAMEBUFFER + '.width');
          block.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            FRAMEBUFFER + '.height');
          return FRAMEBUFFER
        })
      } else {
        return createStaticDecl(function (env, scope) {
          var shared = env.shared;
          scope.set(
            shared.framebuffer,
            '.next',
            'null');
          var CONTEXT = shared.context;
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_WIDTH,
            CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
          scope.set(
            CONTEXT,
            '.' + S_FRAMEBUFFER_HEIGHT,
            CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
          return 'null'
        })
      }
    } else if (S_FRAMEBUFFER in dynamicOptions) {
      var dyn = dynamicOptions[S_FRAMEBUFFER];
      return createDynamicDecl(dyn, function (env, scope) {
        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);
        var shared = env.shared;
        var FRAMEBUFFER_STATE = shared.framebuffer;
        var FRAMEBUFFER = scope.def(
          FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');

        check$1.optional(function () {
          env.assert(scope,
            '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER,
            'invalid framebuffer object');
        });

        scope.set(
          FRAMEBUFFER_STATE,
          '.next',
          FRAMEBUFFER);
        var CONTEXT = shared.context;
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_WIDTH,
          FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
        scope.set(
          CONTEXT,
          '.' + S_FRAMEBUFFER_HEIGHT,
          FRAMEBUFFER +
          '?' + FRAMEBUFFER + '.height:' +
          CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
        return FRAMEBUFFER
      })
    } else {
      return null
    }
  }

  function parseViewportScissor (options, framebuffer, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseBox (param) {
      if (param in staticOptions) {
        var box = staticOptions[param];
        check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);

        var isStatic = true;
        var x = box.x | 0;
        var y = box.y | 0;
        var w, h;
        if ('width' in box) {
          w = box.width | 0;
          check$1.command(w >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }
        if ('height' in box) {
          h = box.height | 0;
          check$1.command(h >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }

        return new Declaration(
          !isStatic && framebuffer && framebuffer.thisDep,
          !isStatic && framebuffer && framebuffer.contextDep,
          !isStatic && framebuffer && framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            var BOX_W = w;
            if (!('width' in box)) {
              BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);
            }
            var BOX_H = h;
            if (!('height' in box)) {
              BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);
            }
            return [x, y, BOX_W, BOX_H]
          })
      } else if (param in dynamicOptions) {
        var dynBox = dynamicOptions[param];
        var result = createDynamicDecl(dynBox, function (env, scope) {
          var BOX = env.invoke(scope, dynBox);

          check$1.optional(function () {
            env.assert(scope,
              BOX + '&&typeof ' + BOX + '==="object"',
              'invalid ' + param);
          });

          var CONTEXT = env.shared.context;
          var BOX_X = scope.def(BOX, '.x|0');
          var BOX_Y = scope.def(BOX, '.y|0');
          var BOX_W = scope.def(
            '"width" in ', BOX, '?', BOX, '.width|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');
          var BOX_H = scope.def(
            '"height" in ', BOX, '?', BOX, '.height|0:',
            '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');

          check$1.optional(function () {
            env.assert(scope,
              BOX_W + '>=0&&' +
              BOX_H + '>=0',
              'invalid ' + param);
          });

          return [BOX_X, BOX_Y, BOX_W, BOX_H]
        });
        if (framebuffer) {
          result.thisDep = result.thisDep || framebuffer.thisDep;
          result.contextDep = result.contextDep || framebuffer.contextDep;
          result.propDep = result.propDep || framebuffer.propDep;
        }
        return result
      } else if (framebuffer) {
        return new Declaration(
          framebuffer.thisDep,
          framebuffer.contextDep,
          framebuffer.propDep,
          function (env, scope) {
            var CONTEXT = env.shared.context;
            return [
              0, 0,
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH),
              scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)]
          })
      } else {
        return null
      }
    }

    var viewport = parseBox(S_VIEWPORT);

    if (viewport) {
      var prevViewport = viewport;
      viewport = new Declaration(
        viewport.thisDep,
        viewport.contextDep,
        viewport.propDep,
        function (env, scope) {
          var VIEWPORT = prevViewport.append(env, scope);
          var CONTEXT = env.shared.context;
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_WIDTH,
            VIEWPORT[2]);
          scope.set(
            CONTEXT,
            '.' + S_VIEWPORT_HEIGHT,
            VIEWPORT[3]);
          return VIEWPORT
        });
    }

    return {
      viewport: viewport,
      scissor_box: parseBox(S_SCISSOR_BOX)
    }
  }

  function parseProgram (options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseShader (name) {
      if (name in staticOptions) {
        var id = stringStore.id(staticOptions[name]);
        check$1.optional(function () {
          shaderState.shader(shaderType[name], id, check$1.guessCommand());
        });
        var result = createStaticDecl(function () {
          return id
        });
        result.id = id;
        return result
      } else if (name in dynamicOptions) {
        var dyn = dynamicOptions[name];
        return createDynamicDecl(dyn, function (env, scope) {
          var str = env.invoke(scope, dyn);
          var id = scope.def(env.shared.strings, '.id(', str, ')');
          check$1.optional(function () {
            scope(
              env.shared.shader, '.shader(',
              shaderType[name], ',',
              id, ',',
              env.command, ');');
          });
          return id
        })
      }
      return null
    }

    var frag = parseShader(S_FRAG);
    var vert = parseShader(S_VERT);

    var program = null;
    var progVar;
    if (isStatic(frag) && isStatic(vert)) {
      program = shaderState.program(vert.id, frag.id);
      progVar = createStaticDecl(function (env, scope) {
        return env.link(program)
      });
    } else {
      progVar = new Declaration(
        (frag && frag.thisDep) || (vert && vert.thisDep),
        (frag && frag.contextDep) || (vert && vert.contextDep),
        (frag && frag.propDep) || (vert && vert.propDep),
        function (env, scope) {
          var SHADER_STATE = env.shared.shader;
          var fragId;
          if (frag) {
            fragId = frag.append(env, scope);
          } else {
            fragId = scope.def(SHADER_STATE, '.', S_FRAG);
          }
          var vertId;
          if (vert) {
            vertId = vert.append(env, scope);
          } else {
            vertId = scope.def(SHADER_STATE, '.', S_VERT);
          }
          var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;
          check$1.optional(function () {
            progDef += ',' + env.command;
          });
          return scope.def(progDef + ')')
        });
    }

    return {
      frag: frag,
      vert: vert,
      progVar: progVar,
      program: program
    }
  }

  function parseDraw (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseElements () {
      if (S_ELEMENTS in staticOptions) {
        var elements = staticOptions[S_ELEMENTS];
        if (isBufferArgs(elements)) {
          elements = elementState.getElements(elementState.create(elements, true));
        } else if (elements) {
          elements = elementState.getElements(elements);
          check$1.command(elements, 'invalid elements', env.commandStr);
        }
        var result = createStaticDecl(function (env, scope) {
          if (elements) {
            var result = env.link(elements);
            env.ELEMENTS = result;
            return result
          }
          env.ELEMENTS = null;
          return null
        });
        result.value = elements;
        return result
      } else if (S_ELEMENTS in dynamicOptions) {
        var dyn = dynamicOptions[S_ELEMENTS];
        return createDynamicDecl(dyn, function (env, scope) {
          var shared = env.shared;

          var IS_BUFFER_ARGS = shared.isBufferArgs;
          var ELEMENT_STATE = shared.elements;

          var elementDefn = env.invoke(scope, dyn);
          var elements = scope.def('null');
          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');

          var ifte = env.cond(elementStream)
            .then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');')
            .else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');

          check$1.optional(function () {
            env.assert(ifte.else,
              '!' + elementDefn + '||' + elements,
              'invalid elements');
          });

          scope.entry(ifte);
          scope.exit(
            env.cond(elementStream)
              .then(ELEMENT_STATE, '.destroyStream(', elements, ');'));

          env.ELEMENTS = elements;

          return elements
        })
      }

      return null
    }

    var elements = parseElements();

    function parsePrimitive () {
      if (S_PRIMITIVE in staticOptions) {
        var primitive = staticOptions[S_PRIMITIVE];
        check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);
        return createStaticDecl(function (env, scope) {
          return primTypes[primitive]
        })
      } else if (S_PRIMITIVE in dynamicOptions) {
        var dynPrimitive = dynamicOptions[S_PRIMITIVE];
        return createDynamicDecl(dynPrimitive, function (env, scope) {
          var PRIM_TYPES = env.constants.primTypes;
          var prim = env.invoke(scope, dynPrimitive);
          check$1.optional(function () {
            env.assert(scope,
              prim + ' in ' + PRIM_TYPES,
              'invalid primitive, must be one of ' + Object.keys(primTypes));
          });
          return scope.def(PRIM_TYPES, '[', prim, ']')
        })
      } else if (elements) {
        if (isStatic(elements)) {
          if (elements.value) {
            return createStaticDecl(function (env, scope) {
              return scope.def(env.ELEMENTS, '.primType')
            })
          } else {
            return createStaticDecl(function () {
              return GL_TRIANGLES$1
            })
          }
        } else {
          return new Declaration(
            elements.thisDep,
            elements.contextDep,
            elements.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1)
            })
        }
      }
      return null
    }

    function parseParam (param, isOffset) {
      if (param in staticOptions) {
        var value = staticOptions[param] | 0;
        check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);
        return createStaticDecl(function (env, scope) {
          if (isOffset) {
            env.OFFSET = value;
          }
          return value
        })
      } else if (param in dynamicOptions) {
        var dynValue = dynamicOptions[param];
        return createDynamicDecl(dynValue, function (env, scope) {
          var result = env.invoke(scope, dynValue);
          if (isOffset) {
            env.OFFSET = result;
            check$1.optional(function () {
              env.assert(scope,
                result + '>=0',
                'invalid ' + param);
            });
          }
          return result
        })
      } else if (isOffset && elements) {
        return createStaticDecl(function (env, scope) {
          env.OFFSET = '0';
          return 0
        })
      }
      return null
    }

    var OFFSET = parseParam(S_OFFSET, true);

    function parseVertCount () {
      if (S_COUNT in staticOptions) {
        var count = staticOptions[S_COUNT] | 0;
        check$1.command(
          typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);
        return createStaticDecl(function () {
          return count
        })
      } else if (S_COUNT in dynamicOptions) {
        var dynCount = dynamicOptions[S_COUNT];
        return createDynamicDecl(dynCount, function (env, scope) {
          var result = env.invoke(scope, dynCount);
          check$1.optional(function () {
            env.assert(scope,
              'typeof ' + result + '==="number"&&' +
              result + '>=0&&' +
              result + '===(' + result + '|0)',
              'invalid vertex count');
          });
          return result
        })
      } else if (elements) {
        if (isStatic(elements)) {
          if (elements) {
            if (OFFSET) {
              return new Declaration(
                OFFSET.thisDep,
                OFFSET.contextDep,
                OFFSET.propDep,
                function (env, scope) {
                  var result = scope.def(
                    env.ELEMENTS, '.vertCount-', env.OFFSET);

                  check$1.optional(function () {
                    env.assert(scope,
                      result + '>=0',
                      'invalid vertex offset/element buffer too small');
                  });

                  return result
                })
            } else {
              return createStaticDecl(function (env, scope) {
                return scope.def(env.ELEMENTS, '.vertCount')
              })
            }
          } else {
            var result = createStaticDecl(function () {
              return -1
            });
            check$1.optional(function () {
              result.MISSING = true;
            });
            return result
          }
        } else {
          var variable = new Declaration(
            elements.thisDep || OFFSET.thisDep,
            elements.contextDep || OFFSET.contextDep,
            elements.propDep || OFFSET.propDep,
            function (env, scope) {
              var elements = env.ELEMENTS;
              if (env.OFFSET) {
                return scope.def(elements, '?', elements, '.vertCount-',
                  env.OFFSET, ':-1')
              }
              return scope.def(elements, '?', elements, '.vertCount:-1')
            });
          check$1.optional(function () {
            variable.DYNAMIC = true;
          });
          return variable
        }
      }
      return null
    }

    return {
      elements: elements,
      primitive: parsePrimitive(),
      count: parseVertCount(),
      instances: parseParam(S_INSTANCES, false),
      offset: OFFSET
    }
  }

  function parseGLState (options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var STATE = {};

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);

      function parseParam (parseStatic, parseDynamic) {
        if (prop in staticOptions) {
          var value = parseStatic(staticOptions[prop]);
          STATE[param] = createStaticDecl(function () {
            return value
          });
        } else if (prop in dynamicOptions) {
          var dyn = dynamicOptions[prop];
          STATE[param] = createDynamicDecl(dyn, function (env, scope) {
            return parseDynamic(env, scope, env.invoke(scope, dyn))
          });
        }
      }

      switch (prop) {
        case S_CULL_ENABLE:
        case S_BLEND_ENABLE:
        case S_DITHER:
        case S_STENCIL_ENABLE:
        case S_DEPTH_ENABLE:
        case S_SCISSOR_ENABLE:
        case S_POLYGON_OFFSET_ENABLE:
        case S_SAMPLE_ALPHA:
        case S_SAMPLE_ENABLE:
        case S_DEPTH_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'boolean', prop, env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="boolean"',
                  'invalid flag ' + prop, env.commandStr);
              });
              return value
            })

        case S_DEPTH_FUNC:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);
              return compareFuncs[value]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                env.assert(scope,
                  value + ' in ' + COMPARE_FUNCS,
                  'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));
              });
              return scope.def(COMPARE_FUNCS, '[', value, ']')
            })

        case S_DEPTH_RANGE:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 2 &&
                typeof value[0] === 'number' &&
                typeof value[1] === 'number' &&
                value[0] <= value[1],
                'depth range is 2d array',
                env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===2&&' +
                  'typeof ' + value + '[0]==="number"&&' +
                  'typeof ' + value + '[1]==="number"&&' +
                  value + '[0]<=' + value + '[1]',
                  'depth range must be a 2d array');
              });

              var Z_NEAR = scope.def('+', value, '[0]');
              var Z_FAR = scope.def('+', value, '[1]');
              return [Z_NEAR, Z_FAR]
            })

        case S_BLEND_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', 'blend.func', env.commandStr);
              var srcRGB = ('srcRGB' in value ? value.srcRGB : value.src);
              var srcAlpha = ('srcAlpha' in value ? value.srcAlpha : value.src);
              var dstRGB = ('dstRGB' in value ? value.dstRGB : value.dst);
              var dstAlpha = ('dstAlpha' in value ? value.dstAlpha : value.dst);
              check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);
              check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);
              check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);
              check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);

              check$1.command(
                (invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1),
                'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);

              return [
                blendFuncs[srcRGB],
                blendFuncs[dstRGB],
                blendFuncs[srcAlpha],
                blendFuncs[dstAlpha]
              ]
            },
            function (env, scope, value) {
              var BLEND_FUNCS = env.constants.blendFuncs;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid blend func, must be an object');
              });

              function read (prefix, suffix) {
                var func = scope.def(
                  '"', prefix, suffix, '" in ', value,
                  '?', value, '.', prefix, suffix,
                  ':', value, '.', prefix);

                check$1.optional(function () {
                  env.assert(scope,
                    func + ' in ' + BLEND_FUNCS,
                    'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));
                });

                return func
              }

              var srcRGB = read('src', 'RGB');
              var dstRGB = read('dst', 'RGB');

              check$1.optional(function () {
                var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;

                env.assert(scope,
                           INVALID_BLEND_COMBINATIONS +
                           '.indexOf(' + srcRGB + '+", "+' + dstRGB + ') === -1 ',
                           'unallowed blending combination for (srcRGB, dstRGB)'
                          );
              });

              var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');
              var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');
              var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');
              var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');

              return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA]
            })

        case S_BLEND_EQUATION:
          return parseParam(
            function (value) {
              if (typeof value === 'string') {
                check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);
                return [
                  blendEquations[value],
                  blendEquations[value]
                ]
              } else if (typeof value === 'object') {
                check$1.commandParameter(
                  value.rgb, blendEquations, prop + '.rgb', env.commandStr);
                check$1.commandParameter(
                  value.alpha, blendEquations, prop + '.alpha', env.commandStr);
                return [
                  blendEquations[value.rgb],
                  blendEquations[value.alpha]
                ]
              } else {
                check$1.commandRaise('invalid blend.equation', env.commandStr);
              }
            },
            function (env, scope, value) {
              var BLEND_EQUATIONS = env.constants.blendEquations;

              var RGB = scope.def();
              var ALPHA = scope.def();

              var ifte = env.cond('typeof ', value, '==="string"');

              check$1.optional(function () {
                function checkProp (block, name, value) {
                  env.assert(block,
                    value + ' in ' + BLEND_EQUATIONS,
                    'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));
                }
                checkProp(ifte.then, prop, value);

                env.assert(ifte.else,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
                checkProp(ifte.else, prop + '.rgb', value + '.rgb');
                checkProp(ifte.else, prop + '.alpha', value + '.alpha');
              });

              ifte.then(
                RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');
              ifte.else(
                RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];',
                ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');

              scope(ifte);

              return [RGB, ALPHA]
            })

        case S_BLEND_COLOR:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) &&
                value.length === 4,
                'blend.color must be a 4d array', env.commandStr);
              return loop(4, function (i) {
                return +value[i]
              })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'blend.color must be a 4d array');
              });
              return loop(4, function (i) {
                return scope.def('+', value, '[', i, ']')
              })
            })

        case S_STENCIL_MASK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'number', param, env.commandStr);
              return value | 0
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"',
                  'invalid stencil.mask');
              });
              return scope.def(value, '|0')
            })

        case S_STENCIL_FUNC:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var cmp = value.cmp || 'keep';
              var ref = value.ref || 0;
              var mask = 'mask' in value ? value.mask : -1;
              check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);
              check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);
              check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);
              return [
                compareFuncs[cmp],
                ref,
                mask
              ]
            },
            function (env, scope, value) {
              var COMPARE_FUNCS = env.constants.compareFuncs;
              check$1.optional(function () {
                function assert () {
                  env.assert(scope,
                    Array.prototype.join.call(arguments, ''),
                    'invalid stencil.func');
                }
                assert(value + '&&typeof ', value, '==="object"');
                assert('!("cmp" in ', value, ')||(',
                  value, '.cmp in ', COMPARE_FUNCS, ')');
              });
              var cmp = scope.def(
                '"cmp" in ', value,
                '?', COMPARE_FUNCS, '[', value, '.cmp]',
                ':', GL_KEEP);
              var ref = scope.def(value, '.ref|0');
              var mask = scope.def(
                '"mask" in ', value,
                '?', value, '.mask|0:-1');
              return [cmp, ref, mask]
            })

        case S_STENCIL_OPFRONT:
        case S_STENCIL_OPBACK:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var fail = value.fail || 'keep';
              var zfail = value.zfail || 'keep';
              var zpass = value.zpass || 'keep';
              check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);
              check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);
              check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);
              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                stencilOps[fail],
                stencilOps[zfail],
                stencilOps[zpass]
              ]
            },
            function (env, scope, value) {
              var STENCIL_OPS = env.constants.stencilOps;

              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              function read (name) {
                check$1.optional(function () {
                  env.assert(scope,
                    '!("' + name + '" in ' + value + ')||' +
                    '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')',
                    'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));
                });

                return scope.def(
                  '"', name, '" in ', value,
                  '?', STENCIL_OPS, '[', value, '.', name, ']:',
                  GL_KEEP)
              }

              return [
                prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                read('fail'),
                read('zfail'),
                read('zpass')
              ]
            })

        case S_POLYGON_OFFSET_OFFSET:
          return parseParam(
            function (value) {
              check$1.commandType(value, 'object', param, env.commandStr);
              var factor = value.factor | 0;
              var units = value.units | 0;
              check$1.commandType(factor, 'number', param + '.factor', env.commandStr);
              check$1.commandType(units, 'number', param + '.units', env.commandStr);
              return [factor, units]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid ' + prop);
              });

              var FACTOR = scope.def(value, '.factor|0');
              var UNITS = scope.def(value, '.units|0');

              return [FACTOR, UNITS]
            })

        case S_CULL_FACE:
          return parseParam(
            function (value) {
              var face = 0;
              if (value === 'front') {
                face = GL_FRONT;
              } else if (value === 'back') {
                face = GL_BACK;
              }
              check$1.command(!!face, param, env.commandStr);
              return face
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="front"||' +
                  value + '==="back"',
                  'invalid cull.face');
              });
              return scope.def(value, '==="front"?', GL_FRONT, ':', GL_BACK)
            })

        case S_LINE_WIDTH:
          return parseParam(
            function (value) {
              check$1.command(
                typeof value === 'number' &&
                value >= limits.lineWidthDims[0] &&
                value <= limits.lineWidthDims[1],
                'invalid line width, must be a positive number between ' +
                limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);
              return value
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  'typeof ' + value + '==="number"&&' +
                  value + '>=' + limits.lineWidthDims[0] + '&&' +
                  value + '<=' + limits.lineWidthDims[1],
                  'invalid line width');
              });

              return value
            })

        case S_FRONT_FACE:
          return parseParam(
            function (value) {
              check$1.commandParameter(value, orientationType, param, env.commandStr);
              return orientationType[value]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '==="cw"||' +
                  value + '==="ccw"',
                  'invalid frontFace, must be one of cw,ccw');
              });
              return scope.def(value + '==="cw"?' + GL_CW + ':' + GL_CCW)
            })

        case S_COLOR_MASK:
          return parseParam(
            function (value) {
              check$1.command(
                isArrayLike(value) && value.length === 4,
                'color.mask must be length 4 array', env.commandStr);
              return value.map(function (v) { return !!v })
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  env.shared.isArrayLike + '(' + value + ')&&' +
                  value + '.length===4',
                  'invalid color.mask');
              });
              return loop(4, function (i) {
                return '!!' + value + '[' + i + ']'
              })
            })

        case S_SAMPLE_COVERAGE:
          return parseParam(
            function (value) {
              check$1.command(typeof value === 'object' && value, param, env.commandStr);
              var sampleValue = 'value' in value ? value.value : 1;
              var sampleInvert = !!value.invert;
              check$1.command(
                typeof sampleValue === 'number' &&
                sampleValue >= 0 && sampleValue <= 1,
                'sample.coverage.value must be a number between 0 and 1', env.commandStr);
              return [sampleValue, sampleInvert]
            },
            function (env, scope, value) {
              check$1.optional(function () {
                env.assert(scope,
                  value + '&&typeof ' + value + '==="object"',
                  'invalid sample.coverage');
              });
              var VALUE = scope.def(
                '"value" in ', value, '?+', value, '.value:1');
              var INVERT = scope.def('!!', value, '.invert');
              return [VALUE, INVERT]
            })
      }
    });

    return STATE
  }

  function parseUniforms (uniforms, env) {
    var staticUniforms = uniforms.static;
    var dynamicUniforms = uniforms.dynamic;

    var UNIFORMS = {};

    Object.keys(staticUniforms).forEach(function (name) {
      var value = staticUniforms[name];
      var result;
      if (typeof value === 'number' ||
          typeof value === 'boolean') {
        result = createStaticDecl(function () {
          return value
        });
      } else if (typeof value === 'function') {
        var reglType = value._reglType;
        if (reglType === 'texture2d' ||
            reglType === 'textureCube') {
          result = createStaticDecl(function (env) {
            return env.link(value)
          });
        } else if (reglType === 'framebuffer' ||
                   reglType === 'framebufferCube') {
          check$1.command(value.color.length > 0,
            'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
          result = createStaticDecl(function (env) {
            return env.link(value.color[0])
          });
        } else {
          check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
        }
      } else if (isArrayLike(value)) {
        result = createStaticDecl(function (env) {
          var ITEM = env.global.def('[',
            loop(value.length, function (i) {
              check$1.command(
                typeof value[i] === 'number' ||
                typeof value[i] === 'boolean',
                'invalid uniform ' + name, env.commandStr);
              return value[i]
            }), ']');
          return ITEM
        });
      } else {
        check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
      }
      result.value = value;
      UNIFORMS[name] = result;
    });

    Object.keys(dynamicUniforms).forEach(function (key) {
      var dyn = dynamicUniforms[key];
      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return UNIFORMS
  }

  function parseAttributes (attributes, env) {
    var staticAttributes = attributes.static;
    var dynamicAttributes = attributes.dynamic;

    var attributeDefs = {};

    Object.keys(staticAttributes).forEach(function (attribute) {
      var value = staticAttributes[attribute];
      var id = stringStore.id(attribute);

      var record = new AttributeRecord();
      if (isBufferArgs(value)) {
        record.state = ATTRIB_STATE_POINTER;
        record.buffer = bufferState.getBuffer(
          bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));
        record.type = 0;
      } else {
        var buffer = bufferState.getBuffer(value);
        if (buffer) {
          record.state = ATTRIB_STATE_POINTER;
          record.buffer = buffer;
          record.type = 0;
        } else {
          check$1.command(typeof value === 'object' && value,
            'invalid data for attribute ' + attribute, env.commandStr);
          if ('constant' in value) {
            var constant = value.constant;
            record.buffer = 'null';
            record.state = ATTRIB_STATE_CONSTANT;
            if (typeof constant === 'number') {
              record.x = constant;
            } else {
              check$1.command(
                isArrayLike(constant) &&
                constant.length > 0 &&
                constant.length <= 4,
                'invalid constant for attribute ' + attribute, env.commandStr);
              CUTE_COMPONENTS.forEach(function (c, i) {
                if (i < constant.length) {
                  record[c] = constant[i];
                }
              });
            }
          } else {
            if (isBufferArgs(value.buffer)) {
              buffer = bufferState.getBuffer(
                bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));
            } else {
              buffer = bufferState.getBuffer(value.buffer);
            }
            check$1.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);

            var offset = value.offset | 0;
            check$1.command(offset >= 0,
              'invalid offset for attribute "' + attribute + '"', env.commandStr);

            var stride = value.stride | 0;
            check$1.command(stride >= 0 && stride < 256,
              'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);

            var size = value.size | 0;
            check$1.command(!('size' in value) || (size > 0 && size <= 4),
              'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);

            var normalized = !!value.normalized;

            var type = 0;
            if ('type' in value) {
              check$1.commandParameter(
                value.type, glTypes,
                'invalid type for attribute ' + attribute, env.commandStr);
              type = glTypes[value.type];
            }

            var divisor = value.divisor | 0;
            if ('divisor' in value) {
              check$1.command(divisor === 0 || extInstancing,
                'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
              check$1.command(divisor >= 0,
                'invalid divisor for attribute "' + attribute + '"', env.commandStr);
            }

            check$1.optional(function () {
              var command = env.commandStr;

              var VALID_KEYS = [
                'buffer',
                'offset',
                'divisor',
                'normalized',
                'type',
                'size',
                'stride'
              ];

              Object.keys(value).forEach(function (prop) {
                check$1.command(
                  VALID_KEYS.indexOf(prop) >= 0,
                  'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ')',
                  command);
              });
            });

            record.buffer = buffer;
            record.state = ATTRIB_STATE_POINTER;
            record.size = size;
            record.normalized = normalized;
            record.type = type || buffer.dtype;
            record.offset = offset;
            record.stride = stride;
            record.divisor = divisor;
          }
        }
      }

      attributeDefs[attribute] = createStaticDecl(function (env, scope) {
        var cache = env.attribCache;
        if (id in cache) {
          return cache[id]
        }
        var result = {
          isStream: false
        };
        Object.keys(record).forEach(function (key) {
          result[key] = record[key];
        });
        if (record.buffer) {
          result.buffer = env.link(record.buffer);
          result.type = result.type || (result.buffer + '.dtype');
        }
        cache[id] = result;
        return result
      });
    });

    Object.keys(dynamicAttributes).forEach(function (attribute) {
      var dyn = dynamicAttributes[attribute];

      function appendAttributeCode (env, block) {
        var VALUE = env.invoke(block, dyn);

        var shared = env.shared;

        var IS_BUFFER_ARGS = shared.isBufferArgs;
        var BUFFER_STATE = shared.buffer;

        // Perform validation on attribute
        check$1.optional(function () {
          env.assert(block,
            VALUE + '&&(typeof ' + VALUE + '==="object"||typeof ' +
            VALUE + '==="function")&&(' +
            IS_BUFFER_ARGS + '(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + ')||' +
            BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' +
            IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' +
            '("constant" in ' + VALUE +
            '&&(typeof ' + VALUE + '.constant==="number"||' +
            shared.isArrayLike + '(' + VALUE + '.constant))))',
            'invalid dynamic attribute "' + attribute + '"');
        });

        // allocate names for result
        var result = {
          isStream: block.def(false)
        };
        var defaultRecord = new AttributeRecord();
        defaultRecord.state = ATTRIB_STATE_POINTER;
        Object.keys(defaultRecord).forEach(function (key) {
          result[key] = block.def('' + defaultRecord[key]);
        });

        var BUFFER = result.buffer;
        var TYPE = result.type;
        block(
          'if(', IS_BUFFER_ARGS, '(', VALUE, ')){',
          result.isStream, '=true;',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');',
          TYPE, '=', BUFFER, '.dtype;',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');',
          'if(', BUFFER, '){',
          TYPE, '=', BUFFER, '.dtype;',
          '}else if("constant" in ', VALUE, '){',
          result.state, '=', ATTRIB_STATE_CONSTANT, ';',
          'if(typeof ' + VALUE + '.constant === "number"){',
          result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;',
          CUTE_COMPONENTS.slice(1).map(function (n) {
            return result[n]
          }).join('='), '=0;',
          '}else{',
          CUTE_COMPONENTS.map(function (name, i) {
            return (
              result[name] + '=' + VALUE + '.constant.length>' + i +
              '?' + VALUE + '.constant[' + i + ']:0;'
            )
          }).join(''),
          '}}else{',
          'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){',
          BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);',
          '}else{',
          BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);',
          '}',
          TYPE, '="type" in ', VALUE, '?',
          shared.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;',
          result.normalized, '=!!', VALUE, '.normalized;');
        function emitReadRecord (name) {
          block(result[name], '=', VALUE, '.', name, '|0;');
        }
        emitReadRecord('size');
        emitReadRecord('offset');
        emitReadRecord('stride');
        emitReadRecord('divisor');

        block('}}');

        block.exit(
          'if(', result.isStream, '){',
          BUFFER_STATE, '.destroyStream(', BUFFER, ');',
          '}');

        return result
      }

      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
    });

    return attributeDefs
  }

  function parseContext (context) {
    var staticContext = context.static;
    var dynamicContext = context.dynamic;
    var result = {};

    Object.keys(staticContext).forEach(function (name) {
      var value = staticContext[name];
      result[name] = createStaticDecl(function (env, scope) {
        if (typeof value === 'number' || typeof value === 'boolean') {
          return '' + value
        } else {
          return env.link(value)
        }
      });
    });

    Object.keys(dynamicContext).forEach(function (name) {
      var dyn = dynamicContext[name];
      result[name] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn)
      });
    });

    return result
  }

  function parseArguments (options, attributes, uniforms, context, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    check$1.optional(function () {
      var KEY_NAMES = [
        S_FRAMEBUFFER,
        S_VERT,
        S_FRAG,
        S_ELEMENTS,
        S_PRIMITIVE,
        S_OFFSET,
        S_COUNT,
        S_INSTANCES,
        S_PROFILE
      ].concat(GL_STATE_NAMES);

      function checkKeys (dict) {
        Object.keys(dict).forEach(function (key) {
          check$1.command(
            KEY_NAMES.indexOf(key) >= 0,
            'unknown parameter "' + key + '"',
            env.commandStr);
        });
      }

      checkKeys(staticOptions);
      checkKeys(dynamicOptions);
    });

    var framebuffer = parseFramebuffer(options, env);
    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
    var draw = parseDraw(options, env);
    var state = parseGLState(options, env);
    var shader = parseProgram(options, env);

    function copyBox (name) {
      var defn = viewportAndScissor[name];
      if (defn) {
        state[name] = defn;
      }
    }
    copyBox(S_VIEWPORT);
    copyBox(propName(S_SCISSOR_BOX));

    var dirty = Object.keys(state).length > 0;

    var result = {
      framebuffer: framebuffer,
      draw: draw,
      shader: shader,
      state: state,
      dirty: dirty
    };

    result.profile = parseProfile(options, env);
    result.uniforms = parseUniforms(uniforms, env);
    result.attributes = parseAttributes(attributes, env);
    result.context = parseContext(context, env);
    return result
  }

  // ===================================================
  // ===================================================
  // COMMON UPDATE FUNCTIONS
  // ===================================================
  // ===================================================
  function emitContext (env, scope, context) {
    var shared = env.shared;
    var CONTEXT = shared.context;

    var contextEnter = env.scope();

    Object.keys(context).forEach(function (name) {
      scope.save(CONTEXT, '.' + name);
      var defn = context[name];
      contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');
    });

    scope(contextEnter);
  }

  // ===================================================
  // ===================================================
  // COMMON DRAWING FUNCTIONS
  // ===================================================
  // ===================================================
  function emitPollFramebuffer (env, scope, framebuffer, skipCheck) {
    var shared = env.shared;

    var GL = shared.gl;
    var FRAMEBUFFER_STATE = shared.framebuffer;
    var EXT_DRAW_BUFFERS;
    if (extDrawBuffers) {
      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');
    }

    var constants = env.constants;

    var DRAW_BUFFERS = constants.drawBuffer;
    var BACK_BUFFER = constants.backBuffer;

    var NEXT;
    if (framebuffer) {
      NEXT = framebuffer.append(env, scope);
    } else {
      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');
    }

    if (!skipCheck) {
      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');
    }
    scope(
      'if(', NEXT, '){',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(',
        DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');
    }
    scope('}else{',
      GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');
    }
    scope(
      '}',
      FRAMEBUFFER_STATE, '.cur=', NEXT, ';');
    if (!skipCheck) {
      scope('}');
    }
  }

  function emitPollState (env, scope, args) {
    var shared = env.shared;

    var GL = shared.gl;

    var CURRENT_VARS = env.current;
    var NEXT_VARS = env.next;
    var CURRENT_STATE = shared.current;
    var NEXT_STATE = shared.next;

    var block = env.cond(CURRENT_STATE, '.dirty');

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);
      if (param in args.state) {
        return
      }

      var NEXT, CURRENT;
      if (param in NEXT_VARS) {
        NEXT = NEXT_VARS[param];
        CURRENT = CURRENT_VARS[param];
        var parts = loop(currentState[param].length, function (i) {
          return block.def(NEXT, '[', i, ']')
        });
        block(env.cond(parts.map(function (p, i) {
          return p + '!==' + CURRENT + '[' + i + ']'
        }).join('||'))
          .then(
            GL, '.', GL_VARIABLES[param], '(', parts, ');',
            parts.map(function (p, i) {
              return CURRENT + '[' + i + ']=' + p
            }).join(';'), ';'));
      } else {
        NEXT = block.def(NEXT_STATE, '.', param);
        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);
        block(ifte);
        if (param in GL_FLAGS) {
          ifte(
            env.cond(NEXT)
                .then(GL, '.enable(', GL_FLAGS[param], ');')
                .else(GL, '.disable(', GL_FLAGS[param], ');'),
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        } else {
          ifte(
            GL, '.', GL_VARIABLES[param], '(', NEXT, ');',
            CURRENT_STATE, '.', param, '=', NEXT, ';');
        }
      }
    });
    if (Object.keys(args.state).length === 0) {
      block(CURRENT_STATE, '.dirty=false;');
    }
    scope(block);
  }

  function emitSetOptions (env, scope, options, filter) {
    var shared = env.shared;
    var CURRENT_VARS = env.current;
    var CURRENT_STATE = shared.current;
    var GL = shared.gl;
    sortState(Object.keys(options)).forEach(function (param) {
      var defn = options[param];
      if (filter && !filter(defn)) {
        return
      }
      var variable = defn.append(env, scope);
      if (GL_FLAGS[param]) {
        var flag = GL_FLAGS[param];
        if (isStatic(defn)) {
          if (variable) {
            scope(GL, '.enable(', flag, ');');
          } else {
            scope(GL, '.disable(', flag, ');');
          }
        } else {
          scope(env.cond(variable)
            .then(GL, '.enable(', flag, ');')
            .else(GL, '.disable(', flag, ');'));
        }
        scope(CURRENT_STATE, '.', param, '=', variable, ';');
      } else if (isArrayLike(variable)) {
        var CURRENT = CURRENT_VARS[param];
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          variable.map(function (v, i) {
            return CURRENT + '[' + i + ']=' + v
          }).join(';'), ';');
      } else {
        scope(
          GL, '.', GL_VARIABLES[param], '(', variable, ');',
          CURRENT_STATE, '.', param, '=', variable, ';');
      }
    });
  }

  function injectExtensions (env, scope) {
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
  }

  function emitProfile (env, scope, args, useScope, incrementCounter) {
    var shared = env.shared;
    var STATS = env.stats;
    var CURRENT_STATE = shared.current;
    var TIMER = shared.timer;
    var profileArg = args.profile;

    function perfCounter () {
      if (typeof performance === 'undefined') {
        return 'Date.now()'
      } else {
        return 'performance.now()'
      }
    }

    var CPU_START, QUERY_COUNTER;
    function emitProfileStart (block) {
      CPU_START = scope.def();
      block(CPU_START, '=', perfCounter(), ';');
      if (typeof incrementCounter === 'string') {
        block(STATS, '.count+=', incrementCounter, ';');
      } else {
        block(STATS, '.count++;');
      }
      if (timer) {
        if (useScope) {
          QUERY_COUNTER = scope.def();
          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');
        } else {
          block(TIMER, '.beginQuery(', STATS, ');');
        }
      }
    }

    function emitProfileEnd (block) {
      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');
      if (timer) {
        if (useScope) {
          block(TIMER, '.pushScopeStats(',
            QUERY_COUNTER, ',',
            TIMER, '.getNumPendingQueries(),',
            STATS, ');');
        } else {
          block(TIMER, '.endQuery();');
        }
      }
    }

    function scopeProfile (value) {
      var prev = scope.def(CURRENT_STATE, '.profile');
      scope(CURRENT_STATE, '.profile=', value, ';');
      scope.exit(CURRENT_STATE, '.profile=', prev, ';');
    }

    var USE_PROFILE;
    if (profileArg) {
      if (isStatic(profileArg)) {
        if (profileArg.enable) {
          emitProfileStart(scope);
          emitProfileEnd(scope.exit);
          scopeProfile('true');
        } else {
          scopeProfile('false');
        }
        return
      }
      USE_PROFILE = profileArg.append(env, scope);
      scopeProfile(USE_PROFILE);
    } else {
      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');
    }

    var start = env.block();
    emitProfileStart(start);
    scope('if(', USE_PROFILE, '){', start, '}');
    var end = env.block();
    emitProfileEnd(end);
    scope.exit('if(', USE_PROFILE, '){', end, '}');
  }

  function emitAttributes (env, scope, args, attributes, filter) {
    var shared = env.shared;

    function typeLength (x) {
      switch (x) {
        case GL_FLOAT_VEC2:
        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          return 2
        case GL_FLOAT_VEC3:
        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          return 3
        case GL_FLOAT_VEC4:
        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          return 4
        default:
          return 1
      }
    }

    function emitBindAttribute (ATTRIBUTE, size, record) {
      var GL = shared.gl;

      var LOCATION = scope.def(ATTRIBUTE, '.location');
      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');

      var STATE = record.state;
      var BUFFER = record.buffer;
      var CONST_COMPONENTS = [
        record.x,
        record.y,
        record.z,
        record.w
      ];

      var COMMON_KEYS = [
        'buffer',
        'normalized',
        'offset',
        'stride'
      ];

      function emitBuffer () {
        scope(
          'if(!', BINDING, '.buffer){',
          GL, '.enableVertexAttribArray(', LOCATION, ');}');

        var TYPE = record.type;
        var SIZE;
        if (!record.size) {
          SIZE = size;
        } else {
          SIZE = scope.def(record.size, '||', size);
        }

        scope('if(',
          BINDING, '.type!==', TYPE, '||',
          BINDING, '.size!==', SIZE, '||',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '!==' + record[key]
          }).join('||'),
          '){',
          GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);',
          GL, '.vertexAttribPointer(', [
            LOCATION,
            SIZE,
            TYPE,
            record.normalized,
            record.stride,
            record.offset
          ], ');',
          BINDING, '.type=', TYPE, ';',
          BINDING, '.size=', SIZE, ';',
          COMMON_KEYS.map(function (key) {
            return BINDING + '.' + key + '=' + record[key] + ';'
          }).join(''),
          '}');

        if (extInstancing) {
          var DIVISOR = record.divisor;
          scope(
            'if(', BINDING, '.divisor!==', DIVISOR, '){',
            env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');',
            BINDING, '.divisor=', DIVISOR, ';}');
        }
      }

      function emitConstant () {
        scope(
          'if(', BINDING, '.buffer){',
          GL, '.disableVertexAttribArray(', LOCATION, ');',
          '}if(', CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i]
          }).join('||'), '){',
          GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');',
          CUTE_COMPONENTS.map(function (c, i) {
            return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';'
          }).join(''),
          '}');
      }

      if (STATE === ATTRIB_STATE_POINTER) {
        emitBuffer();
      } else if (STATE === ATTRIB_STATE_CONSTANT) {
        emitConstant();
      } else {
        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');
        emitBuffer();
        scope('}else{');
        emitConstant();
        scope('}');
      }
    }

    attributes.forEach(function (attribute) {
      var name = attribute.name;
      var arg = args.attributes[name];
      var record;
      if (arg) {
        if (!filter(arg)) {
          return
        }
        record = arg.append(env, scope);
      } else {
        if (!filter(SCOPE_DECL)) {
          return
        }
        var scopeAttrib = env.scopeAttrib(name);
        check$1.optional(function () {
          env.assert(scope,
            scopeAttrib + '.state',
            'missing attribute ' + name);
        });
        record = {};
        Object.keys(new AttributeRecord()).forEach(function (key) {
          record[key] = scope.def(scopeAttrib, '.', key);
        });
      }
      emitBindAttribute(
        env.link(attribute), typeLength(attribute.info.type), record);
    });
  }

  function emitUniforms (env, scope, args, uniforms, filter) {
    var shared = env.shared;
    var GL = shared.gl;

    var infix;
    for (var i = 0; i < uniforms.length; ++i) {
      var uniform = uniforms[i];
      var name = uniform.name;
      var type = uniform.info.type;
      var arg = args.uniforms[name];
      var UNIFORM = env.link(uniform);
      var LOCATION = UNIFORM + '.location';

      var VALUE;
      if (arg) {
        if (!filter(arg)) {
          continue
        }
        if (isStatic(arg)) {
          var value = arg.value;
          check$1.command(
            value !== null && typeof value !== 'undefined',
            'missing uniform "' + name + '"', env.commandStr);
          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
            check$1.command(
              typeof value === 'function' &&
              ((type === GL_SAMPLER_2D &&
                (value._reglType === 'texture2d' ||
                value._reglType === 'framebuffer')) ||
              (type === GL_SAMPLER_CUBE &&
                (value._reglType === 'textureCube' ||
                value._reglType === 'framebufferCube'))),
              'invalid texture for uniform ' + name, env.commandStr);
            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');
            scope.exit(TEX_VALUE, '.unbind();');
          } else if (
            type === GL_FLOAT_MAT2 ||
            type === GL_FLOAT_MAT3 ||
            type === GL_FLOAT_MAT4) {
            check$1.optional(function () {
              check$1.command(isArrayLike(value),
                'invalid matrix for uniform ' + name, env.commandStr);
              check$1.command(
                (type === GL_FLOAT_MAT2 && value.length === 4) ||
                (type === GL_FLOAT_MAT3 && value.length === 9) ||
                (type === GL_FLOAT_MAT4 && value.length === 16),
                'invalid length for matrix uniform ' + name, env.commandStr);
            });
            var MAT_VALUE = env.global.def('new Float32Array([' +
              Array.prototype.slice.call(value) + '])');
            var dim = 2;
            if (type === GL_FLOAT_MAT3) {
              dim = 3;
            } else if (type === GL_FLOAT_MAT4) {
              dim = 4;
            }
            scope(
              GL, '.uniformMatrix', dim, 'fv(',
              LOCATION, ',false,', MAT_VALUE, ');');
          } else {
            switch (type) {
              case GL_FLOAT$8:
                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1f';
                break
              case GL_FLOAT_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2f';
                break
              case GL_FLOAT_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3f';
                break
              case GL_FLOAT_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4f';
                break
              case GL_BOOL:
                check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break
              case GL_INT$3:
                check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break
              case GL_BOOL_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_INT_VEC2:
                check$1.command(
                  isArrayLike(value) && value.length === 2,
                  'uniform ' + name, env.commandStr);
                infix = '2i';
                break
              case GL_BOOL_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_INT_VEC3:
                check$1.command(
                  isArrayLike(value) && value.length === 3,
                  'uniform ' + name, env.commandStr);
                infix = '3i';
                break
              case GL_BOOL_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
              case GL_INT_VEC4:
                check$1.command(
                  isArrayLike(value) && value.length === 4,
                  'uniform ' + name, env.commandStr);
                infix = '4i';
                break
            }
            scope(GL, '.uniform', infix, '(', LOCATION, ',',
              isArrayLike(value) ? Array.prototype.slice.call(value) : value,
              ');');
          }
          continue
        } else {
          VALUE = arg.append(env, scope);
        }
      } else {
        if (!filter(SCOPE_DECL)) {
          continue
        }
        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');
      }

      if (type === GL_SAMPLER_2D) {
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebuffer"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      } else if (type === GL_SAMPLER_CUBE) {
        scope(
          'if(', VALUE, '&&', VALUE, '._reglType==="framebufferCube"){',
          VALUE, '=', VALUE, '.color[0];',
          '}');
      }

      // perform type validation
      check$1.optional(function () {
        function check (pred, message) {
          env.assert(scope, pred,
            'bad data or missing for uniform "' + name + '".  ' + message);
        }

        function checkType (type) {
          check(
            'typeof ' + VALUE + '==="' + type + '"',
            'invalid type, expected ' + type);
        }

        function checkVector (n, type) {
          check(
            shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n,
            'invalid vector, should have length ' + n, env.commandStr);
        }

        function checkTexture (target) {
          check(
            'typeof ' + VALUE + '==="function"&&' +
            VALUE + '._reglType==="texture' +
            (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '"',
            'invalid texture type', env.commandStr);
        }

        switch (type) {
          case GL_INT$3:
            checkType('number');
            break
          case GL_INT_VEC2:
            checkVector(2, 'number');
            break
          case GL_INT_VEC3:
            checkVector(3, 'number');
            break
          case GL_INT_VEC4:
            checkVector(4, 'number');
            break
          case GL_FLOAT$8:
            checkType('number');
            break
          case GL_FLOAT_VEC2:
            checkVector(2, 'number');
            break
          case GL_FLOAT_VEC3:
            checkVector(3, 'number');
            break
          case GL_FLOAT_VEC4:
            checkVector(4, 'number');
            break
          case GL_BOOL:
            checkType('boolean');
            break
          case GL_BOOL_VEC2:
            checkVector(2, 'boolean');
            break
          case GL_BOOL_VEC3:
            checkVector(3, 'boolean');
            break
          case GL_BOOL_VEC4:
            checkVector(4, 'boolean');
            break
          case GL_FLOAT_MAT2:
            checkVector(4, 'number');
            break
          case GL_FLOAT_MAT3:
            checkVector(9, 'number');
            break
          case GL_FLOAT_MAT4:
            checkVector(16, 'number');
            break
          case GL_SAMPLER_2D:
            checkTexture(GL_TEXTURE_2D$3);
            break
          case GL_SAMPLER_CUBE:
            checkTexture(GL_TEXTURE_CUBE_MAP$2);
            break
        }
      });

      var unroll = 1;
      switch (type) {
        case GL_SAMPLER_2D:
        case GL_SAMPLER_CUBE:
          var TEX = scope.def(VALUE, '._texture');
          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');
          scope.exit(TEX, '.unbind();');
          continue

        case GL_INT$3:
        case GL_BOOL:
          infix = '1i';
          break

        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          infix = '2i';
          unroll = 2;
          break

        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          infix = '3i';
          unroll = 3;
          break

        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          infix = '4i';
          unroll = 4;
          break

        case GL_FLOAT$8:
          infix = '1f';
          break

        case GL_FLOAT_VEC2:
          infix = '2f';
          unroll = 2;
          break

        case GL_FLOAT_VEC3:
          infix = '3f';
          unroll = 3;
          break

        case GL_FLOAT_VEC4:
          infix = '4f';
          unroll = 4;
          break

        case GL_FLOAT_MAT2:
          infix = 'Matrix2fv';
          break

        case GL_FLOAT_MAT3:
          infix = 'Matrix3fv';
          break

        case GL_FLOAT_MAT4:
          infix = 'Matrix4fv';
          break
      }

      scope(GL, '.uniform', infix, '(', LOCATION, ',');
      if (infix.charAt(0) === 'M') {
        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
        var STORAGE = env.global.def('new Float32Array(', matSize, ')');
        scope(
          'false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(',
          loop(matSize, function (i) {
            return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']'
          }), ',', STORAGE, ')');
      } else if (unroll > 1) {
        scope(loop(unroll, function (i) {
          return VALUE + '[' + i + ']'
        }));
      } else {
        scope(VALUE);
      }
      scope(');');
    }
  }

  function emitDraw (env, outer, inner, args) {
    var shared = env.shared;
    var GL = shared.gl;
    var DRAW_STATE = shared.draw;

    var drawOptions = args.draw;

    function emitElements () {
      var defn = drawOptions.elements;
      var ELEMENTS;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        ELEMENTS = defn.append(env, scope);
      } else {
        ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);
      }
      if (ELEMENTS) {
        scope(
          'if(' + ELEMENTS + ')' +
          GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');
      }
      return ELEMENTS
    }

    function emitCount () {
      var defn = drawOptions.count;
      var COUNT;
      var scope = outer;
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          scope = inner;
        }
        COUNT = defn.append(env, scope);
        check$1.optional(function () {
          if (defn.MISSING) {
            env.assert(outer, 'false', 'missing vertex count');
          }
          if (defn.DYNAMIC) {
            env.assert(scope, COUNT + '>=0', 'missing vertex count');
          }
        });
      } else {
        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);
        check$1.optional(function () {
          env.assert(scope, COUNT + '>=0', 'missing vertex count');
        });
      }
      return COUNT
    }

    var ELEMENTS = emitElements();
    function emitValue (name) {
      var defn = drawOptions[name];
      if (defn) {
        if ((defn.contextDep && args.contextDynamic) || defn.propDep) {
          return defn.append(env, inner)
        } else {
          return defn.append(env, outer)
        }
      } else {
        return outer.def(DRAW_STATE, '.', name)
      }
    }

    var PRIMITIVE = emitValue(S_PRIMITIVE);
    var OFFSET = emitValue(S_OFFSET);

    var COUNT = emitCount();
    if (typeof COUNT === 'number') {
      if (COUNT === 0) {
        return
      }
    } else {
      inner('if(', COUNT, '){');
      inner.exit('}');
    }

    var INSTANCES, EXT_INSTANCING;
    if (extInstancing) {
      INSTANCES = emitValue(S_INSTANCES);
      EXT_INSTANCING = env.instancing;
    }

    var ELEMENT_TYPE = ELEMENTS + '.type';

    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);

    function emitInstancing () {
      function drawElements () {
        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)',
          INSTANCES
        ], ');');
      }

      function drawArrays () {
        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(',
          [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');
      }

      if (ELEMENTS) {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    function emitRegular () {
      function drawElements () {
        inner(GL + '.drawElements(' + [
          PRIMITIVE,
          COUNT,
          ELEMENT_TYPE,
          OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'
        ] + ');');
      }

      function drawArrays () {
        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');
      }

      if (ELEMENTS) {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {
      if (typeof INSTANCES === 'string') {
        inner('if(', INSTANCES, '>0){');
        emitInstancing();
        inner('}else if(', INSTANCES, '<0){');
        emitRegular();
        inner('}');
      } else {
        emitInstancing();
      }
    } else {
      emitRegular();
    }
  }

  function createBody (emitBody, parentEnv, args, program, count) {
    var env = createREGLEnvironment();
    var scope = env.proc('body', count);
    check$1.optional(function () {
      env.commandStr = parentEnv.commandStr;
      env.command = env.link(parentEnv.commandStr);
    });
    if (extInstancing) {
      env.instancing = scope.def(
        env.shared.extensions, '.angle_instanced_arrays');
    }
    emitBody(env, scope, args, program);
    return env.compile().body
  }

  // ===================================================
  // ===================================================
  // DRAW PROC
  // ===================================================
  // ===================================================
  function emitDrawBody (env, draw, args, program) {
    injectExtensions(env, draw);
    emitAttributes(env, draw, args, program.attributes, function () {
      return true
    });
    emitUniforms(env, draw, args, program.uniforms, function () {
      return true
    });
    emitDraw(env, draw, draw, args);
  }

  function emitDrawProc (env, args) {
    var draw = env.proc('draw', 1);

    injectExtensions(env, draw);

    emitContext(env, draw, args.context);
    emitPollFramebuffer(env, draw, args.framebuffer);

    emitPollState(env, draw, args);
    emitSetOptions(env, draw, args.state);

    emitProfile(env, draw, args, false, true);

    var program = args.shader.progVar.append(env, draw);
    draw(env.shared.gl, '.useProgram(', program, '.program);');

    if (args.shader.program) {
      emitDrawBody(env, draw, args, args.shader.program);
    } else {
      var drawCache = env.global.def('{}');
      var PROG_ID = draw.def(program, '.id');
      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');
      draw(
        env.cond(CACHED_PROC)
          .then(CACHED_PROC, '.call(this,a0);')
          .else(
            CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=',
            env.link(function (program) {
              return createBody(emitDrawBody, env, args, program, 1)
            }), '(', program, ');',
            CACHED_PROC, '.call(this,a0);'));
    }

    if (Object.keys(args.state).length > 0) {
      draw(env.shared.current, '.dirty=true;');
    }
  }

  // ===================================================
  // ===================================================
  // BATCH PROC
  // ===================================================
  // ===================================================

  function emitBatchDynamicShaderBody (env, scope, args, program) {
    env.batchId = 'a1';

    injectExtensions(env, scope);

    function all () {
      return true
    }

    emitAttributes(env, scope, args, program.attributes, all);
    emitUniforms(env, scope, args, program.uniforms, all);
    emitDraw(env, scope, scope, args);
  }

  function emitBatchBody (env, scope, args, program) {
    injectExtensions(env, scope);

    var contextDynamic = args.contextDep;

    var BATCH_ID = scope.def();
    var PROP_LIST = 'a0';
    var NUM_PROPS = 'a1';
    var PROPS = scope.def();
    env.shared.props = PROPS;
    env.batchId = BATCH_ID;

    var outer = env.scope();
    var inner = env.scope();

    scope(
      outer.entry,
      'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){',
      PROPS, '=', PROP_LIST, '[', BATCH_ID, '];',
      inner,
      '}',
      outer.exit);

    function isInnerDefn (defn) {
      return ((defn.contextDep && contextDynamic) || defn.propDep)
    }

    function isOuterDefn (defn) {
      return !isInnerDefn(defn)
    }

    if (args.needsContext) {
      emitContext(env, inner, args.context);
    }
    if (args.needsFramebuffer) {
      emitPollFramebuffer(env, inner, args.framebuffer);
    }
    emitSetOptions(env, inner, args.state, isInnerDefn);

    if (args.profile && isInnerDefn(args.profile)) {
      emitProfile(env, inner, args, false, true);
    }

    if (!program) {
      var progCache = env.global.def('{}');
      var PROGRAM = args.shader.progVar.append(env, inner);
      var PROG_ID = inner.def(PROGRAM, '.id');
      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');
      inner(
        env.shared.gl, '.useProgram(', PROGRAM, '.program);',
        'if(!', CACHED_PROC, '){',
        CACHED_PROC, '=', progCache, '[', PROG_ID, ']=',
        env.link(function (program) {
          return createBody(
            emitBatchDynamicShaderBody, env, args, program, 2)
        }), '(', PROGRAM, ');}',
        CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');
    } else {
      emitAttributes(env, outer, args, program.attributes, isOuterDefn);
      emitAttributes(env, inner, args, program.attributes, isInnerDefn);
      emitUniforms(env, outer, args, program.uniforms, isOuterDefn);
      emitUniforms(env, inner, args, program.uniforms, isInnerDefn);
      emitDraw(env, outer, inner, args);
    }
  }

  function emitBatchProc (env, args) {
    var batch = env.proc('batch', 2);
    env.batchId = '0';

    injectExtensions(env, batch);

    // Check if any context variables depend on props
    var contextDynamic = false;
    var needsContext = true;
    Object.keys(args.context).forEach(function (name) {
      contextDynamic = contextDynamic || args.context[name].propDep;
    });
    if (!contextDynamic) {
      emitContext(env, batch, args.context);
      needsContext = false;
    }

    // framebuffer state affects framebufferWidth/height context vars
    var framebuffer = args.framebuffer;
    var needsFramebuffer = false;
    if (framebuffer) {
      if (framebuffer.propDep) {
        contextDynamic = needsFramebuffer = true;
      } else if (framebuffer.contextDep && contextDynamic) {
        needsFramebuffer = true;
      }
      if (!needsFramebuffer) {
        emitPollFramebuffer(env, batch, framebuffer);
      }
    } else {
      emitPollFramebuffer(env, batch, null);
    }

    // viewport is weird because it can affect context vars
    if (args.state.viewport && args.state.viewport.propDep) {
      contextDynamic = true;
    }

    function isInnerDefn (defn) {
      return (defn.contextDep && contextDynamic) || defn.propDep
    }

    // set webgl options
    emitPollState(env, batch, args);
    emitSetOptions(env, batch, args.state, function (defn) {
      return !isInnerDefn(defn)
    });

    if (!args.profile || !isInnerDefn(args.profile)) {
      emitProfile(env, batch, args, false, 'a1');
    }

    // Save these values to args so that the batch body routine can use them
    args.contextDep = contextDynamic;
    args.needsContext = needsContext;
    args.needsFramebuffer = needsFramebuffer;

    // determine if shader is dynamic
    var progDefn = args.shader.progVar;
    if ((progDefn.contextDep && contextDynamic) || progDefn.propDep) {
      emitBatchBody(
        env,
        batch,
        args,
        null);
    } else {
      var PROGRAM = progDefn.append(env, batch);
      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');
      if (args.shader.program) {
        emitBatchBody(
          env,
          batch,
          args,
          args.shader.program);
      } else {
        var batchCache = env.global.def('{}');
        var PROG_ID = batch.def(PROGRAM, '.id');
        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');
        batch(
          env.cond(CACHED_PROC)
            .then(CACHED_PROC, '.call(this,a0,a1);')
            .else(
              CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=',
              env.link(function (program) {
                return createBody(emitBatchBody, env, args, program, 2)
              }), '(', PROGRAM, ');',
              CACHED_PROC, '.call(this,a0,a1);'));
      }
    }

    if (Object.keys(args.state).length > 0) {
      batch(env.shared.current, '.dirty=true;');
    }
  }

  // ===================================================
  // ===================================================
  // SCOPE COMMAND
  // ===================================================
  // ===================================================
  function emitScopeProc (env, args) {
    var scope = env.proc('scope', 3);
    env.batchId = 'a2';

    var shared = env.shared;
    var CURRENT_STATE = shared.current;

    emitContext(env, scope, args.context);

    if (args.framebuffer) {
      args.framebuffer.append(env, scope);
    }

    sortState(Object.keys(args.state)).forEach(function (name) {
      var defn = args.state[name];
      var value = defn.append(env, scope);
      if (isArrayLike(value)) {
        value.forEach(function (v, i) {
          scope.set(env.next[name], '[' + i + ']', v);
        });
      } else {
        scope.set(shared.next, '.' + name, value);
      }
    });

    emitProfile(env, scope, args, true, true)

    ;[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(
      function (opt) {
        var variable = args.draw[opt];
        if (!variable) {
          return
        }
        scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));
      });

    Object.keys(args.uniforms).forEach(function (opt) {
      scope.set(
        shared.uniforms,
        '[' + stringStore.id(opt) + ']',
        args.uniforms[opt].append(env, scope));
    });

    Object.keys(args.attributes).forEach(function (name) {
      var record = args.attributes[name].append(env, scope);
      var scopeAttrib = env.scopeAttrib(name);
      Object.keys(new AttributeRecord()).forEach(function (prop) {
        scope.set(scopeAttrib, '.' + prop, record[prop]);
      });
    });

    function saveShader (name) {
      var shader = args.shader[name];
      if (shader) {
        scope.set(shared.shader, '.' + name, shader.append(env, scope));
      }
    }
    saveShader(S_VERT);
    saveShader(S_FRAG);

    if (Object.keys(args.state).length > 0) {
      scope(CURRENT_STATE, '.dirty=true;');
      scope.exit(CURRENT_STATE, '.dirty=true;');
    }

    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');
  }

  function isDynamicObject (object) {
    if (typeof object !== 'object' || isArrayLike(object)) {
      return
    }
    var props = Object.keys(object);
    for (var i = 0; i < props.length; ++i) {
      if (dynamic.isDynamic(object[props[i]])) {
        return true
      }
    }
    return false
  }

  function splatObject (env, options, name) {
    var object = options.static[name];
    if (!object || !isDynamicObject(object)) {
      return
    }

    var globals = env.global;
    var keys = Object.keys(object);
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    var objectRef = env.global.def('{}');
    keys.forEach(function (key) {
      var value = object[key];
      if (dynamic.isDynamic(value)) {
        if (typeof value === 'function') {
          value = object[key] = dynamic.unbox(value);
        }
        var deps = createDynamicDecl(value, null);
        thisDep = thisDep || deps.thisDep;
        propDep = propDep || deps.propDep;
        contextDep = contextDep || deps.contextDep;
      } else {
        globals(objectRef, '.', key, '=');
        switch (typeof value) {
          case 'number':
            globals(value);
            break
          case 'string':
            globals('"', value, '"');
            break
          case 'object':
            if (Array.isArray(value)) {
              globals('[', value.join(), ']');
            }
            break
          default:
            globals(env.link(value));
            break
        }
        globals(';');
      }
    });

    function appendBlock (env, block) {
      keys.forEach(function (key) {
        var value = object[key];
        if (!dynamic.isDynamic(value)) {
          return
        }
        var ref = env.invoke(block, value);
        block(objectRef, '.', key, '=', ref, ';');
      });
    }

    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
      thisDep: thisDep,
      contextDep: contextDep,
      propDep: propDep,
      ref: objectRef,
      append: appendBlock
    });
    delete options.static[name];
  }

  // ===========================================================================
  // ===========================================================================
  // MAIN DRAW COMMAND
  // ===========================================================================
  // ===========================================================================
  function compileCommand (options, attributes, uniforms, context, stats) {
    var env = createREGLEnvironment();

    // link stats, so that we can easily access it in the program.
    env.stats = env.link(stats);

    // splat options and attributes to allow for dynamic nested properties
    Object.keys(attributes.static).forEach(function (key) {
      splatObject(env, attributes, key);
    });
    NESTED_OPTIONS.forEach(function (name) {
      splatObject(env, options, name);
    });

    var args = parseArguments(options, attributes, uniforms, context, env);

    emitDrawProc(env, args);
    emitScopeProc(env, args);
    emitBatchProc(env, args);

    return env.compile()
  }

  // ===========================================================================
  // ===========================================================================
  // POLL / REFRESH
  // ===========================================================================
  // ===========================================================================
  return {
    next: nextState,
    current: currentState,
    procs: (function () {
      var env = createREGLEnvironment();
      var poll = env.proc('poll');
      var refresh = env.proc('refresh');
      var common = env.block();
      poll(common);
      refresh(common);

      var shared = env.shared;
      var GL = shared.gl;
      var NEXT_STATE = shared.next;
      var CURRENT_STATE = shared.current;

      common(CURRENT_STATE, '.dirty=false;');

      emitPollFramebuffer(env, poll);
      emitPollFramebuffer(env, refresh, null, true);

      // Refresh updates all attribute state changes
      var INSTANCING;
      if (extInstancing) {
        INSTANCING = env.link(extInstancing);
      }
      for (var i = 0; i < limits.maxAttributes; ++i) {
        var BINDING = refresh.def(shared.attributes, '[', i, ']');
        var ifte = env.cond(BINDING, '.buffer');
        ifte.then(
          GL, '.enableVertexAttribArray(', i, ');',
          GL, '.bindBuffer(',
            GL_ARRAY_BUFFER$1, ',',
            BINDING, '.buffer.buffer);',
          GL, '.vertexAttribPointer(',
            i, ',',
            BINDING, '.size,',
            BINDING, '.type,',
            BINDING, '.normalized,',
            BINDING, '.stride,',
            BINDING, '.offset);'
        ).else(
          GL, '.disableVertexAttribArray(', i, ');',
          GL, '.vertexAttrib4f(',
            i, ',',
            BINDING, '.x,',
            BINDING, '.y,',
            BINDING, '.z,',
            BINDING, '.w);',
          BINDING, '.buffer=null;');
        refresh(ifte);
        if (extInstancing) {
          refresh(
            INSTANCING, '.vertexAttribDivisorANGLE(',
            i, ',',
            BINDING, '.divisor);');
        }
      }

      Object.keys(GL_FLAGS).forEach(function (flag) {
        var cap = GL_FLAGS[flag];
        var NEXT = common.def(NEXT_STATE, '.', flag);
        var block = env.block();
        block('if(', NEXT, '){',
          GL, '.enable(', cap, ')}else{',
          GL, '.disable(', cap, ')}',
          CURRENT_STATE, '.', flag, '=', NEXT, ';');
        refresh(block);
        poll(
          'if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){',
          block,
          '}');
      });

      Object.keys(GL_VARIABLES).forEach(function (name) {
        var func = GL_VARIABLES[name];
        var init = currentState[name];
        var NEXT, CURRENT;
        var block = env.block();
        block(GL, '.', func, '(');
        if (isArrayLike(init)) {
          var n = init.length;
          NEXT = env.global.def(NEXT_STATE, '.', name);
          CURRENT = env.global.def(CURRENT_STATE, '.', name);
          block(
            loop(n, function (i) {
              return NEXT + '[' + i + ']'
            }), ');',
            loop(n, function (i) {
              return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];'
            }).join(''));
          poll(
            'if(', loop(n, function (i) {
              return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']'
            }).join('||'), '){',
            block,
            '}');
        } else {
          NEXT = common.def(NEXT_STATE, '.', name);
          CURRENT = common.def(CURRENT_STATE, '.', name);
          block(
            NEXT, ');',
            CURRENT_STATE, '.', name, '=', NEXT, ';');
          poll(
            'if(', NEXT, '!==', CURRENT, '){',
            block,
            '}');
        }
        refresh(block);
      });

      return env.compile()
    })(),
    compile: compileCommand
  }
}

function stats () {
  return {
    bufferCount: 0,
    elementsCount: 0,
    framebufferCount: 0,
    shaderCount: 0,
    textureCount: 0,
    cubeCount: 0,
    renderbufferCount: 0,
    maxTextureUnits: 0
  }
}

var GL_QUERY_RESULT_EXT = 0x8866;
var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
var GL_TIME_ELAPSED_EXT = 0x88BF;

var createTimer = function (gl, extensions) {
  if (!extensions.ext_disjoint_timer_query) {
    return null
  }

  // QUERY POOL BEGIN
  var queryPool = [];
  function allocQuery () {
    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT()
  }
  function freeQuery (query) {
    queryPool.push(query);
  }
  // QUERY POOL END

  var pendingQueries = [];
  function beginQuery (stats) {
    var query = allocQuery();
    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
    pendingQueries.push(query);
    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);
  }

  function endQuery () {
    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
  }

  //
  // Pending stats pool.
  //
  function PendingStats () {
    this.startQueryIndex = -1;
    this.endQueryIndex = -1;
    this.sum = 0;
    this.stats = null;
  }
  var pendingStatsPool = [];
  function allocPendingStats () {
    return pendingStatsPool.pop() || new PendingStats()
  }
  function freePendingStats (pendingStats) {
    pendingStatsPool.push(pendingStats);
  }
  // Pending stats pool end

  var pendingStats = [];
  function pushScopeStats (start, end, stats) {
    var ps = allocPendingStats();
    ps.startQueryIndex = start;
    ps.endQueryIndex = end;
    ps.sum = 0;
    ps.stats = stats;
    pendingStats.push(ps);
  }

  // we should call this at the beginning of the frame,
  // in order to update gpuTime
  var timeSum = [];
  var queryPtr = [];
  function update () {
    var ptr, i;

    var n = pendingQueries.length;
    if (n === 0) {
      return
    }

    // Reserve space
    queryPtr.length = Math.max(queryPtr.length, n + 1);
    timeSum.length = Math.max(timeSum.length, n + 1);
    timeSum[0] = 0;
    queryPtr[0] = 0;

    // Update all pending timer queries
    var queryTime = 0;
    ptr = 0;
    for (i = 0; i < pendingQueries.length; ++i) {
      var query = pendingQueries[i];
      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
        freeQuery(query);
      } else {
        pendingQueries[ptr++] = query;
      }
      timeSum[i + 1] = queryTime;
      queryPtr[i + 1] = ptr;
    }
    pendingQueries.length = ptr;

    // Update all pending stat queries
    ptr = 0;
    for (i = 0; i < pendingStats.length; ++i) {
      var stats = pendingStats[i];
      var start = stats.startQueryIndex;
      var end = stats.endQueryIndex;
      stats.sum += timeSum[end] - timeSum[start];
      var startPtr = queryPtr[start];
      var endPtr = queryPtr[end];
      if (endPtr === startPtr) {
        stats.stats.gpuTime += stats.sum / 1e6;
        freePendingStats(stats);
      } else {
        stats.startQueryIndex = startPtr;
        stats.endQueryIndex = endPtr;
        pendingStats[ptr++] = stats;
      }
    }
    pendingStats.length = ptr;
  }

  return {
    beginQuery: beginQuery,
    endQuery: endQuery,
    pushScopeStats: pushScopeStats,
    update: update,
    getNumPendingQueries: function () {
      return pendingQueries.length
    },
    clear: function () {
      queryPool.push.apply(queryPool, pendingQueries);
      for (var i = 0; i < queryPool.length; i++) {
        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
      }
      pendingQueries.length = 0;
      queryPool.length = 0;
    },
    restore: function () {
      pendingQueries.length = 0;
      queryPool.length = 0;
    }
  }
};

var GL_COLOR_BUFFER_BIT = 16384;
var GL_DEPTH_BUFFER_BIT = 256;
var GL_STENCIL_BUFFER_BIT = 1024;

var GL_ARRAY_BUFFER = 34962;

var CONTEXT_LOST_EVENT = 'webglcontextlost';
var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';

var DYN_PROP = 1;
var DYN_CONTEXT = 2;
var DYN_STATE = 3;

function find (haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) {
      return i
    }
  }
  return -1
}

function wrapREGL (args) {
  var config = parseArgs(args);
  if (!config) {
    return null
  }

  var gl = config.gl;
  var glAttributes = gl.getContextAttributes();
  var contextLost = gl.isContextLost();

  var extensionState = createExtensionCache(gl, config);
  if (!extensionState) {
    return null
  }

  var stringStore = createStringStore();
  var stats$$1 = stats();
  var extensions = extensionState.extensions;
  var timer = createTimer(gl, extensions);

  var START_TIME = clock();
  var WIDTH = gl.drawingBufferWidth;
  var HEIGHT = gl.drawingBufferHeight;

  var contextState = {
    tick: 0,
    time: 0,
    viewportWidth: WIDTH,
    viewportHeight: HEIGHT,
    framebufferWidth: WIDTH,
    framebufferHeight: HEIGHT,
    drawingBufferWidth: WIDTH,
    drawingBufferHeight: HEIGHT,
    pixelRatio: config.pixelRatio
  };
  var uniformState = {};
  var drawState = {
    elements: null,
    primitive: 4, // GL_TRIANGLES
    count: -1,
    offset: 0,
    instances: -1
  };

  var limits = wrapLimits(gl, extensions);
  var attributeState = wrapAttributeState(
    gl,
    extensions,
    limits,
    stringStore);
  var bufferState = wrapBufferState(
    gl,
    stats$$1,
    config,
    attributeState);
  var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
  var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
  var textureState = createTextureSet(
    gl,
    extensions,
    limits,
    function () { core.procs.poll(); },
    contextState,
    stats$$1,
    config);
  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
  var framebufferState = wrapFBOState(
    gl,
    extensions,
    limits,
    textureState,
    renderbufferState,
    stats$$1);
  var core = reglCore(
    gl,
    stringStore,
    extensions,
    limits,
    bufferState,
    elementState,
    textureState,
    framebufferState,
    uniformState,
    attributeState,
    shaderState,
    drawState,
    contextState,
    timer,
    config);
  var readPixels = wrapReadPixels(
    gl,
    framebufferState,
    core.procs.poll,
    contextState,
    glAttributes, extensions, limits);

  var nextState = core.next;
  var canvas = gl.canvas;

  var rafCallbacks = [];
  var lossCallbacks = [];
  var restoreCallbacks = [];
  var destroyCallbacks = [config.onDestroy];

  var activeRAF = null;
  function handleRAF () {
    if (rafCallbacks.length === 0) {
      if (timer) {
        timer.update();
      }
      activeRAF = null;
      return
    }

    // schedule next animation frame
    activeRAF = raf.next(handleRAF);

    // poll for changes
    poll();

    // fire a callback for all pending rafs
    for (var i = rafCallbacks.length - 1; i >= 0; --i) {
      var cb = rafCallbacks[i];
      if (cb) {
        cb(contextState, null, 0);
      }
    }

    // flush all pending webgl calls
    gl.flush();

    // poll GPU timers *after* gl.flush so we don't delay command dispatch
    if (timer) {
      timer.update();
    }
  }

  function startRAF () {
    if (!activeRAF && rafCallbacks.length > 0) {
      activeRAF = raf.next(handleRAF);
    }
  }

  function stopRAF () {
    if (activeRAF) {
      raf.cancel(handleRAF);
      activeRAF = null;
    }
  }

  function handleContextLoss (event) {
    event.preventDefault();

    // set context lost flag
    contextLost = true;

    // pause request animation frame
    stopRAF();

    // lose context
    lossCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function handleContextRestored (event) {
    // clear error code
    gl.getError();

    // clear context lost flag
    contextLost = false;

    // refresh state
    extensionState.restore();
    shaderState.restore();
    bufferState.restore();
    textureState.restore();
    renderbufferState.restore();
    framebufferState.restore();
    if (timer) {
      timer.restore();
    }

    // refresh state
    core.procs.refresh();

    // restart RAF
    startRAF();

    // restore context
    restoreCallbacks.forEach(function (cb) {
      cb();
    });
  }

  if (canvas) {
    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
  }

  function destroy () {
    rafCallbacks.length = 0;
    stopRAF();

    if (canvas) {
      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
    }

    shaderState.clear();
    framebufferState.clear();
    renderbufferState.clear();
    textureState.clear();
    elementState.clear();
    bufferState.clear();

    if (timer) {
      timer.clear();
    }

    destroyCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function compileProcedure (options) {
    check$1(!!options, 'invalid args to regl({...})');
    check$1.type(options, 'object', 'invalid args to regl({...})');

    function flattenNestedOptions (options) {
      var result = extend({}, options);
      delete result.uniforms;
      delete result.attributes;
      delete result.context;

      if ('stencil' in result && result.stencil.op) {
        result.stencil.opBack = result.stencil.opFront = result.stencil.op;
        delete result.stencil.op;
      }

      function merge (name) {
        if (name in result) {
          var child = result[name];
          delete result[name];
          Object.keys(child).forEach(function (prop) {
            result[name + '.' + prop] = child[prop];
          });
        }
      }
      merge('blend');
      merge('depth');
      merge('cull');
      merge('stencil');
      merge('polygonOffset');
      merge('scissor');
      merge('sample');

      return result
    }

    function separateDynamic (object) {
      var staticItems = {};
      var dynamicItems = {};
      Object.keys(object).forEach(function (option) {
        var value = object[option];
        if (dynamic.isDynamic(value)) {
          dynamicItems[option] = dynamic.unbox(value, option);
        } else {
          staticItems[option] = value;
        }
      });
      return {
        dynamic: dynamicItems,
        static: staticItems
      }
    }

    // Treat context variables separate from other dynamic variables
    var context = separateDynamic(options.context || {});
    var uniforms = separateDynamic(options.uniforms || {});
    var attributes = separateDynamic(options.attributes || {});
    var opts = separateDynamic(flattenNestedOptions(options));

    var stats$$1 = {
      gpuTime: 0.0,
      cpuTime: 0.0,
      count: 0
    };

    var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);

    var draw = compiled.draw;
    var batch = compiled.batch;
    var scope = compiled.scope;

    // FIXME: we should modify code generation for batch commands so this
    // isn't necessary
    var EMPTY_ARRAY = [];
    function reserve (count) {
      while (EMPTY_ARRAY.length < count) {
        EMPTY_ARRAY.push(null);
      }
      return EMPTY_ARRAY
    }

    function REGLCommand (args, body) {
      var i;
      if (contextLost) {
        check$1.raise('context lost');
      }
      if (typeof args === 'function') {
        return scope.call(this, null, args, 0)
      } else if (typeof body === 'function') {
        if (typeof args === 'number') {
          for (i = 0; i < args; ++i) {
            scope.call(this, null, body, i);
          }
          return
        } else if (Array.isArray(args)) {
          for (i = 0; i < args.length; ++i) {
            scope.call(this, args[i], body, i);
          }
          return
        } else {
          return scope.call(this, args, body, 0)
        }
      } else if (typeof args === 'number') {
        if (args > 0) {
          return batch.call(this, reserve(args | 0), args | 0)
        }
      } else if (Array.isArray(args)) {
        if (args.length) {
          return batch.call(this, args, args.length)
        }
      } else {
        return draw.call(this, args)
      }
    }

    return extend(REGLCommand, {
      stats: stats$$1
    })
  }

  var setFBO = framebufferState.setFBO = compileProcedure({
    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')
  });

  function clearImpl (_, options) {
    var clearFlags = 0;
    core.procs.poll();

    var c = options.color;
    if (c) {
      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
      clearFlags |= GL_COLOR_BUFFER_BIT;
    }
    if ('depth' in options) {
      gl.clearDepth(+options.depth);
      clearFlags |= GL_DEPTH_BUFFER_BIT;
    }
    if ('stencil' in options) {
      gl.clearStencil(options.stencil | 0);
      clearFlags |= GL_STENCIL_BUFFER_BIT;
    }

    check$1(!!clearFlags, 'called regl.clear with no buffer specified');
    gl.clear(clearFlags);
  }

  function clear (options) {
    check$1(
      typeof options === 'object' && options,
      'regl.clear() takes an object as input');
    if ('framebuffer' in options) {
      if (options.framebuffer &&
          options.framebuffer_reglType === 'framebufferCube') {
        for (var i = 0; i < 6; ++i) {
          setFBO(extend({
            framebuffer: options.framebuffer.faces[i]
          }, options), clearImpl);
        }
      } else {
        setFBO(options, clearImpl);
      }
    } else {
      clearImpl(null, options);
    }
  }

  function frame (cb) {
    check$1.type(cb, 'function', 'regl.frame() callback must be a function');
    rafCallbacks.push(cb);

    function cancel () {
      // FIXME:  should we check something other than equals cb here?
      // what if a user calls frame twice with the same callback...
      //
      var i = find(rafCallbacks, cb);
      check$1(i >= 0, 'cannot cancel a frame twice');
      function pendingCancel () {
        var index = find(rafCallbacks, pendingCancel);
        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
        rafCallbacks.length -= 1;
        if (rafCallbacks.length <= 0) {
          stopRAF();
        }
      }
      rafCallbacks[i] = pendingCancel;
    }

    startRAF();

    return {
      cancel: cancel
    }
  }

  // poll viewport
  function pollViewport () {
    var viewport = nextState.viewport;
    var scissorBox = nextState.scissor_box;
    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
    contextState.viewportWidth =
      contextState.framebufferWidth =
      contextState.drawingBufferWidth =
      viewport[2] =
      scissorBox[2] = gl.drawingBufferWidth;
    contextState.viewportHeight =
      contextState.framebufferHeight =
      contextState.drawingBufferHeight =
      viewport[3] =
      scissorBox[3] = gl.drawingBufferHeight;
  }

  function poll () {
    contextState.tick += 1;
    contextState.time = now();
    pollViewport();
    core.procs.poll();
  }

  function refresh () {
    pollViewport();
    core.procs.refresh();
    if (timer) {
      timer.update();
    }
  }

  function now () {
    return (clock() - START_TIME) / 1000.0
  }

  refresh();

  function addListener (event, callback) {
    check$1.type(callback, 'function', 'listener callback must be a function');

    var callbacks;
    switch (event) {
      case 'frame':
        return frame(callback)
      case 'lost':
        callbacks = lossCallbacks;
        break
      case 'restore':
        callbacks = restoreCallbacks;
        break
      case 'destroy':
        callbacks = destroyCallbacks;
        break
      default:
        check$1.raise('invalid event, must be one of frame,lost,restore,destroy');
    }

    callbacks.push(callback);
    return {
      cancel: function () {
        for (var i = 0; i < callbacks.length; ++i) {
          if (callbacks[i] === callback) {
            callbacks[i] = callbacks[callbacks.length - 1];
            callbacks.pop();
            return
          }
        }
      }
    }
  }

  var regl = extend(compileProcedure, {
    // Clear current FBO
    clear: clear,

    // Short cuts for dynamic variables
    prop: dynamic.define.bind(null, DYN_PROP),
    context: dynamic.define.bind(null, DYN_CONTEXT),
    this: dynamic.define.bind(null, DYN_STATE),

    // executes an empty draw command
    draw: compileProcedure({}),

    // Resources
    buffer: function (options) {
      return bufferState.create(options, GL_ARRAY_BUFFER, false, false)
    },
    elements: function (options) {
      return elementState.create(options, false)
    },
    texture: textureState.create2D,
    cube: textureState.createCube,
    renderbuffer: renderbufferState.create,
    framebuffer: framebufferState.create,
    framebufferCube: framebufferState.createCube,

    // Expose context attributes
    attributes: glAttributes,

    // Frame rendering
    frame: frame,
    on: addListener,

    // System limits
    limits: limits,
    hasExtension: function (name) {
      return limits.extensions.indexOf(name.toLowerCase()) >= 0
    },

    // Read pixels
    read: readPixels,

    // Destroy regl and all associated resources
    destroy: destroy,

    // Direct GL state manipulation
    _gl: gl,
    _refresh: refresh,

    poll: function () {
      poll();
      if (timer) {
        timer.update();
      }
    },

    // Current time
    now: now,

    // regl Statistics Information
    stats: stats$$1
  });

  config.onDone(null, regl);

  return regl
}

return wrapREGL;

})));

});

var gl_rgb2hsv = "\n      vec3 rgb2hsv(vec3 rgb) {\n        float cmin = min(rgb.r, min(rgb.g, rgb.b));\n        float cmax = max(rgb.r, max(rgb.g, rgb.b));\n        float d = cmax - cmin;\n        float eps = 0.00001;\n        if (d < eps || cmax < eps) {\n          return vec3(0, 0, cmax);\n        }\n\n        float _h;\n        if (cmax == rgb.r) {\n          _h = (rgb.g - rgb.b) / d;\n          if (_h < 0.) {\n            _h += 6.;\n          }\n        } else if (cmax == rgb.g) {\n          _h = ((rgb.b - rgb.r) / d) + 2.;\n        } else {\n          _h = ((rgb.r - rgb.g) / d) + 4.;\n        }\n\n        return vec3(_h * 60. * (PI / 180.), d / cmax, cmax);\n      }\n";

var CommandBuilder = function CommandBuilder () {};

CommandBuilder.prototype.buildCommand = function buildCommand (props) {
  this.config = props.config;
  this.state = props.state;
  this.clock = props.clock;
  this.props = props;

  return this.assembleCommand();
};

CommandBuilder.prototype.createDefaultUniforms = function createDefaultUniforms () {
    var this$1 = this;

  var uniforms = new Uniforms();
  uniforms.addUniform('invScreenAspectRatio', 'float', function (ctx) { return ctx.viewportHeight / ctx.viewportWidth; });
  uniforms.addUniform('particleSize', 'float', function (ctx) { return (ctx.viewportWidth / this$1.config.xParticlesCount) * this$1.config.particleScaling; });
  uniforms.addUniform('globalTime', 'int', function (ctx, props) { return props.clock.getTime(); });
  uniforms.addUniform('viewport', 'vec2', function (ctx) { return [ctx.viewportWidth, ctx.viewportHeight]; });
  uniforms.addUniform('background_color', 'vec4', function () { return this$1.config.backgroundColor; });
  return uniforms;
};

CommandBuilder.prepareVertexShader = function prepareVertexShader (uniforms) {
  var vertexShader = new Shader();

  vertexShader.attributes += "\n      attribute vec2 texcoord;\n      attribute vec4 rgba_int;\n    ";
  vertexShader.varyings += 'varying vec3 color;\n';
  vertexShader.globals += 'const float PI = 3.14159265;\n';
  // Global library functions
  // TODO make functions a dict (= set) so that users can add them on
  // demand without defining them more than once
  vertexShader.functions += "\n      vec2 getDirectionVector(float angle) {\n        return vec2(cos(angle), sin(angle));\n      }\n      " + gl_rgb2hsv + "\n    ";

  return vertexShader;
};

CommandBuilder.prepareFragmentShader = function prepareFragmentShader () {
  var fragmentShader = new Shader();
  fragmentShader.varyings += 'varying vec3 color;\n';
  fragmentShader.globals += 'const float PI = 3.14159265;\n';
  fragmentShader.functions += gl_rgb2hsv;
  return fragmentShader;
};

CommandBuilder.prototype.assembleCommand = function assembleCommand () {
    var this$1 = this;

  return new Promise(function (res, rej) {
    var uniforms = {};
    var attributes = {
      texcoord: function () { return this$1.state.texcoordsBuffer; },
      rgba_int: function () { return this$1.state.getColorBuffer(); }
    };
    var defaultUniforms = this$1.createDefaultUniforms();
    var vert = CommandBuilder.prepareVertexShader();
    defaultUniforms.compile(vert, uniforms);
    var frag = CommandBuilder.prepareFragmentShader();
    defaultUniforms.compile(frag, null); // default uniforms are already registered
                                         // in uniforms object, therefore pass null
    var result = {
      primitive:'points',
      // TODO This cannot be changed ad-hoc. A new command would be necessary.
      // regl.elements (http://regl.party/api#elements) could be an alternative here
      count:    this$1.config.xParticlesCount * this$1.config.yParticlesCount,
      attributes: attributes,
      uniforms: uniforms,
      depth: { enable: false }
    };

    switch (this$1.config.particleOverlap) {
      case 'add':
        result.blend = {
          enable: true,
          func: { src: 'one', dst: 'one' }
        };
        break;
      case 'alpha blend':
        result.blend = {
          enable: true,
          func: { srcRGB: 'src alpha', srcAlpha: 1, dstRGB: 'one minus src alpha', dstAlpha: 1 }
        };
        break;
      default:
        throw new Error(("Unknown particle overlap mode: " + (this$1.config.particleOverlap)));
    }

    vert.mainBody += "\n        vec3 rgb = rgba_int.rgb / 255.;\n        vec3 hsv = rgb2hsv(rgb);\n        vec3 initialPosition = vec3(texcoord, 0);\n        float pointSize = max(particleSize, 0.);\n\n        vec3 position = initialPosition;\n      ";
    frag.mainBody += "\n        vec3 rgb = color;\n        vec2 frag_coord = (gl_FragCoord.xy - vec2(.5)) / (viewport - vec2(1.));\n        // gl_PointCoord coord system is edge-centered, but it's more\n        // convenient if we center the system at the center of the\n        // fragment (see point_dist below for example)\n        vec2 point_coord = (gl_PointCoord * 2. - vec2(1.)) * vec2(1., -1.);\n        float point_dist = length(point_coord);\n      ";
    var nextEffect = (function () {
      var i = 0;
      var j = 0;
      return function () {
        if (i === this$1.config.effects.length) {
          return null;
        }
        var track = this$1.config.effects[i];
        if (j === track.length) {
          i++;
          j = 0;
          return nextEffect();
        }
        var effect = track[j];
        j = j + 1;
        return effect;
      }
    })();
    var globalId = 0;
    var registerEffects = function (res, rej) {
      var effectConfig = nextEffect();
      if (effectConfig === null) {
        return res();
      }
      var effectUniforms = new Uniforms(globalId);
      var effectAttributes = new Attributes(globalId);
      var effectClass = effectConfig.getEffectClass();
      vert.mainBody += "if (" + (effectConfig.timeBegin) + " <= globalTime && globalTime <= " + (effectConfig.timeEnd) + ") {\n";
      frag.mainBody += "if (" + (effectConfig.timeBegin) + " <= globalTime && globalTime <= " + (effectConfig.timeEnd) + ") {\n";
      effectClass.registerAsync(effectConfig, this$1.props, effectUniforms, vert, frag, effectAttributes)
      .then(function () {
        vert.mainBody += '}\n';
        frag.mainBody += '}\n';

        effectUniforms.compile(vert, uniforms);
        effectAttributes.compile(vert, attributes);
        globalId += 1;
        registerEffects(res, rej);
      }, function (err) {
        reportError(err);
        vert.mainBody += '// error during registration\n}\n';
        frag.mainBody += '// error during registration\n}\n';

        effectUniforms.compile(vert, uniforms);
        effectAttributes.compile(vert, attributes);
        globalId += 1;
        registerEffects(res, rej);
      });
    };
    return new Promise(registerEffects).then(function () {
      vert.mainBody += "\n          color = rgb;\n          gl_PointSize = pointSize;\n          gl_Position = vec4(vec2(2.) * position.xy - vec2(1.), 0., 1.);\n        ";
      var particleShape = this$1.config.particleShape || 'circle';
      var particleFading = this$1.config.particleFading || 'fade-out';
      var particleOverlap =this$1.config.particleOverlap || 'add';
      var insideShape = {
        circle: 'ceil(1. - point_dist)',
        square: '1.',
        // PI/3 = 60 degrees = inner angle of equilateral triangle
        triangle: 'gl_PointCoord.y < 0.933 && gl_PointCoord.y >= 0.067 + abs(point_coord.x/2.) * tan(PI/3.) ? 1. : 0.'
      }[particleShape];
      var fadingFactor = {
        none:     {circle: '1.', square: '1.', triangle: '1.'},
        'fade-out': {
          circle: '(cos(PI * point_dist) + 1.) / 2.',
          square: '1. - max(abs(point_coord.x), abs(point_coord.y))',
          triangle: '1. - length(vec2(.5, .289) - gl_PointCoord)'
        }
      }[particleFading][particleShape];
      var colorAssign = {
        add:         'gl_FragColor = vec4(rgb * fadingFactor, 1);\n',
        'alpha blend': 'gl_FragColor = vec4(rgb, fadingFactor);\n'
      }[particleOverlap];
      frag.mainBody += "\n          float insideShape = " + insideShape + ";\n          float fadingFactor = (" + fadingFactor + ") * insideShape;\n          " + colorAssign + "\n        ";

      result.vert = vert.compile();
      result.frag = frag.compile();

      res(result);
    });
  });
};

var RendererClock = function RendererClock() {
  this.time = -1;
  this.delta = 0;
  this.absTime = Date.now();
  this.period = 1000;
  this.paused = false;
  this.wrapListeners = [];
  this.pauseListeners = [];
};
RendererClock.prototype.frame = function frame () {
    var this$1 = this;

  if (this.paused || this.period === 0) {
    this.delta = 0;
    return;
  }
  if (this.time === -1) {
    // it was requested that we start at zero
    this.absTime = Date.now();
    this.time = 0;
  } else {
    var oldTime = this.absTime;
    this.absTime = Date.now();
    this.delta = this.absTime - oldTime;
    this.time += this.delta;
    while (this.time >= this.period) {
      this.time -= this.period;
      var loop = function ( i ) {
        window.setTimeout(function () { return this$1.wrapListeners[i](); }, 0);
      };

        for (var i = 0; i < this$1.wrapListeners.length; i++) loop( i );
    }
  }
};
RendererClock.prototype.reset = function reset () {
  this.time = -1;
  this.delta = 0;
  this.absTime = Date.now();
};
RendererClock.prototype.setPeriod = function setPeriod (p) {
  this.period = p;
};
RendererClock.prototype.getTime = function getTime () {
  return this.time;
};
RendererClock.prototype.setTime = function setTime (time) {
  this.time = time;
  this.delta = 0;
  this.absTime = Date.now();
};
RendererClock.prototype.getDelta = function getDelta () {
  return this.delta;
};
RendererClock.prototype.getAbsoluteTime = function getAbsoluteTime () {
  return this.absTime;
};
RendererClock.prototype.setPaused = function setPaused (paused) {
    if ( paused === void 0 ) paused = true;

  if (paused !== this.paused) {
    if (!paused) {
      // on unpause
      this.delta = 0;
      this.absTime = Date.now();
    }
    this.paused = paused;
    for (var i = 0; i < this.pauseListeners.length; i++) {
      this.pauseListeners[i](paused);
    }
  }
};
RendererClock.prototype.tooglePause = function tooglePause () {
  this.setPaused(!this.paused);
};
RendererClock.prototype.getPaused = function getPaused () {
  return this.paused;
};
RendererClock.prototype.isPaused = function isPaused () {
  return this.paused;
};
RendererClock.prototype.addWrapListener = function addWrapListener (listener) {
  this.wrapListeners.push(listener);
};
RendererClock.prototype.removeWrapListener = function removeWrapListener (listener) {
  this.wrapListeners.splice(this.wrapListeners.indexOf(listener), 1);
};
RendererClock.prototype.addPauseListener = function addPauseListener (listener) {
  this.pauseListeners.push(listener);
};
RendererClock.prototype.removePauseListener = function removePauseListener (listener) {
  this.pauseListeners.splice(this.pauseListeners.indexOf(listener), 1);
};

var PaintResultCommand = /*@__PURE__*/(function (FullscreenRectCommand$$1) {
  function PaintResultCommand(getResult) {
    FullscreenRectCommand$$1.call(this);
    this.frag = "\n      precision highp float;\n      uniform sampler2D resultTexture;\n      varying vec2 texcoord;\n      void main() {\n        vec3 color = texture2D(resultTexture, texcoord).rgb;\n        gl_FragColor = vec4(color, 1);\n      }\n    ";
    this.uniforms = {
      resultTexture: function () { return getResult().texture; },
    };
  }

  if ( FullscreenRectCommand$$1 ) PaintResultCommand.__proto__ = FullscreenRectCommand$$1;
  PaintResultCommand.prototype = Object.create( FullscreenRectCommand$$1 && FullscreenRectCommand$$1.prototype );
  PaintResultCommand.prototype.constructor = PaintResultCommand;

  return PaintResultCommand;
}(FullscreenRectCommand));

var AccumulationCommand = /*@__PURE__*/(function (FullscreenRectCommand$$1) {
  function AccumulationCommand(getParticles, getHistory, getOutput, agents) {
    FullscreenRectCommand$$1.call(this);
    this.uniforms = {};
    var frag = new Shader();
    var stdUniforms = new Uniforms();
    stdUniforms.addUniform('particleTexture', 'sampler2D', function () { return getParticles().texture; });
    stdUniforms.addUniform('historyTexture', 'sampler2D', function () { return getHistory().texture; });
    stdUniforms.addUniform('globalTime', 'int', function (ctx, props) { return props.clock.getTime(); });
    stdUniforms.compile(frag, this.uniforms);
    frag.varyings += 'varying vec2 texcoord;\n';
    frag.mainBody = "\n      vec3 historyColor = texture2D(historyTexture, texcoord).rgb;\n      vec3 particleColor = texture2D(particleTexture, texcoord).rgb;\n      vec3 accumulationResult = vec3(0.0);\n      int activeAgents = 0;\n\n      " + (AccumulationCommand.fragmentCodeForAgents(agents, frag, this.uniforms)) + "\n\n      if (activeAgents > 0) {\n        accumulationResult /= float(activeAgents);\n      } else {\n        accumulationResult = particleColor;\n      }\n\n      gl_FragColor = vec4(accumulationResult, 1);\n    ";
    this.frag = frag.compile();
    this.framebuffer = function () { return getOutput().framebuffer; };
  }

  if ( FullscreenRectCommand$$1 ) AccumulationCommand.__proto__ = FullscreenRectCommand$$1;
  AccumulationCommand.prototype = Object.create( FullscreenRectCommand$$1 && FullscreenRectCommand$$1.prototype );
  AccumulationCommand.prototype.constructor = AccumulationCommand;
  AccumulationCommand.fragmentCodeForAgents = function fragmentCodeForAgents (agents, shader, uniforms) {
    var code = [];

    var loop = function ( i ) {
      var agent = agents[i];
      var agentUniforms = new Uniforms(i);
      var fadeWeightUniform = agentUniforms.addUniform('fadeWeight', 'float', function (ctx, props) {
        var timeBegin = agent.instance.timeBegin;
        var timeEnd = agent.instance.timeEnd;
        var fadein = agent.instance.config.fadein;
        var fadeout = agent.instance.config.fadeout;
        var t = props.clock.getTime();
        // t in [timeBegin, timeEnd] (guranteed by if below)
        return t < (timeBegin + fadein) ? (t - timeBegin) / fadein :
          t > (timeEnd - fadeout) ? 1 - (t - (timeEnd - fadeout)) / fadeout :
          1;
      });
      code.push(("\n        if (" + (agent.instance.timeBegin) + " <= globalTime && globalTime <= " + (agent.instance.timeEnd) + ") {\n          activeAgents++;\n          vec3 accumulationEffectResult;\n          " + (agent.getFragmentCode(agentUniforms)) + "\n          accumulationResult += mix(particleColor, accumulationEffectResult, " + fadeWeightUniform + ");\n        }\n      "));
      agentUniforms.compile(shader, uniforms);
    };

    for (var i = 0; i < agents.length; i++) loop( i );
    return code.join('\n');
  };

  return AccumulationCommand;
}(FullscreenRectCommand));

/**
 * The RendererPipeline manages the different passes needed to render a
 * single frame. Usually, there is only one single pass required to
 * render a frame. Only when there are accumulation effects, we need
 * more than one render pass, namely for combining the most recent frame
 * with the accumulation buffer.
 */
var RendererPipeline = function RendererPipeline(regl) {
  var this$1 = this;

  this.regl = regl;
  this.mainCommand = null;
  this.accumulationAgents = [];
  this.particleBuffer = new Framebuffer(this.regl);
  this.accuHistoryBuffer = new Framebuffer(this.regl);
  this.resultBuffer = new Framebuffer(this.regl);
  var getResult = function () { return this$1.resultBuffer; };
  this.accumulationCommand = null;
  this.paintResultCommand = this.regl(new PaintResultCommand(getResult));
};
RendererPipeline.prototype.addAccumulationAgent = function addAccumulationAgent (agent) {
  this.accumulationAgents.push(agent);
};
RendererPipeline.prototype.compile = function compile (cmd) {
    var this$1 = this;

  this.mainCommand = cmd;
  var getParticles = function () { return this$1.particleBuffer; };
  var getHistory = function () { return this$1.accuHistoryBuffer; };
  var getOut = function () { return this$1.resultBuffer; };
  this.accumulationCommand = this.regl(
    new AccumulationCommand(getParticles, getHistory, getOut, this.accumulationAgents)
  );
};
RendererPipeline.prototype.reset = function reset (clearColor) {
  this.accumulationAgents.length = 0;
  this.mainCommand = null;
  this.clearColor = clearColor;
};
RendererPipeline.prototype.resize = function resize (width, height) {
  this.particleBuffer.resize(width, height);
  this.accuHistoryBuffer.resize(width, height);
  this.resultBuffer.resize(width, height);
};
RendererPipeline.prototype.run = function run (props) {
    var this$1 = this;
    var assign;

  if (!this.mainCommand) {
    return;
  }
  if (this.accumulationAgents.length === 0 || props.clock.getPaused()) {
    this.regl.clear({ color: this.clearColor });
    this.mainCommand(props);
  } else { // Accumulation is active
    // Do NOT change the buffers AFTER paintResultCommand, because if we
    // pause at some point, the other if() branch above will have the
    // two buffers alrady swapped - which we don't want. resultBuffer
    // should still be resultBuffer
    (assign = [this.resultBuffer, this.accuHistoryBuffer], this.accuHistoryBuffer = assign[0], this.resultBuffer = assign[1]);
    this.particleBuffer.framebuffer.use(function () {
      this$1.regl.clear({color: this$1.clearColor});
      this$1.mainCommand(props);
    });

    this.accumulationCommand(props);
    this.paintResultCommand(props);
  }
};
RendererPipeline.prototype.isValid = function isValid () {
  return this.mainCommand !== null;
};

/// The functions in this file are mainly responsible for interpreting
/// ScalingInfo when mapping image/canvas pixel data onto the particle
/// grid. ScalingInfo itself is a simple description format to give
/// users the possibility to describe this mapping in an intuitive yet
/// limited fashion.

var ScalingInfo = function ScalingInfo(particleCounts, imageScaling, imageCropping, viewport) {
  this.particleCounts = particleCounts; // {x, y}
  this.imageScaling = imageScaling;
  this.imageCropping = imageCropping; // {x, y}
  this.viewport = viewport; // {width, height}
};

function getDefaultPixelParticleMappingParams(imageCanvas, scalingInfo) {
  var w = scalingInfo.particleCounts.x;
  var h = scalingInfo.particleCounts.y;
  var r = {
    sx: 0,
    sy: 0,
    sWidth: imageCanvas.width,
    sHeight: imageCanvas.height,
    dx: 0,
    dy: 0,
    dWidth: w,
    dHeight: h,
  };
  // particles aspect ratio
  r.dAspectRatio = (w / h);
  // source image aspect ratio
  r.sAspectRatio = imageCanvas.width / imageCanvas.height;
  // viewport aspect ratio
  r.vAspectRatio = scalingInfo.viewport.width / scalingInfo.viewport.height;
  // particle aspect ratio
  r.pAspectRatio = r.vAspectRatio / r.dAspectRatio;
  return r;
}

function getCropImageToViewportParams(imageCanvas, scalingInfo) {
  var r = getDefaultPixelParticleMappingParams(imageCanvas, scalingInfo);
  if (r.vAspectRatio > r.sAspectRatio) { // source height will exceed viewport height
    r.sHeight = r.sWidth / r.vAspectRatio;
    if (scalingInfo.imageCropping.y === 'crop-both') {
      r.sy = (imageCanvas.height - r.sHeight) / 2;
    } else if (scalingInfo.imageCropping.y === 'crop-top') {
      r.sy = imageCanvas.height - r.sHeight;
    } else if (scalingInfo.imageCropping.y === 'crop-bottom') {
      r.sy = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.y: ' + scalingInfo.imageCropping.x);
    }
  } else { // source width will exceed dest width
    r.sWidth = r.sHeight * r.vAspectRatio;
    if (scalingInfo.imageCropping.x === 'crop-both') {
      r.sx = (imageCanvas.width - r.sWidth) / 2;
    } else if (scalingInfo.imageCropping.x === 'crop-left') {
      r.sx = imageCanvas.width - r.sWidth;
    } else if (scalingInfo.imageCropping.x === 'crop-right') {
      r.sx = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.x: ' + scalingInfo.imageCropping.x);
    }
  }
  return r;
}

function getFitWidthParams(imageCanvas, scalingInfo) {
  var w = scalingInfo.particleCounts.x;
  var h = scalingInfo.particleCounts.y;
  var r = getDefaultPixelParticleMappingParams(imageCanvas, scalingInfo);
  if (r.vAspectRatio < r.sAspectRatio) { // the picture won't fill the particles. Some rows will remain black
    r.dHeight = w / r.sAspectRatio * r.pAspectRatio;
    if (scalingInfo.imageCropping.y === 'crop-both') {
      r.dy = (h - r.dHeight) / 2;
    } else if (scalingInfo.imageCropping.y === 'crop-top') {
      r.dy = h - r.dHeight;
    } else if (scalingInfo.imageCropping.y === 'crop-bottom') {
      r.dy = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.y: ' + scalingInfo.imageCropping.y);
    }
  } else { // pixels rows at the top and/or bottom will need to be discarded
    r.sHeight = imageCanvas.width / r.vAspectRatio;
    if (scalingInfo.imageCropping.y === 'crop-both') {
      r.sy = (imageCanvas.height - r.sHeight) / 2;
    } else if (scalingInfo.imageCropping.y === 'crop-top') {
      r.sy = imageCanvas.height  - r.sHeight;
    } else if (scalingInfo.imageCropping.y === 'crop-bottom') {
      r.sy = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.y: ' + scalingInfo.imageCropping.y);
    }
  }
  return r;
}

function getFitHeightParams(imageCanvas, scalingInfo) {
  var w = scalingInfo.particleCounts.x;
  var h = scalingInfo.particleCounts.y;
  var r = getDefaultPixelParticleMappingParams(imageCanvas, scalingInfo);
  if (r.vAspectRatio > r.sAspectRatio) { // the picture won't fill the particles. Some columns will remain black
    r.dWidth = h * r.sAspectRatio / r.pAspectRatio;
    if (scalingInfo.imageCropping.x === 'crop-both') {
      r.dx = (w - r.dWidth) / 2;
    } else if (scalingInfo.imageCropping.x === 'crop-left') {
      r.dx = w - r.dWidth;
    } else if (scalingInfo.imageCropping.x === 'crop-right') {
      r.dx = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.x: ' + scalingInfo.imageCropping.x);
    }
  } else { // pixels columns to the left and/or right will need to be discarded
    r.sWidth = imageCanvas.height * r.vAspectRatio;
    if (scalingInfo.imageCropping.x === 'crop-both') {
      r.sx = (imageCanvas.width - r.sWidth) / 2;
    } else if (scalingInfo.imageCropping.x === 'crop-left') {
      r.sx = imageCanvas.width - r.sWidth;
    } else if (scalingInfo.imageCropping.x === 'crop-right') {
      r.sx = 0;
    } else {
      throw new Error('Illegal value for scalingInfo.imageCropping.x: ' + scalingInfo.imageCropping.x);
    }
  }
  return r;
}

function mapImageToParticles(imageCanvas, scalingInfo) {
  var w = scalingInfo.particleCounts.x;
  var h = scalingInfo.particleCounts.y;
  if (w < 1 || h < 1) {
    throw new Error('Illegal values for particle counts: x=' + w + ', y=' + h);
  }
  var scalingCanvas = document.createElement('canvas');
  var scalingContext = scalingCanvas.getContext('2d');
  var scalingParams = null;
  if (scalingInfo.imageScaling === 'crop-to-viewport') {
    scalingParams = getCropImageToViewportParams(imageCanvas, scalingInfo);
  } else if (scalingInfo.imageScaling === 'fit-image') {
    var vAspectRatio = scalingInfo.viewport.width / scalingInfo.viewport.height;
    if (imageCanvas.width / imageCanvas.height > vAspectRatio) {
      scalingParams = getFitWidthParams(imageCanvas, scalingInfo);
    } else {
      scalingParams = getFitHeightParams(imageCanvas, scalingInfo);
    }
  } else if (scalingInfo.imageScaling === 'fit-width') {
    scalingParams = getFitWidthParams(imageCanvas, scalingInfo);
  } else if (scalingInfo.imageScaling === 'fit-height') {
    scalingParams = getFitHeightParams(imageCanvas, scalingInfo);
  } else if (scalingInfo.imageScaling === 'scale-to-viewport') {
    scalingParams = getDefaultPixelParticleMappingParams(imageCanvas, scalingInfo);
  } else {
    throw new Error('Illegal value for scalingInfo.imageScaling: "' + scalingInfo.imageScaling + '"');
  }
  scalingCanvas.width = w;
  scalingCanvas.height = h;
  var P = scalingParams;
  scalingContext.drawImage(imageCanvas, P.sx, P.sy, P.sWidth, P.sHeight, P.dx, P.dy, P.dWidth, P.dHeight);
  return scalingContext.getImageData(0, 0, scalingCanvas.width, scalingCanvas.height);
}

function domImgToCanvas(img) {
  var fullresCanvas = document.createElement('canvas');
  var fullresContext = fullresCanvas.getContext('2d');
  fullresCanvas.width = img.naturalWidth;
  fullresCanvas.height = img.naturalHeight;
  // flipped y-axis
  fullresContext.translate(0, img.naturalHeight);
  fullresContext.scale(1, -1);
  fullresContext.drawImage(img, 0, 0);
  return fullresCanvas;
}

var ParticleData = function ParticleData(imageData, regl, scalingInfo) {
  this.rgba = mapImageToParticles(imageData, scalingInfo).data;
};

var ParticleDataStoreEntry = function ParticleDataStoreEntry(imageCanvas, imageScaling, imageCropping, particleData) {
  this.imageCanvas = imageCanvas || null;
  this.imageScaling = imageScaling;
  this.imageCropping = imageCropping;
  this.particleData = particleData || null;
};
ParticleDataStoreEntry.prototype.destroy = function destroy () {
  if (this.particleData !== null) {
    this.particleData = null;
  }
  this.imageCanvas = null;
};

/**
 * Encapsulates the parts of the render pipeline which are subject to
 * dynamic change, i.e. data that can be changed by effects.
 * 
 * In contrast to this, data inside a `config` object is always immutable
 * (as long as the user does not request changes to be applied - which
 * generates a new `config` object).
 * The most important thing to note is that both `state` *and* `config`
 * objects "live on" if the other object is changed, whereas only `state`
 * is ever influenced by `config` - never the other way around.
 * E.g. config's xParticleCount influences state's particleData.
 * On the other hand, `state` does not need to be serializable
 */
var RendererState = function RendererState(regl) {
  this.regl = regl;
  this.pipeline = new RendererPipeline(regl);

  // Properties
  this.config = null;
  this.particleData = -1;
  this.particleDataStore = [new ParticleDataStoreEntry(null, '', {x: '', y: ''}, null)];
  this.buffers = [];
  this.hooks = [];
  this.width = 0;
  this.height = 0;
  this.texcoordsBuffer = null;
  this.colorBuffer = null;
  this.dataInBuffer = -1;
};
RendererState.prototype.adaptToConfig = function adaptToConfig (config) {
  this.config = config;
  this.pipeline.reset(config.backgroundColor);

  var pw = config.xParticlesCount;
  var ph = config.yParticlesCount;

  // texcoordsBuffer
  if (this.texcoordsBuffer !== null) {
    this.texcoordsBuffer.destroy();
  }
  var pixelIndices = Array.from(Array(pw * ph).keys());
  var texcoords = pixelIndices.map(function (i) { return [((i % pw) + 0.5) / pw, (Math.floor(i / pw) + 0.5) / ph]; });
  this.texcoordsBuffer = this.regl.buffer(texcoords);
  // colorBuffer
  if (this.colorBuffer !== null) {
    this.colorBuffer.destroy();
  }
  this.dataInBuffer = -1;
  this.colorBuffer = this.regl.buffer({usage: 'stream', type: 'uint8', length: 4 * ph * pw});

  // Update default particle data
  var DPD = this.particleDataStore[0];
  var defaultImg = DPD.imageCanvas;
  if (defaultImg !== null) {
    var scalingInfo = new ScalingInfo(
      {x: pw, y: ph},
      DPD.imageScaling, DPD.imageCropping,
      {width: this.getWidth(), height: this.getHeight()}
    );
    DPD.destroy();
    this.particleDataStore[0] = new ParticleDataStoreEntry(
      defaultImg, scalingInfo.imageScaling, scalingInfo.imageCropping,
      new ParticleData(defaultImg, this.regl, scalingInfo)
    );
  }
  // release resources
  for (var i = 1; i < this.particleDataStore.length; i++) {
    this.particleDataStore[i].destroy();
  }
  this.particleDataStore.length = 1;
  this.particleData = 0;

  for (var i$1 = 0; i$1 < this.buffers.length; i$1++) {
    this.buffers[i$1].destroy();
  }
  this.buffers.length = 0;
  // run hooks
  for (var i$2 = 0; i$2 < this.hooks.length; i$2++) {
    this.hooks[i$2]();
  }
};
RendererState.prototype.setParticleData = function setParticleData (id) {
  this.particleData = id;
};
RendererState.prototype.createParticleData = function createParticleData (imgData, imageScaling, imageCropping) {
  if (!imageScaling) {
    console.warn('No imageScaling given. Falling back to default value');
    imageScaling = 'crop-to-viewport';
  }
  if (!imageCropping) {
    console.warn('No imageCropping given. Falling back to default value');
    imageCropping = {x: 'crop-both', y: 'crop-both'};
  }
  var scalingInfo = new ScalingInfo(
    {x: this.config.xParticlesCount, y: this.config.yParticlesCount},
    imageScaling, imageCropping,
    {width: this.getWidth(), height: this.getHeight()}
  );
  this.particleDataStore.push(new ParticleDataStoreEntry(
    imgData, imageScaling, imageCropping,
    new ParticleData(imgData, this.regl, scalingInfo)
  ));
  return this.particleDataStore.length - 1;
};
RendererState.prototype.createParticleDataFromDomImg = function createParticleDataFromDomImg (domImg, imageScaling, imageCropping) {
  return this.createParticleData(domImgToCanvas(domImg), imageScaling, imageCropping);
};
RendererState.prototype.destroyParticleData = function destroyParticleData (id) {
  // Some effects (like webcam) may be a bit late to the party after
  // the state has been reset
  if (this.particleDataStore[id]) {
    this.particleDataStore[id].destroy();
  } else {
    console.warn('Trying to destroy ParticleData that doesn\'t exist');
  }
};
RendererState.prototype.getColorBuffer = function getColorBuffer () {
  if (this.particleData < 0) {
    return null;
  }
  if (this.dataInBuffer !== this.particleData) {
    var data = this.particleDataStore[this.particleData].particleData.rgba;
    this.colorBuffer(data);
    this.dataInBuffer = this.particleData;
  }
  return this.colorBuffer;
};
RendererState.prototype.createBuffer = function createBuffer () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  var buf = (ref = this.regl).buffer.apply(ref, args);
  this.buffers.push(buf);
  return { id: this.buffers.length - 1, buffer: buf };
};
RendererState.prototype.destroyBuffer = function destroyBuffer (id) {
  if (id < 0 || id >= this.buffers.length) {
    throw new Error('Illegal buffer id given for destruction');
  }
  this.buffers[id].destroy();
  this.buffers.splice(id, 1);
};
RendererState.prototype.isValid = function isValid () {
  return this.particleData >= 0 && this.pipeline.isValid();
};
/// Sets the image, but will not change the current default particle
/// data. Rebuilding the default particle data will only happen on
/// adaptToConfig
RendererState.prototype.setDefaultDomImage = function setDefaultDomImage (domImage, imageScaling, imageCropping) {
  var DefaultEntry = this.particleDataStore[0];
  DefaultEntry.imageCanvas = domImgToCanvas(domImage);
  DefaultEntry.imageScaling = imageScaling;
  DefaultEntry.imageCropping = imageCropping;
  this.particleData = 0;
};
/// Hooks are run after the state has adapted to a new config object
RendererState.prototype.addHook = function addHook (hook) {
  this.hooks.push(hook);
};
/// Changes the viewport dimension
/// Not to be confused with the particle grid size. See
/// config.xParticlesCount and config.yParticlesCount for that
RendererState.prototype.resize = function resize (width, height) {
  this.width = width;
  this.height = height;
  this.pipeline.resize(width, height);
};
/// @return viewport width
RendererState.prototype.getWidth = function getWidth () {
  return this.width;
};
/// @return viewport height
RendererState.prototype.getHeight = function getHeight () {
  return this.height;
};

/**
 * The Renderer's job is to perform the following steps:
 * 1. Take a config object with the user's desired settings
 * 2. Inform the RendererState (state) about the new user config
 * 3. Create a new regl command for rendering frames according to the config
 * 4. Update the pipeline so that effects become available that require
 *    more than a single render pass.
 * 5. Inside the regl.frame callback (render loop), hydrate the regl
 *    command (the pipeline, to be more precise) with the current state
 *    and clock info (cf. RendererClock)
 */
var Renderer = function Renderer(canvas) {
  var this$1 = this;

  this.regl = regl({ canvas: canvas });
  console.info(("max texture size: " + (this.regl.limits.maxTextureSize)));
  console.info(("point size dims: " + (this.regl.limits.pointSizeDims[0]) + " " + (this.regl.limits.pointSizeDims[1])));
  console.info(("max uniforms: " + (this.regl.limits.maxVertexUniforms) + " " + (this.regl.limits.maxFragmentUniforms)));
  this.state = new RendererState(this.regl);
  this.config = null;
  this.commandBuilder = new CommandBuilder();
  this.clock = new RendererClock();
  this.resizeListeners = [];
  // low pass filtered FPS measurement found on stackoverflow.com/a/5111475/1468532
  this.frameTime = 0;
  this.pipelineCfg = {config: null, state: null, clock: null};
  this.regl.frame(function () {
    if (!this$1.state.isValid() || this$1.clock.isPaused())
      { return; }
    this$1.renderFrame();
  });
  var OnPausedResize = function () {
    // Wait for the resize event to be applied everywhere
    window.setTimeout((function () { return this$1.renderFrame(); }), 0);
  };
  this.clock.addPauseListener(function (paused) {
    if (paused)
      { this$1.addResizeListener(OnPausedResize); }
    else
      { this$1.removeResizeListener(OnPausedResize); }
  });
};

Renderer.prototype.renderFrame = function renderFrame () {
  var FILTER_STRENGTH = 20;
  this.clock.frame();
  if (!this.clock.isPaused())
    { this.frameTime += (this.clock.getDelta() - this.frameTime) / FILTER_STRENGTH; }
  this.pipelineCfg.config = this.config, this.pipelineCfg.state= this.state, this.pipelineCfg.clock= this.clock;
  this.state.pipeline.run(this.pipelineCfg);
};

Renderer.prototype.resize = function resize (width, height) {
  this.state.resize(width, height);
  for (var i = 0; i < this.resizeListeners.length; i++) {
    var listener = this.resizeListeners[i];
    listener(width, height);
  }
};
Renderer.prototype.addResizeListener = function addResizeListener (listener) {
  this.resizeListeners.push(listener);
};
Renderer.prototype.removeResizeListener = function removeResizeListener (listener) {
  var idx = this.resizeListeners.indexOf(listener);
  if (idx > -1)
    { this.resizeListeners.splice(idx, 1); }
  else
    { console.warn('Could not find resize listener to be removed'); }
};

Renderer.prototype.getClock = function getClock () {
  return this.clock;
};

Renderer.prototype.setConfig = function setConfig (config) {
    var this$1 = this;

  this.config = config;
  // TODO: rebuild command only when necessary
  this.state.adaptToConfig(config);
  this.commandBuilder.buildCommand({
      config: this.config,
      state:this.state,
      clock:this.clock
  })
  .then(function (command) {
    this$1.clock.reset();
    this$1.clock.setPeriod(this$1.config.duration);
    this$1.state.pipeline.compile(this$1.regl(command));
    if (this$1.clock.isPaused())
      { this$1.renderFrame(); }
  }, function (error) { return console.error(error); });
};

Renderer.prototype.getState = function getState () {
  return this.state;
};

Renderer.prototype.getFPS = function getFPS () {
  if (this.frameTime === 0) {
    return '?';
  }
  return Math.round(1000 / this.frameTime);
};

var errorManager = new ErrorManager(function() {
  console.info(Config);

  // some constants
  var imageLoadingClass = 'loading-image';
  var canvas = document.getElementById('main-canvas');

  // set up ui components
  var fullscreenBtn = new FullscreenButton();
  var fullscreenListener = new DoubleClickFullscreen();
  var imgSelect = new ImgSelect();
  var inactivityMonitor = new InactivityMonitor();
  var imgLoadDialog = new LoadImgDialog();
  var renderer = new Renderer(canvas);
  var menu = new MainMenu(renderer.getClock());

  function tryLoadFromLocalStorage() {
    if (window.localStorage) {
      var configJson = window.localStorage.getItem('savedConfig');
      if (configJson !== null) {
        var config = JSON.parse(configJson);
        menu.applyConfig(config);
        menu.submit();
        return true;
      }
    }
    return false;
  }
  function tryLoadFromHash() {
    if (window.location.hash) {
      var hash = window.location.hash.substring(1);
      var hashDict = hash.split('&')
      .reduce(function (acc, item) {
        var parts = item.split('=');
        acc[parts[0]] = parts[1];
        return acc;
      }, {});
      if (hashDict.preset !== undefined && allPresets[hashDict.preset]) {
        var preset = allPresets[hashDict.preset];
        menu.applyConfig(preset.config);
        menu.submit();
        window.location.hash = '';
        return true;
      }
    }
    return false;
  }
  // Try loading the timeline from different places
  if (!tryLoadFromHash()) {
    tryLoadFromLocalStorage();
  }
  window.addEventListener("hashchange", tryLoadFromHash);

  var adjustCanvasSize = function () {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    renderer.resize(window.innerWidth, window.innerHeight);
  };
  window.addEventListener('resize', adjustCanvasSize);
  adjustCanvasSize();

  var earlyConfig = menu.submittedConfig;
  var isInitialPageLoad = true;
  var srcImage = document.createElement('img');
  srcImage.crossOrigin = 'Anonymous'; // http://stackoverflow.com/a/27840082/1468532
  srcImage.src = earlyConfig.defaultImage || 'default.jpg';
  srcImage.onload = function () {
    if (isInitialPageLoad) {
      isInitialPageLoad = false;
      renderer.getState().setDefaultDomImage(
        srcImage, earlyConfig.defaultImageScaling,
        earlyConfig.defaultImageCropping
      );
      // particleCounts are either what has been loaded from localStorage
      // or the dimensions of the default image (adapted to the user's
      // screen aspect ratio)
      var screenAR = window.innerWidth / window.innerHeight;
      var particleCounts = {
        xParticlesCount: menu.submittedConfig.xParticlesCount || srcImage.naturalWidth,
        yParticlesCount: menu.submittedConfig.yParticlesCount || Math.round(srcImage.naturalHeight / screenAR)
      };
      // We want to get the default particle count from the default image,
      // but what the user specified before the page was reloaded should
      // also be ok.
      // Modifying the default config this late seems hacky, but what else
      // can we do?
      menu.defaultConfig = Object.assign(menu.defaultConfig, particleCounts);
      menu.applyConfig(Object.assign(menu.submittedConfig, particleCounts));
      menu.submit();
      document.documentElement.classList.remove(imageLoadingClass);
    } else {
      imgLoadDialog.load(srcImage)
      .then(function (ref) {
        var imageScaling = ref.imageScaling;
        var imageCropping = ref.imageCropping;

        renderer.getState().setDefaultDomImage(srcImage, imageScaling, imageCropping);
        menu.applyConfig(Object.assign({}, menu.submittedConfig, {
          defaultImageScaling: imageScaling, defaultImageCropping: imageCropping
        }));
        // Trigger state.adaptToConfig (rebuilds default particle data) and
        // unpause the renderer clock
        menu.submit();
      }, function () {
        /* User canceled loading image */
        // If we don't clear, changeListeners may not fire if same image is selected again
        imgSelect.clear();
      })
      .then(function () {
        // do this both on cancel and on accept (= .finally())
        document.documentElement.classList.remove(imageLoadingClass);
      }, function (e) {
        console.warn(e);
      });
    }
  };
  srcImage.onerror = function () {
    document.documentElement.classList.remove(imageLoadingClass);
  };

  imgSelect.addChangeListener(function (url) {
    // Prevent messed-up app states caused by multiple parallel image loads
    if (!document.documentElement.classList.contains(imageLoadingClass)) {
      srcImage.src = url;
      document.documentElement.classList.add(imageLoadingClass);
    }
  });

  menu.addChangeListener(function (config) {
    renderer.setConfig(config);
    if (window.localStorage) {
      window.localStorage.setItem('savedConfig', JSON.stringify(config, null, 2));
    }
  });

  // FPS display
  var fpsUpdater = window.setInterval(function () {
    document.title = "Particles (" + (renderer.getFPS()) + " fps)";
  }, 2000);
});

}());
